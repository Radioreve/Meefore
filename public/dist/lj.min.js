	
	window.LJ = _.merge( window.LJ || {}, 

{
    settings: {
        app: {}
    },
	accessToken:'',
	ui:{
		nearest_event_opacity: '.5',
		artificialDelay: 700,
		minimum_loading_time: 500,

        //Down
		slideDownInLight:  { opacity: [1, 0], translateY: [0, 10]   },
        slideDownInVeryLight:  { opacity: [1, 0], translateY: [0, 7]   },

        //Up
		slideUpOutLight: { opacity: [0, 1], translateY: [-10, 0]   },
		slideUpOutVeryLight: { opacity: [0, 1], translateY: [-7, 0]   },
        slideUpInLight: { opacity: [1, 0], translateY: [0, -10]   },
        slideUpInVeryLight: { opacity: [1, 0], translateY: [0, -7]   },

        //Left
		slideLeftInLight:  { opacity: [1, 0], translateX: [0, -10]   },
		slideLeftOutLight:  { opacity: [0, 1], translateX: [-10, 0]   },
        slideLeftInVeryLight:  { opacity: [1, 0], translateX: [0, -7]   },
        slideLeftOutVeryLight:  { opacity: [0, 1], translateX: [-7, 0]   },

        //Right
        slideRightInLight: { opacity: [1, 0], translateX: [0, 10]   },
		slideRightOutLight: { opacity: [0, 1], translateX: [10, 0]   },
        slideRightInVeryLight: { opacity: [1, 0], translateX: [0, 7]   },
        slideRightOutVeryLight: { opacity: [, 1], translateX: [7, 0]   }
	},
    page_default_title: "Meefore | Home",
    event_markers_intro: [],
    party_markers_intro: [],
    intro: {
        event_data: {
            "__v": 0,
            "begins_at": "2025-11-02T19:30:07.000Z",
            "timezone": 60,
            "created_at": "2015-11-02T12:18:07.000Z",
            "_id": "5637547fff83d96c44fe3aa8",
            "meta": [],
            "groups": [],
            "agerange": "20-26",
            "party": {
                "type": "anytype",
                "address": {
                    "city_name": "Earth",
                    "place_name": "Bastille",
                    "place_id": "ChIJS_r6rAFy5kcRmEpmy97_TnA",
                    "lng": 2.369002000000023,
                    "lat": 48.853082
                }
            },
            "address": {
                "city_name": "Paris",
                "place_name": "Rue du Bac",
                "place_id": "ChIJOQ6CxtVx5kcRd4vbzGeYf_w",
                "lng": 2.3249530000000505,
                "lat": 48.85537069999999
            },
            "type": "before",
            "status": "open",
            "hosts": [
                {
                    "main_picture": {
                        "hashtag": "meerofka",
                        "is_main": true,
                        "img_place": 1,
                        "img_version": "1445890265",
                        "img_id": "55e85819bc81dcecc1601e4d--1"
                    },
                    "channels": {
                        "me": "121428001540741",
                        "public_chan": "app"
                    },
                    "country_code": "us",
                    "mood": "happy",
                    "drink": "shots",
                    "name": "Jennifer Jenr",
                    "job": "",
                    "gender": "female",
                    "age": 18,
                    "signup_date": "2015-09-03T14:24:25.000Z",
                    "facebook_url": "https://www.facebook.com/app_scoped_user_id/121428001540741/",
                    "facebook_id": "jenn"
                },
                {
                    "main_picture": {
                        "hashtag": "classic",
                        "is_main": true,
                        "img_place": 0,
                        "img_version": "1444491565",
                        "img_id": "55e85897bc81dcecc1601e4e--0"
                    },
                    "channels": {
                        "me": "142944122715258",
                        "public_chan": "app"
                    },
                    "country_code": "fr",
                    "mood": "happy",
                    "drink": "water",
                    "name": "Kaitlin Kal",
                    "job": "",
                    "gender": "female",
                    "age": 18,
                    "signup_date": "2015-09-03T14:26:31.000Z",
                    "facebook_url": "https://www.facebook.com/app_scoped_user_id/142944122715258/",
                    "facebook_id": "kait"
                },
                {
                    "main_picture": {
                        "hashtag": "meerofka",
                        "is_main": true,
                        "img_place": 1,
                        "img_version": "1445890096",
                        "img_id": "561ec5f190a94cdc5229a0f5--1"
                    },
                    "channels": {
                        "me": "122537181435106",
                        "public_chan": "app"
                    },
                    "country_code": "fr",
                    "mood": "happy",
                    "drink": "water",
                    "name": "Ben Beaumec",
                    "job": "",
                    "gender": "male",
                    "age": 18,
                    "signup_date": "2015-10-14T21:15:29.000Z",
                    "facebook_url": "https://www.facebook.com/app_scoped_user_id/122537181435106/",
                    "facebook_id": "benb"
                },
                {
                    "main_picture": {
                        "img_id": "5622110750ccf4741d63be8f--0",
                        "img_version": "1445890920",
                        "img_place": 0,
                        "is_main": true,
                        "hashtag": "classic"
                    },
                    "channels": {
                        "me": "139625316382924",
                        "public_chan": "app"
                    },
                    "country_code": "us",
                    "mood": "happy",
                    "drink": "water",
                    "name": "David Dav",
                    "job": "",
                    "gender": "male",
                    "age": 18,
                    "signup_date": "2015-10-17T09:12:39.000Z",
                    "facebook_url": "https://www.facebook.com/app_scoped_user_id/139625316382924/",
                    "facebook_id": "will"
                }
            ]
        },
        party_data: {
            "_id": "5629550f2157aaf81eb43a2c",
            "address" : {
                "city_name" : "Paris",
                "place_name": "Bastille",
                "place_id": "ChIJS_r6rAFy5kcRmEpmy97_TnA",
                "lng": 2.369002000000023,
                "lat": 48.853082
            },
            "attendees" : "280-450",
            "begins_at" : "2014-10-22T20:00:00.923Z",
            "created_at" : "2015-10-22T21:28:47.000Z",
            "ends_at" : "2014-10-23T20:00:00.926Z",
            "hosted_by" : "OMG Nightclub",
            "link" : "http://www.bitoku.com",
            "name" : "The Gamma Party",
            "picture_url" : "http://res.cloudinary.com/radioreve/image/upload/v1445867671/lp1.jpg",
            "status" : "open",
            "timezone" : 120,
            "type" : "school"
        },
        message_data_user_1: {
            name: "Will",
            img_id: "5622110750ccf4741d63be8f--0",
            img_vs: "1445890920",
            facebook_id: "will"
        },
        message_data_user_2: {
            name: "Sandy",
            img_id: "55e85897bc81dcecc1601e4e--0",
            img_vs: "1444491565",
            facebook_id: "sandy"
        },
        events_data: [{
            _id: 'intro_1',
            party: {
                "type": "anytype",
                "address": {
                    "city_name": "Earth",
                    "place_name": "Bastille",
                    "place_id": "ChIJS_r6rAFy5kcRmEpmy97_TnA",
                    "lng": 2.369002000000023,
                    "lat": 48.853082
                }
            },
            address: {
                lat: 48.84726471793433,
                lng: 2.3407745361328125
            }
        }, {
            _id: 'intro_2',
            party: {
                "type": "anytype",
                "address": {
                    "city_name": "Earth",
                    "place_name": "Bastille",
                    "place_id": "ChIJS_r6rAFy5kcRmEpmy97_TnA",
                    "lng": 2.369002000000023,
                    "lat": 48.853082
                }
            },
            address: {
                lat: 48.84189859515306,
                lng: 2.3596572875976562
            }
        }, {
            _id: 'intro_3',
            party: {
                "type": "anytype",
                "address": {
                    "city_name": "Earth",
                    "place_name": "Bastille",
                    "place_id": "ChIJS_r6rAFy5kcRmEpmy97_TnA",
                    "lng": 2.369002000000023,
                    "lat": 48.853082
                }
            },
            address: {
                lat: 48.860931611800865,
                lng: 2.3534774780273438
            }
        }, {
            _id: 'intro_4',
            party: {
                "type": "anytype",
                "address": {
                    "city_name": "Earth",
                    "place_name": "Bastille",
                    "place_id": "ChIJS_r6rAFy5kcRmEpmy97_TnA",
                    "lng": 2.369002000000023,
                    "lat": 48.853082
                }
            }, address: {
                lat: 48.85968932107463,
                lng: 2.3886680603027344
            }
        }, {
            _id: 'intro_5',
            party: {
                "type": "anytype",
                "address": {
                    "city_name": "Earth",
                    "place_name": "Bastille",
                    "place_id": "ChIJS_r6rAFy5kcRmEpmy97_TnA",
                    "lng": 2.369002000000023,
                    "lat": 48.853082
                }
            },
            address: {
                lat: 48.84613505565775,
                lng: 2.377767562866211
            }
        }]
    },
	jsp_api: {},
	cache: {
        events : [],
        users  : []
	},
    bot_profile: {
        name        : "meebot",
        facebook_id : "1337",
        img_id      : "logo_black_on_white",
        img_version : "1438073167"

    },
	cloudinary:{
		uploadParams: { cloud_name:"radioreve", api_key:"835413516756943" },

		/* Image de l'host dans un event */
		displayParamsEventHost: { cloud_name :"radioreve", width: 80, height: 80, crop: 'fill', gravity: 'face', radius: '2' },

        /* Image des askers dans la vue event */
        displayParamsEventAsker: { cloud_name: "radioreve", width:45, height:45, crop:'fill', gravity:'face', radius:'0' },

		/* Image du user dans le header */
		displayParamsHeaderUser: { cloud_name: "radioreve",width: 50,height: 50, crop: 'fill', gravity: 'face', radius: 'max' },

		/* Image zoom lorsqu'on clique sur une photo*/
		displayParamsOverlayUser: { cloud_name: "radioreve", width: 280, height: 280, crop: 'fill', gravity: 'face', radius: 'max' },

        /* Image principale des askers dans vue managemnt */
        displayParamsAskerMain: { cloud_name: "radioreve", width:120, height:120, crop:'fill', gravity:'face', radius:3 },

		/* Image secondaire des askers dans vue management */
        displayParamsAskerThumb: { cloud_name: "radioreve", width:45, height:45, crop:'fill', gravity:'face', radius:'max' },

        /* Image secondaire des askers dans vue management, lorsqu'ils sont refusé */
        displayParamsAskerThumbRefused: { cloud_name: "radioreve", width:45, height:45, crop:'fill', effect:'grayscale', gravity:'face', radius:'max' },
        
		/* Image of friends in profile view */
		profile: {
			me: {
				params: { cloud_name: "radioreve", width: 150, height: 150, crop: 'fill', gravity: 'face' }
			},
			friends: {
				params: { cloud_name: "radioreve", 'class': 'rounded', width: 50, height: 50, crop: 'fill', gravity: 'face' }
			}
		},
		events:
		{
			map: {
				hosts: {
					params: { cloud_name: "radioreve", 'class': 'rounded detailable', width: 42, height: 42, crop: 'fill', gravity: 'face'}
				}
			},
			preview: {
				hosts: {
					params: { cloud_name: "radioreve", 'class': 'rounded detailable', width: 62, height: 62, crop: 'fill', gravity: 'face'}
				}
			},
			group: {
				params: { cloud_name: "radioreve", 'class': 'rounded detailable', width: 40, height: 40, crop: 'fill', gravity: 'face' }
			},
			chat: {
				params: { cloud_name: "radioreve", 'class': 'rounded', width: 30, height: 30, crop: 'fill', gravity: 'face' }
			}
		},
		create: {
			friends: {
				params: { cloud_name: "radioreve", 'class': 'friend-img none rounded', width: 24, height: 24, crop: 'fill', gravity: 'face' }
			}
		},
		search: {
			user: {
				params: { cloud_name: "radioreve", 'class': 'super-centered rounded', width: 40, height: 40, crop: 'fill', gravity: 'face'}
			}
		},
		markers: {
			base: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442418376/marker_dark.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442418376/marker_dark_full.png'
                }
            },
            base_active: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442418425/marker_pink.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442418425/marker_pink_full.png'
                }
            },
            hosting: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1443787505/marker_host_dark.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1443787505/marker_host_dark_full.png'
                }
            },
            hosting_active: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1443787504/marker_host_pink.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1443787504/marker_host_pink_full.png'
                }
            },
            pending: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442431311/marker_pending_dark.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442431311/marker_pending_dark_full.png'
                }
            },
            pending_active: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442867837/marker_pending_pink.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442867837/marker_pending_pink_full.png'
                }
            },
            kicked: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442431311/marker_pending_dark.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442431311/marker_pending_dark_full.png'
                }
            },
            kicked_active: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442867837/marker_pending_pink.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442867837/marker_pending_pink_full.png'
                }
            },
            accepted: {
                open: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442418560/marker_chat_dark.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442418560/marker_chat_dark_full.png'
                }
            },
            accepted_active: {
                open: {
                  url: 'http://res.cloudinary.com/radioreve/image/upload/v1442418507/marker_chat_pink.png'
                }, full: {
                    url: 'http://res.cloudinary.com/radioreve/image/upload/v1442418507/marker_chat_pink_full.png'
                }
            },
            party: {
                url: 'http://res.cloudinary.com/radioreve/image/upload/v1442436513/marker_party_dark.png'
            },
            party_active: {
                url:'http://res.cloudinary.com/radioreve/image/upload/v1442436750/marker_party_pink.png'
            }
		},
        curtain: {
        	main: {
        		params: { cloud_name: "radioreve", 'class': 'modal-main-picture etiquette', width: 300, height: 300, crop: 'fill', gravity: 'face' }
        	},
        	main_active: {
        		params: { cloud_name: "radioreve", 'class': 'modal-main-picture etiquette active', width: 300, height: 300, crop: 'fill', gravity: 'face' }
        	},
        	thumb: {
        		params: { cloud_name: "radioreve", 'class': 'modal-thumb-picture', crop: 'fill', gravity: 'face' }	
        	},
        	thumb_active: {
        		params: { cloud_name: "radioreve", 'class': 'modal-thumb-picture active', crop: 'fill', gravity: 'face' }
        	}
        },
        logo: {
        	black_on_white: {
        		id:'logo_black_on_white'
        	},
        	white_on_black: {
        		id:'logo_white_on_black'
        	}
        },
        placeholder: {
        	id: 'placeholder_picture',
        	params: { version: "1444912756", cloud_name :"radioreve", html: { 'class': 'mainPicture' }, width: 150 }
        },
    	loaders: {
    		main: {
    			id: 'main_loader',
    			params: { cloud_name :"radioreve", 'class': 'ajax-loader' }
    		},
            main_curtain: {
                id: 'main_loader_curtain',
                params: { cloud_name: "radioreve" }
            },
    		mobile: {
    			id: 'mobile_loader',
    			params: { cloud_name :"radioreve", 'class': 'ajax-loader', width: 25 }
    		},
    		bar: {
    			id: 'bar_loader',
    			params: { cloud_name :"radioreve" }
    		},
    		spinner: {
    			id: 'spinner_loader',
    			params: { cloud_name: "radioreve" }
    		},
    		curtain: {
    			id: 'curtain_loader_v4',
    			params: { cloud_name :"radioreve", 'class': 'curtain-loader super-centered', width: 20 }
    		},
            spinner_2: {
                id: 'spinner_loader_2',
                params: { cloud_name: "radioreve" }
            }
    	},
	},
	/* To be dynamically filled on login */
	user:{},
    $eventsToDisplay: $(),
    $main_loader: $(),
    $mobile_loader: $(),
    $chat_loader: $(),
    $curtain_loader: $(),
	state: {
		connected: false,
		fetchingEvents: false,
        fetchingAskers: false,
		freezing_ui: false,
		animatingChat: false,
		toastAdded: false,
		typingMsg: {},
		uploadingImage: false,
		uploadingimg_id:'',
		uploadingimg_version:''
	},
	tpl:{
		toastInfo : '<div class="toast toastInfo" class="none"><span class="toast-icon icon icon-right-open-big">'
					+'</span><span class="toastMsg"></span></div>',
		toastError: '<div class="toast toastError" class="none"><span class="toast-icon icon icon-cancel">'
					+'</span><span class="toastMsg"></span></div>',
		toastSuccess: '<div class="toast toastSuccess" class="none"><span class="toast-icon icon icon-right-open-big">'
					+'</span><span class="toastMsg"></span></div>',
		noResults: '<center id="noResults" class="filtered"><h3>Aucun évènement pour ce choix de filtre </h3></center>',
		noEvents: '<center id="noEvents" class=""><h3>Aucun évènement n\'a encore été proposé. Soyez le premier! </h3></center>'
	},
	tagList: [],
	msgQueue: [],
	locList: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ],
        $body                 : $('body'), 
		$loginWrap		 	  : $('#loginWrapp'),
		$signupWrap			  : $('#signupWrapp'),
		$resetWrap   	      : $('#resetWrapp'),
		$profileWrap	      : $('#profileWrap'),
		$eventsWrap		      : $('#eventsWrap'),
		$manageEventsWrap     : $('#manageEventsWrap'),
        $askersListWrap       : $('#askersListWrap'),
		$thumbWrap			  : $('#thumbWrap'),
		$loginBtn  	          : $('#login'),
		$signupBtn            : $('#signup'),
		$resetBtn			  : $('#reset'),
		$emailInput           : $('#email'),
		$passwordInput        : $('#pw'),
		$lostPassword         : $('#lost_pw'),
		$emailInputSignup     : $('#emailSignup'),
		$passwordInputSignup  : $('#pwSignup'),
		$passwordCheckInput   : $('#pwCheckSignup'),
		$backToLogin          : $('#b_to_login'),
		$validateBtn          : $('#validate'),
		$locationInput        : $('#location'),
		$loaderWrap 	      : $('.loaderWrap'),
		$createEventWrap	  : $('#createEventWrap'),
		$createEventBtn       : $('#createEventBtn'),
		$contentWrap          : $('#contentWrap'),
		$contactWrap          : $('#contactWrap'),
		$menuWrap             : $('#menuWrap'),
		$eventsListWrap       : $('#eventsListWrap'),
		$logout				  : $('#logout'),
	google: {
        map_center: {
            lat: 48.8566140,
            lng: 2.3522219
        },
		map: {
            style: {
                meemap: [
    {
        "featureType": "administrative",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "simplified"
            },
            {
                "hue": "#ff0000"
            },
            {
                "weight": "0.27"
            }
        ]
    },
    {
        "featureType": "administrative",
        "elementType": "labels.text.fill",
        "stylers": [
            {
                "color": "#444444"
            }
        ]
    },
    {
        "featureType": "administrative.country",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "administrative.locality",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "administrative.neighborhood",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "administrative.land_parcel",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "landscape",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "on"
            },
            {
                "color": "#fdfdfd"
            }
        ]
    },
    {
        "featureType": "landscape.man_made",
        "elementType": "geometry",
        "stylers": [
            {
                "visibility": "on"
            },
            {
                "hue": "#ff0000"
            }
        ]
    },
    {
        "featureType": "landscape.man_made",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "landscape.man_made",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "landscape.natural.terrain",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "landscape.natural.terrain",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "hue": "#ff0000"
            }
        ]
    },
    {
        "featureType": "poi",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "poi.park",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "simplified"
            },
            {
                "hue": "#37ff00"
            },
            {
                "lightness": "70"
            }
        ]
    },
    {
        "featureType": "poi.school",
        "elementType": "geometry",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "poi.school",
        "elementType": "labels",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "poi.sports_complex",
        "elementType": "geometry",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "poi.sports_complex",
        "elementType": "labels.text",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "all",
        "stylers": [
            {
                "saturation": -100
            },
            {
                "lightness": 45
            },
            {
                "visibility": "simplified"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "geometry",
        "stylers": [
            {
                "visibility": "simplified"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "labels",
        "stylers": [
            {
                "color": "#a39bb2"
            }
        ]
    },
    {
        "featureType": "road",
        "elementType": "labels.icon",
        "stylers": [
            {
                "visibility": "simplified"
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "simplified"
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "hue": "#ff0000"
            },
            {
                "weight": "0.65"
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "weight": "0.20"
            },
            {
                "lightness": "82"
            },
            {
                "gamma": "1.19"
            },
            {
                "saturation": "-42"
            },
            {
                "color": "#d59ca6"
            }
        ]
    },
    {
        "featureType": "road.highway",
        "elementType": "labels",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "road.highway.controlled_access",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "road.highway.controlled_access",
        "elementType": "labels",
        "stylers": [
            {
                "visibility": "off"
            },
            {
                "lightness": "16"
            }
        ]
    },
    {
        "featureType": "road.highway.controlled_access",
        "elementType": "labels.icon",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "road.arterial",
        "elementType": "geometry",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "road.arterial",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "visibility": "on"
            },
            {
                "weight": "0.4"
            },
            {
                "color": "#dbdbdb"
            },
            {
                "lightness": "10"
            }
        ]
    },
    {
        "featureType": "road.arterial",
        "elementType": "labels.icon",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "road.local",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "simplified"
            }
        ]
    },
    {
        "featureType": "road.local",
        "elementType": "geometry.fill",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "road.local",
        "elementType": "geometry.stroke",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "transit",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "on"
            }
        ]
    },
    {
        "featureType": "transit.line",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "transit.station",
        "elementType": "all",
        "stylers": [
            {
                "visibility": "off"
            }
        ]
    },
    {
        "featureType": "water",
        "elementType": "all",
        "stylers": [
            {
                "color": "#dae7f2"
            },
            {
                "visibility": "on"
            }
        ]
    }
] 

            }
        }
	}

});
	
	// Needs to be loaded before lj-ui

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		initRouter: function(){

			// Reference
			var wl = window.location;

			// Routing table to map each url to a button to click
			LJ.router = {
				me: {
					elem: '#profile'
				},
				events: {
					elem     : '#events',
					callback : function(){

					}
				},
				settings: {
					elem: '#settings'
				}
			};

			LJ.$body.on('click', '[data-hash]', function(e){

				var $self = $(this);

				// Prevent trigger state visit on parents
				e.stopPropagation();

				// Move the url to the current hash state
				var hash = $self.attr('data-hash');
				wl.hash = '#' + hash;

			});

			$( window ).on('hashchange', function(){

				var hash   = wl.hash.split('#')[1]
				var target = LJ.router[ hash ].elem; 

				$( target ).click();

			});

		}

	});

	LJ.text_source = _.merge( LJ.text_source || {}, {

		i18n: {
			"en": {
                previousMonth : 'Previous Month',
                nextMonth     : 'Next Month',
                months        : ['January','February','March','April','May','June','July','August','September','October','November','December'],
                weekdays      : ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
                weekdaysShort : ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
            },
            "fr": {
            	previousMonth : 'Mois Précédant',
                nextMonth     : 'Mois Suivant',
                months        : ['Janvier','Février','Mars','Avril','Mai','Juin','Juillet','Août','Septembre','Octobre','Novembre','Décembre'],
                weekdays      : ['Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi','Dimanche'],
                weekdaysShort : ['Dim','Lun','Ma','Me','Jeu','Ven','Sam']
            }
		},
		t_language_changed: {
			"fr": "La langue a été changée",
			"en": "The language has been changed"
		},
		p_title: {
			"fr": "Mon profil",
			"en": "My profile"
		},
		p_pictures_title: {
			"fr": "Mes 5 photos",
			"en": "My 5 photos"
		},
		p_pictures_subtitle: {
			"fr": "Plusieurs photos valent mieux qu'un long discours",
			"en": "Multiple pictures speak louder than a boring speech"
		},
		p_info_title: {
			"fr": "Mes informations",
			"en": "My information"
		},
		p_info_subtitle: {
			"fr": "Dîtes-nous tout et surtout, concentrez-vous sur l'essentiel",
			"en": "Tell us everything, and above all, focus on the essential",
		},
		p_name_label: {
			"fr": "Nom",
			"en": "Name"
		},
		p_name_placeholder: {
			"fr": "Prad Bitt",
			"en": "Prad Bitt"
		},
		p_age_label: {
			"fr": "Âge",
			"en": "Age"
		},
		p_country_label: {
			"fr": "Pays",
			"en": "Country"
		},
		p_job_label: {
			"fr": "Situation",
			"en": "Occupation"
		},
		p_lifestyle_label: {
			"fr": "Humeur",
			"en": "Mood"
		},
		p_lifestyle_happy: {
			"fr": "Heureux",
			"en": "Happy"
		},
		p_lifestyle_cheers: {
			"fr": "Relax",
			"en": "Relax"
		},
		p_lifestyle_drunk: {
			"fr": "Ivre",
			"en": "Drunk"
		},
		p_lifestyle_chill: {
			"fr": "Relax",
			"en": "Chill"
		},
		p_lifestyle_horney: {
			"fr": "Coquin",
			"en": "Horney"
		},
		p_lifestyle_innocent: {
			"fr": "Innocent",
			"en": "Innocent"
		},
		p_lifestyle_evil: {
			"fr": "Vilain",
			"en": "Nasty"
		},
		p_drink_label: {
			"fr": "Ton verre",
			"en": "Your drink"
		},
		p_drink_water: {
			"fr": "Eau",
			"en": "Water"
		},
		p_drink_hard: {
			"fr": "Hard",
			"en": "Hard"
		},
		p_drink_shots: {
			"fr": "Shots",
			"en": "Shots"
		},
		p_drink_beer: {
			"fr": "Bières",
			"en": "Beers"
		},
		p_drink_wine: {
			"fr": "Vins",
			"en": "Wines"
		},
		p_friends_title: {
			"fr": "Mes amis Facebook",
			"en": "Everybody is on Meefore"
		},
		p_friends_subtitle: {
			"fr": "Vos amis Facebook sont tous sur Meefore. Il en manque? Invitez-les à vous rejoindre!",
			"en": "All your Facebook friends are on Meefore. Are some of them missing? Invite them to join!"
		},
		p_friends_nofriends: {
			"fr": "Vous n'avez aucun ami Facebook inscrit sur Meefore. Invitez-les pour commencer à participer à des meefore!",
			"en": "You don't have any Facebook friends on Meefore. Invite them all to start taking part in meefore!"
		},
		p_button_validate: {
			"fr": "Valider",
			"en": "OK"
		},
		p_button_cancel: {
			"fr": "Annuler",
			"en": "Cancel"
		},
		p_picture_upload_success: {
			"fr": "Votre photo a été mise à jour",
			"en": "Your photo has been uploaded"
		},
		p_picture_upload_error: {
			"fr": "Une erreur s'est produite lors de l'envoie de la photo",
			"en": "An error occured during the upload, please try again later"
		},
		p_facebook_upload_title: {
			"fr": "Vos photos de profil Facebook",
			"en": "Your Facebook profile pictures"
		},
		h_search_placeholder: {
			"fr": "Rechercher quelqu'un",
			"en": "Looking for someone?"
		},
		h_logout: {
			"fr": "Se déconnecter",
			"en": "Log out"
		},
		e_title: {
			"fr": "Tous les meefore",
			"en": "Get the party started"
		},
		e_subtitle: {
			"fr": "L'abus de soirées est bon pour la santé",
			"en": "Non-stop partying is actually healthy"
		},
		e_create_button: {
			"fr": "Proposer un meefore",
			"en": "Create a meefore"
		},
		e_create_title: {
			"fr": "Proposer un meefore",
			"en": "Create a meefore"
		},
		e_create_hosts: {
			"fr": "Organisateurs",
			"en": "Hosts"
		},
		e_create_hosts_placeholder: {
			"fr": "Sélectionnez parmis vos amis (1 minimum)",
			"en": "Select among your friends (1 minimum)"
		},
		e_create_begins_at: {
			"fr": "Date du before",
			"en": "Before date"
		},
		e_create_begins_at_placeholder: {
			"fr": "Quel jour? ",
			"en": "Which day?"
		},
		e_create_hour: {
			"fr": "Heure du Before",
			"en": "Before hour"
		},
		e_create_hour_placeholder: {
			"fr": "Quelle heure?",
			"en": "What time?"
		},
		e_create_address: {
			"fr": "Lieu du before",
			"en": "Location"
		},
		e_create_address_placeholder: {
			"fr": "Où vous rejoignez-vous?",
			"en": "Where will you meet?"
		},
		e_create_party: {
			"fr": "Lieu de la soirée",
			"en": "Party location"
		},
		e_create_party_placeholder: {
			"fr": "Où allez-vous ensuite?",
			"en": "Where are you going next?"
		},
		e_create_agerange: {
			"fr": "Âge souhaité",
			"en": "Age preference"
		},
		e_create_ambiance: {
			"fr": "Ambiance",
			"en": "Ambiance"
		},
		e_create_ambiance_placeholder: {
			"fr": "#hashtagTonMeefore",
			"en": "#hashtagYourMeefore"
		},
		e_create_guests_type: {
			"fr": "Type d'invités",
			"en": "Guests type"
		},
		e_create_button_validate: {
			"fr": "Créer un meefore",
			"en": "Create a meefore"
		},
		e_create_button_cancel: {
			"fr": "Annuler",
			"en": "Cancel"
		},
		e_create_loading_text: {
			"fr": "Votre meefore a été créé avec succès ! ",
			"en": "Your meefore has been successully created !"
		},
		e_request_title: {
			"fr": "Demande de participation",
			"en": "Participation request"
		},
		e_request_button_validate: {
			"fr": "Rejoindre ce meefore",
			"en": "Join this meefore"
		},
		e_request_group_name: {
			"fr": "Nom de ton groupe",
			"en": "Your group name"
		},
		e_request_group_members: {
			"fr": "Membres de ton groupe",
			"en": "Members of your group"
		},
		e_request_group_message: {
			"fr": "Message",
			"en": "Message"
		},
		e_request_group_name_placeholder: {
			"fr": "Ce nom apparaîtra dans le chat",
			"en": "This name will be displayed in the chat"
		},
		e_request_group_members_placeholder: {
			"fr": "Choisissez les personnes avec qui vous souhaitez sortir",
			"en": "Choose the people you wanna go out with"
		},
		e_request_group_message_placeholder: {
			"fr": "Dites-nous en plus à propos de votre groupe",
			"en": "Tell us more about your group"
		},
		e_request_button_cancel: {
			"fr": "Annuler",
			"en": "Cancel"
		},
		e_request_event_got_canceled: {
			"fr": "Le meefore vient d'être annulé :/",
			"en": "The meefore just got canceled :/"
		},
		e_preview_participate: {
			"fr": "Participer",
			"en": "Participate"
		},
		e_preview_manage: {
			"fr": "Organiser",
			"en": "Organize"
		},
		e_preview_first_to_create: {
			"fr": "Proposer un meefore",
			"en": "Create a meefore"
		},
		e_preview_chat: {
			"fr": "Discuter",
			"en": "Chat"
		},
		e_preview_pending: {
			"fr": "En attente",
			"en": "Pending"
		},
		e_filters_location: {
			"fr": "Changer d'endroit",
			"en": "Change location"
		},
		e_filters_date: {
			"fr": "Dates",
			"en": "Dates"
		},
		e_create_party_button: {
			"fr": "Soirée partenaire",
			"en": "Partner event"
		},
		e_prevew_default_text: {
			"fr": "Aucun before n\'est prévu pour cette soirée. Soyez le premier à en proposer un.",
			"en": "No pregame party is planned for this party. Be the first to organize one."
		},
		e_preview_planned: {
			"fr": "%n meefore prévu(s) ce jour là",
			"en": "%n meefore planned this day"
		},
		s_title: {
			"fr": "Préférences",
			"en": "Preferences"
		},
		s_app_title: {
			"fr": "Application",
			"en": "In app"
		},
		s_app_subtitle: {
			"fr": "Modifier le comportement général de l'application",
			"en": "Modify the general behavior of the app"
		},
		s_contact_title: {
			"fr": "Informations de contact",
			"en": "Contact information"
		},
		s_contact_subtitle: {
			"fr": "Restez informé",
			"en": "Stay in touch'"
		},
		s_contact_email_label: {
			"fr": "Email de contact",
			"en": "Contact email"
		},
		s_contact_email_desc: {
			"fr": "Indiquez-nous l'email sur lequel vous souhaitez être contacté",
			"en": "Let us know at what email address we can reach you"
		},
		s_autologin_label: {
			"fr": "Connexion automatique",
			"en": "AutoLogin"
		},
		s_autologin_desc: {
			"fr": "Activez cette option pour accéder directement à Meefore sans passer par la page d'accueil",
			"en": "Activate this option to reach directly Meefore and skip the landing page"
		},
		s_message_readby_label: {
			"fr": "Connexion automatique",
			"en": "AutoLogin"
		},
		s_message_readby_desc: {
			"fr": "Activez cette option pour accéder directement à Meefore sans passer par la page d'accueil",
			"en": "Activate this option to reach directly Meefore and skip the landing page"
		},
		s_news_title: {
			"fr": "Newsletter et Invitations",
			"en": "Newsletter and Invitations"
		},
		s_news_subtitle: {
			"fr": "Recevez nos emails concernant soirées, bons plans et rencontres.",
			"en": "Receive our emails that deal with parties, opportunities and meetups."
		},
		s_newsletter_label: {
			"fr": "Newsletter",
			"en": "Newsletter"
		},
		s_newsletter_desc: {
			"fr": "Notre newsletter est envoyée chaque semaine",
			"en": "Our newsletter is sent every week"
		},
		s_invits_label: {
			"fr": "Invitations",
			"en": "Invitations"
		},
		s_invits_desc: {
			"fr": "Bons plans pour être invité à des soirées exclusives",
			"en": "Get invited to exclusive parties"
		},
		s_alerts_title: {
			"fr": "Alertes et notifications",
			"en": "Alerts and notifications"
		},
		s_alerts_subtitle: {
			"fr": "Soyez alerté dès que de l'activité vous concernant se présente",
			"en": "Be informed when anything about you happens"
		},
		s_accepted_in_label: {
			"fr": "Accepté dans un meefore",
			"en": "Accepted in a meefore"
		},
		s_accepted_in_desc: {
			"fr": "Recevez un email dès que vous êtes accepté dans un meefore",
			"en": "Receive an email when you are accepted in a meefore"
		},
		s_message_unread_label: {
			"fr": "Message reçu hors-ligne",
			"en": "Unread message"
		},
		s_message_unread_desc: {
			"fr": "Recevez un email dès que vous êtes hors-ligne et que vous recevez un nouveau message",
			"en": "Receive an email when you're offline and someone sends you a new message"
		},
		s_message_readby_label: {
			"fr": "Signaler message lu",
			"en": "Signal message read"
		},
		s_message_readby_desc: {
			"fr": "Signalez automatiquement aux autres utilisateurs que vous avez vu leur message",
			"en": "Signal to other users that you have read their message"
		},
		s_min_frequency_label: {
			"fr": "Temps entre chaque email",
			"en": "Time lapse between each emails"
		},
		s_min_frequency_desc: {
			"fr": "Pour éviter d'être spammé par l'application",
			"en": "To avoid any spam by the app"
		},
		s_0min: {
			"fr": "Aucune limite",
			"en": "No limit"
		},
		s_15min: {
			"fr": "15min",
			"en": "15min"
		},
		s_60min: {
			"fr": "1h",
			"en": "1h"
		},
		s_360min: {
			"fr": "6h",
			"en": "6h"
		},
		s_720min: {
			"fr": "12h",
			"en": "12h"
		},
		s_1440min: {
			"fr": "24h",
			"en": "24h"
		},
		s_yes: {
			"fr": "Oui",
			"en": "Yes"
		},
		s_no: {
			"fr": "Non",
			"en": "No"
		},
		s_delete_goodbye: {
			"fr": "Votre compte a bien été supprimé",
			"en": "Your account has been deleted"
		},
		s_delete_title: {
			"fr": "Supprimer mon profil",
			"en": "Delete my profile"
		},
		s_delete_text: {
			"fr": "Toutes les données vous concernant seront supprimées",
			"en": "All your data will be deleted"
		},
		s_delete_validate: {
			"fr": "Supprimer",
			"en": "Delete"
		},
		s_delete_profile_btn: {
			"fr": "Supprimer mon profil",
			"en": "Delete my profile"
		},
		s_delete_cancel: {
			"fr": "Annuler",
			"en": "Cancel"
		},
		ch_hosts: {
			"fr": "Organisateurs",
			"en": "Hosts"
		},
		ch_placeholder: {
			"fr": "Message...",
			"en": "Message..."
		},
		ch_button_update: {
			"fr": "Mettre à jour",
			"en": "Update"
		},
		ch_button_cancel: {
			"fr": "Annuler",
			"en": "Cancel"
		},
		ch_settings_status_label: {
			"fr": "Statut du meefore",
			"en": "Meefore status"
		},
		ch_settings_status_open: {
			"fr": "Ouvert",
			"en": "Opened"
		},
		ch_settings_status_suspended: {
			"fr": "Suspendu/Complet",
			"en": "Suspended/Full"
		},
		ch_settings_status_canceled: {
			"fr": "Annulé",
			"en": "Canceled"
		},
		ch_bot_msg_group_pending: {
			"fr": "Votre groupe a été suspendu de la discussion",
			"en": "Your group has been suspended from the discussion"
		},
		ch_bot_msg_group_accepted: {
			"fr": "Votre groupe vient d'être accepté dans la discussion!",
			"en": "Your group just got accepted in the discussion"
		},
		ch_first_msg_host_channel: {
			"fr": "Votre meefore a été créé avec succès. <br> Ce chat est privé entre vous et les autres organisateurs.",
			"en": "Your meefore has been successully created. <br> This chat is dedicated to you and the other hosts."
		},
		ch_first_msg_host: {
			"fr": "  a demandé à rejoindre votre meefore : ",
			"en": "  has asked to join your meefore : "
		},
		ch_first_msg_group: {
			"fr": "Votre demande a bien été envoyée. <br> Dès que l'un des organisateurs vous aura accepté, vous aurez accès à la discussion.",
			"en": "Your request has been sent. <br> As soon as one of the hosts has approved your request, you'll have access to the chat."
		},
		ch_request_validate: {
			"fr": "Accepter ce groupe",
			"en": "Chat with this group"
		},
		ch_button_send: {
			"fr": "Envoyer",
			"en": "Send"
		},
		ch_button_whisper: {
			"fr": "Chuchoter",
			"en": "Whisper"
		},
		to_default_error: {
			"fr": "Une erreur est survenue",
			"en": "Something went wrong"
		}, 
		to_chat_inp_not_in: {
			"fr": "Vous n'avez pas encore été accepté!",
			"en": "You haven't been accepted yet"
		},
		to_chat_inp_too_quick: {
			"fr": "Moins vite",
			"en": "Slow down"
		},
		to_chat_inp_empty: {
			"fr": "Le message est vide!",
			"en": "The message is empty"
		},
		to_event_created_success_1: {
			"fr": "Votre meefore a été créé avec succès!",
			"en": "Your meefore has been successfully created!"
		},
		to_event_created_success_2: {
			"fr": "Que la fête commence...",
			"en": "May the party get started..."
		},
		to_party_created_success: {
			"fr": "La soirée a été ajoutée",
			"en": "The party has been added"
		},
		to_event_group_accepted: { 
			"fr": "Le groupe %s a été accepté",
			"en": "The group %s has been accepted"
		},
		to_event_group_pending: {
			"fr": "Le groupe %s a été mis en attente",
			"en": "The group %s has been put on hold"
		},
		to_request_sent: {
			"fr": "Votre demande a été envoyée!",
			"en": "Your request has been sent"
		},
		to_request_event_status_modified: {
			"fr": "Le statut de l'évènement a été modifié",
			"en": "The event status has been modified"
		},
		to_init_no_friends: {
			"fr": "Aucun de vos amis n'est sur Meefore? Invitez-les à vous rejoindre!",
			"en": "None of your friends is on Meefore? Invite them all!"
		},
		to_noupload_necessary: {
			"fr": "Aucune mise à jour n'est nécessaire!",
			"en": "No update is necessary!"
		},
		to_upload_singlepic: {
			"fr": "Ne téléchargez qu'une seule image à la fois",
			"en": "Please, don't upload more than one picture at once"
		},
		to_upload_pic_success: {
			"fr": "Votre photo a été modifiée",
			"en": "Your picture has been updated"
		},
		to_host_push_new_group: {
			"fr": "Un groupe souhaite rejoindre votre meefore",
			"en": "A group has requested to join your meefore"
		},
		to_push_new_request_by_friend: {
			"fr": "Un ami vous a ajouté à un meefore",
			"en": "A friend of yours has added you to a meefore"
		},
		to_push_new_status_by_friend: {
			"fr": "Un de vos amis a modifié le statut d'un de vos meefore",
			"en": "A friend of yours has modified the status of one of your meefore"
		},
		to_push_request_accepted: {
			"fr": "Vous avez été accepté dans un meefore!",
			"en": "You have been accepted in a meefore!"
		},
		to_push_group_validated_by_friend: {
			"fr": "Un de vos amis a validé un groupe",
			"en": "A friend of yours has validated a group"
		},
		to_push_group_suspended_by_friend: {
			"fr": "Un de vos amis a suspendu un groupe de la discussion",
			"en": "A friend of yours has suspended a group from the chat"
		},
		to_welcome: {
			"fr": "Bienvenue sur Meefore",
			"en": "Welcome to Meefore"
		},
		intro_chat_1: {
			"fr": "Hey guys",
			"en": "Hi guys"
		},
		intro_chat_2: {
			"fr": "On sort dans cette nouvelle boite ce soir, y'a une soirée internationale.",
			"en": "This is gonna be like really, really fun. We want to go to this new club, there is gon' be an international party."
		},
		intro_chat_3: {
			"fr": "On va prendre une bouteille à l'entrée. Vous voulez toujours vous joindre à nous... ? ;)",
			"en": "We gon take a table with a bottle of vodka, do you guys still wanna follow us..?"
		},
		intro_welcome_header: {
			"fr": "Bienvenue sur Meefore!",
			"en": "Welcome to Meefore!"
		},
		intro_welcome_subheader: {
			"fr": "Vous aimez sortir et rencontrer de nouvelles personnes? Meefore va changer vos soirées. Suivez le tour pour découvrir comment.",
			"en": "You love partying and meeting new people? Meefore will change your nights. Take the tour to discover how."
		},
		intro_welcome_btn: {
			"fr": "Montrez-moi",
			"en": "Show me"
		},
		intro_welcome_skip: {
			"fr": "Je sais déjà comment ça marche",
			"en": "I already know how it works"
		},
		intro_ending_header: {
			"fr": "Vous êtes prêt à démarrer!",
			"en": "You are now ready to start!"
		},
		intro_ending_subheader: {
			"fr": "Il ne vous reste plus qu\'à remplir votre profil et à en parler à vos amis. <br> A bientôt en soirée!",
			"en": "All you have to do know is bring your friends and complete your profile. <br> See you at the next party!"
		},
		intro_ending_btn: {
			"fr": "Mon profil",
			"en": "My profile"
		},
		intro_ending_skip: {
			"fr": "Je remplirai mon profil plus tard. Montrez-moi les soirées!",
			"en": "I'll complete my profile later. Show me the parties!"
		},
		intro_text_1: {
			"fr": "Meefore, c'est une carte avec des soirées et des before",
			"en": "Meefore, it's a map with parties and pregame parties"
		},
		intro_text_2: {
			"fr": "Chaque utilisateur peut proposer un before...",
			"en": "Each user can host a pregame party..."
		},
		intro_text_3: {
			"fr": "...avant d'aller à une soirée",
			"en": "...before going to a specific party"
		},
		intro_text_4: {
			"fr": "Les soirées affichées sur la carte sont proposées par les utilisateurs, ou suggérées par Meefore",
			"en": "The parties displayed on the map are either proposed by our users or suggested by Meefore"
		},
		intro_text_5: {
			"fr": "Ça, c'est ce qui se passe quand plusieurs groupes ont organisé des before avant d'aller à la même soirée",
			"en": "This, is what happens when multiple groups host a pregame party before going to the same party"
		},
		intro_text_6: {
			"fr":"Lorsque vous cliquez sur un before, des informations sur les organisateurs apparaissent",
			"en": "When you click on a before, information on the hosts are displayed"
		},
		intro_text_7: {
			"fr": "Ici, c'est les organisateurs du before",
			"en": "Here, are the people that host the pregame party"
		},
		intro_text_8: {
			"fr": "Là, c'est la soirée où ils ont prévu d'aller après leur before",
			"en": "This, is the party where they are headed after their pregame party"
		},
		intro_text_9: {
			"fr": "Ici, vous pouvez demander à rejoindre leur before",
			"en": "This is where you ask to join their pregame party"
		},
		intro_text_10: {
			"fr": "Ça, c'est une demande de participation",
			"en": "This is what a participation request looks like"
		},
		intro_text_11: {
			"fr": "Meefore encourage la rencontre en groupes, c'est pourquoi vous devez être au moins deux pour rejoindre un before",
			"en": "Meefore really promotes group dating, which is why you need to be at least a group of two to make a request"
		},
		intro_text_12: {
			"fr": "Lorsque vous envoyez une demande de participation, le groupe organisateur doit valider votre demande",
			"en": "When you send a request, the hosting group must accept your request"
		},
		intro_text_13: {
			"fr": "Une fois accepté, l'icône change et vous indique que vous pouvez commencer à discuter",
			"en": "Once accepted, the icon changes and you can now start chatting"
		},
		intro_text_13a: {
			"fr": "Chaque organisateur peut suspendre un meefore à tout moment pour signaler qu'ils sont au complet",
			"en": "Each host can suspend a pregame party at anytime to signal it is full"
		},
		intro_text_14: {
			"fr": "En bas de l'écran sont représentés tous les meefore qui vous concernent",
			"en": "Down the screen are shown every meefore you either host or want to join"
		},
		intro_text_15: {
			"fr": "C'est ici que se passe le chat!",
			"en": "This is where you chat!"
		},
		intro_text_16: {
			"fr": "Lorsque les organisateurs ont validé votre demande, la discussion peut démarrer",
			"en": "Once the hosts have accepted your request, the talk can start"
		},
		intro_text_17: {
			"fr": "Le chat laisse la possibilité de 'chuchotter' des messages à une ou plusieurs personnes",
			"en": "The chat allows you to 'whisper' messages to one or several people. Only the selected people will receive those messages"
		},
		//mp stands for missing parameter
		err_create_n_hosts: {
			"fr": "Il faut être entre %min et %max pour organiser un before",
			"en": "You must be between %min and %max to organize a pregame party",
		},
		err_create_mp_ambiance: {
			"fr": "Hashtag ton meefore pour le décrire",
			"en": "Hashtag your meefore to describe it"
		},
		err_create_mp_party: {
			"fr": "Adresse de la soirée manquante",
			"en": "Missing the address of the party"
		},
		err_create_mp_address: {
			"fr": "Adresse du meefore manquante",
			"en": "Missing meefore's address"
		},
		err_create_mp_begins_at: {
			"fr": "Date manquante/incomplète",
			"en": "Missing the date"
		},
		err_create_mp_default: {
			"fr": "Une des valeurs semble manquer",
			"en": "There is a field that seems to be missing "
		},
		err_create_already_hosting_me: {
			"fr": "Vous organisez déjà un meefore ce jour là",
			"en": "You have already planned a meefore this day"
		},
		err_create_already_hosting_other: {
			"fr": "%s organise déjà un meefore ce jour là",
			"en": "%s has already planned a meefore this day"
		},
		err_create_twin_hosts: {
			"fr": "Tous les organisateurs doivent être différents",
			"en": "Every host must be different"
		},
		err_create_time_travel: {
			"fr": "La date de début ne peut être une date passée",
			"en": "The date seems to be wrong"
		},
		err_create_ghost_hosts: {
			"fr": "Un des organisateurs n'a pas été trouvé",
			"en": "One of the hosts can't be found"
		},
		err_request_mp_members_facebook_id: {
			"fr": "Il faut être au moins deux pour rejoindre un meefore",
			"en": "You must be at least two to organize a meefore"
		},
		err_request_mp_name: {
			"fr": "En manque d'inspiration? Un petit effort!",
			"en": "Lacking inspiration? A little bit of extra effort!"
		},
		err_request_mp_message: {
			"fr": "Un message de bienvenue est indispensable!",
			"en": "A welcome message is much-needed!"
		},
		err_request_mp_default: {
			"fr": "Une des valeurs semble manquer",
			"en": "One of the values seems to be missing"
		},
		err_request_already_there: {
			"fr": " déjà présent en tant ",
			"en": " already there "
		},
		err_request_already_there_role_host: {
			"fr": "qu'organisateur",
			"en": "as host"
		},
		err_request_already_there_role_asker: {
			"fr": "que participant",
			"en": "as participant"
		},
		err_request_already_there_me: {
			"fr": "Tu es",
			"en": "You are"
		},
		err_request_already_there_other: {
			"fr": "%s est",
			"en": "%s is"
		},
		err_unknown: {
			"fr": "Une erreur inconnue s'est produite",
			"en": "An unknown error has occured"
		},
		err_request_name_bad_length: {
			"fr": "Le nom doit avoir entre %min et %max caractères",
			"en": "The name must be composed of a minimum of %min and a maximum of %max characters"
		},
		err_request_message_bad_length: {
			"fr": "Le message doit avoir entre %min et %max caractères",
			"en": "The message must be composed of a minimum of %min and a maximun of %max characters"
		},
		err_request_n_group: {
			"fr": "Votre groupe doit avoir entre %min et %max personnes",
			"en": "Your group must have between %min and %max people"
		},
		err_request_ghost_members: {
			"fr": "Des membres ne sont pas encore inscrits sur Meefore",
			"en": "Some members have not signed up to Meefore yet"
		},
		err_request_event_not_open: {
			"fr": "Les organisateurs ont suspendu momentanément le meefore",
			"en": "The hosts have suspended the meefore at the moment"
		},
		err_chat_send_message: {
			"fr": "Une erreur inconnue s'est produite suite à l'envoie du message",
			"en": "An unknown error has occured when sending the message"
		},
		err_chat_fetch_unauth_group: {
			"fr": "Tu n'es pas autorisé à participer à cette discussion!",
			"en": "You are not authorized to take part in this discussion"
		},
		err_chat_fetch_unauth_fetch: {
			"fr": "Tu n'es pas autorisé à demander les messages de cette discussion",
			"en": "You are not authorized to request this discussion's messages"
		},
		err_chat_fetch_unauth_admin: {
			"fr": "Vous n'êtes pas autorisé à participer à cette discussion! (admin)",
			"en": "You are not authorized to take part in this discussion"
		},
		err_chat_mp: {
			"fr": "Il manque un paramètre pour envoyer le message",
			"en": "A parameter is missing to send the message"
		},
		err_chat_readby: {
			"fr": "Une erreur inconnue s'est produite à la lecture du message",
			"en": "An unknown error has occured when reading the message"
		},
		err_pusher_unauth: {
			"fr": "",
			"en": "Cannot join the channel (access denied, auth failed)"
		},
		err_settings_invalid_email: {
			"fr": "Nous avons besoin d'un email de contact valide pour changer vos préférences",
			"en": "We need a valid contact email to change your preferences"
		},
		lp_subtitle: {
			"fr": "<div class='lp-subpart'>Faîtes des rencontres <div class='lp-avant'><span>avant</span><img src='/img/app/avant.png' width='110%' /></div> d'aller en soirée.   " ,
				   // + "<div class='lp-subpart'>Rencontrez les <span>avant</span> d'aller en soirée.</div>",
			"en": "<div class='lp-subpart'>Meet up with people <div class='lp-avant'><span>before</span><img src='/img/app/avant.png' width='110%' /></div> going out. </div>"
		},
		lp_conn_button: {
			"fr": "Connexion",
			"en": "Connection"
		},
		lp_key_title: {
			"fr": "Trois étapes pour des soirées mémorables.",
			"en": "Three steps towards unforgettable nights."
		},
		lp_key_friends_title: {
			"fr":"Choisissez votre soirée",
			"en": "Pick a party"
		},
		lp_key_people_title: {
			"fr": "Trouvez votre before",
			"en": "Join a pregame party"
		},
		lp_key_party_title: {
			"fr": "Just Have Fun",
			"en": "Just Have Fun"
		},
		lp_key_friends_text: {
			"fr": "Rendez-vous sur la carte meefore pour voir toutes les soirées prévues. Finis les recherches interminables"
				  + " et les plans bidons.",
			"en": "Check the meefore map to find out all the scheduled parties. No more endless searches and weird gigs."
		},
		lp_key_people_text: {
			"fr": "Repérez les before qui vont à la même soirée que vous et demandez à les rejoindre. Aucun before n'est prévu pour"
				  + " votre soirée ? Proposez le vôtre!",
			"en": "Spot the pregame parties going to the same party as yours and send a participation request. No pregame party scheduled yet? "
				  + "Create yours!"
		},
		lp_key_party_text: {
			"fr": "Rejoignez le groupe qui vous a le plus ambiancé avec vos amis et... <span>passez une bonne soirée.</span>",
			"en": "Join the group that matched the most your expectations and... <span>enjoy your night.</span>"
		},
		lp_map_button: {
			"fr": "Voir les <span>before</span> meefore",
			"en": "Find your meefore now"
		},
		lp_footer_followus: {
			"fr": "Nous suivre",
			"en": "Follow us"
		},
		lp_contact_title: {
			"fr": "Contactez-nous",
			"en": "Contact us"
		},
		lp_contact_name: {
			"fr": "Nom*",
			"en": "Name*"
		},
		lp_contact_email: {
			"fr": "Email*",
			"en": "Email*"
		},
		lp_contact_message: {
			"fr": "Message*",
			"en": "Message*"
		},
		lp_contact_send_success: {
			"fr": "Votre message a bien été envoyé <br> Merci !",
			"en": "Your message has been sent <br> Thank you !"
		},
		lp_contact_error_fields: {
			"fr": "Il manque certains champs",
			"en": "Some fields are missing"
		},
		lp_contact_error_email: {
			"fr": "L'adresse email indiquée semble avoir une petite erreur",
			"en": "Your email address doesn't look like one "
		},
		lp_contact_error_generic: {
			"fr": "Une erreur s'est produite. Contactez-nous directement à contact@meefore.com",
			"en": "Something wrong happened. Mail us directly at contact@meefore.com"
		},
		lp_loading_party: {
			"fr": "Chargement des prochaines soirées...",
			"en": "Loading next parties..."
		}

	});



	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		isEmail: function( email ){

			return /^.+@.+\..+$/.test( email ) 

		},
		adjustInputWidth: function( input, width ){

			var $input = $(input);

			$input.css({ width: width+'px' });

		},
		fetchMe: function(){

			LJ.fn.api('get','me', { 
				//no data
			}, function( err, me ){

				if( err )
					return console.error('Couldnt refresh profile state : ' + err );

				LJ.user = me;

			});

		},
		adjustChatPaneById: function( options ){

			var options = options || {};
			var jsp_chat = LJ.jsp_api[ options.event_id ].chats[ options.chat_id ];
			var jsp_users = LJ.jsp_api[ options.event_id ].users;

			setTimeout(function(){
					
				if( !jsp_chat || !jsp_users ){
					console.warn('Couldnt find jsp api');
					return
				}

				// Reinitialize users panel
				jsp_users.reinitialise();

				if( options.stick_to_content ){

					console.log('Sticking to content');
					jsp_chat.reinitialise();
					var $elem = $('.jsp-glue').first();
					jsp_chat.scrollToElement( $elem, true );
					jsp_chat.scrollToY( jsp_chat.getContentPositionY() + 5 ); // perfectionnist 
					$elem.removeClass('jsp-glue');
					return;

				}

				// If user is almost at the bottom of chat or is at the very top
				if( jsp_chat.getPercentScrolledY() > 0.75 || jsp_chat.getPercentScrolledY() == 0 ){

					console.log('Scrolling to bottom');
					jsp_chat.reinitialise();
					jsp_chat.scrollToBottom();
					return;
					
				} 

				console.log('Staying where we are');
				// Default, renitialise without scrollingToBottom
				// For prevent users browsing history to be disturbed by auto scroll to bottom
				jsp_chat.reinitialise();
			

			}, 50 );

		},
		adjustAllChatPanes: function( options ){

			var options = options || {};

			setTimeout(function(){

				_.keys( LJ.jsp_api ).forEach(function( event_id ){

					// Always scroll users to the top, to show admins first
					var jsp_event = LJ.jsp_api[ event_id ];

					jsp_event.users.reinitialise();
					//jsp_event.users.scrollToTop();

					_.keys( jsp_event.chats ).forEach(function( chat_id ){

						var jsp = LJ.jsp_api[ event_id ].chats[ chat_id ];
							
						if( !jsp )
							return

						if( options.stick_to_content ){

							console.log('Sticking to content');
							jsp.reinitialise();
							var $elem = $('.jsp-glue').first();
							jsp.scrollToElement( $elem, true );
							jsp.scrollToY( jsp.getContentPositionY() + 5 ); // perfectionnist 
							$elem.removeClass('jsp-glue');
							return;

						}

						// If user is almost at the bottom of chat or is at the very top
						if( jsp.getPercentScrolledY() > 0.75 || jsp.getPercentScrolledY() == 0	){

							console.log('Scrolling to bottom');
							jsp.reinitialise();
							jsp.scrollToBottom();
							return;
							
						} 

						console.log('Staying where we are');
						// Default, renitialise without scrollingToBottom
						// For prevent users browing history to be distrubed by auto scroll to bottom
						jsp.reinitialise();
					

					});
				});

			}, 50 );

		},
		adjustAllInputsWidth: function( container ){

			var $container = $(container);
			var ui_offset = 20;

			// Find largest label
			var labels = $container.find('label');
			var labels_array = [];
			labels.each( function( i, el ){
				labels_array.push({
					$label      : $(el),
					outer_width : $(el).outerWidth(true),
					width       : $(el).width()
				});
			});

			var largest_label = _.max( labels_array, function( itm ){
				return itm.width;
			});

			$container.find('label').each( function( i, label ){

				console.log('Largest label is : ' + largest_label.width );
				var $label = $(label);
				var $inp   = $label.siblings('*:not( .etiquette, [type="number"], .item)');

				if( $label.hasClass('adjusted-once') ){
					return;
				}

				$label.addClass('adjusted-once');

				var parent_width = $label.parent().width(); // width which children are positionned in

				$label.css({ width: largest_label.width + ui_offset }); 
				$inp.css({ width: parent_width - largest_label.outer_width - ui_offset }); /* Mega hack needed cause of display:inline-block added whitespace */
				$inp.children('input').css({ width:'100%' });
			});
			
		},
		shortenString: function( options ){ //useless

			var options = options || {};

			if( !options.str && typeof( options.str ) != 'string' )
				return console.log('Invalid input for shorten string fn');

			var str      = options.str,
				end_tpl  = options.end_tpl || '';
				max_char = options.max_char || 5;

			return str.substr( 0, max_char ) + end_tpl;
		},
		removeItemToInput: function( item ){

			var $self = $( item );
			var $input  = $self.siblings('input');

			$input.css({ width: $input.outerWidth() + $self.outerWidth(true) });

			var $sug = $self.parents('.row-input').find('.search-results-autocomplete');
			if( $sug.length != 0 ){
				delog('Sug found');
				var current_offset = parseInt( $sug.css('left').split('px')[0] );
				$sug.css({ left: current_offset + $self.outerWidth(true) });
			}

			$self.remove();
			

		},
		addItemToInput: function( options ){

			var options = options || {};

			if( !options.html || typeof( options.html ) != 'string' )
				return console.log('Invalid html for prepend item fn');

			var $input = $( options.inp );
			var $html = $( options.html );

			if( options.typeahead ){
				$input = $input.parents('.twitter-typeahead');
			}

			$html.hide().insertBefore( $input );
			options.class_names && $html.addClass( options.class_names );

			var item_id = $html.attr('data-id');
			if( $('.rem-click[data-id="' + item_id + '"]').length > 1 ){
				//console.log('Removing due to same id');
				return $html.remove();
			}

			if( $html.siblings('.rem-click').length > options.max - 1){
				//console.log('Removing due to overflow');
				return $html.remove();
			}

			$input.css({ width: $input.outerWidth() - $html.outerWidth(true) });
			$html.show();

			/* If there are images to render, little smooth ux */
			if( $html.find('img').length != 0 ){
				$html.waitForImages(function(){
					$html.find('.friend-img').show()
					.end().find('.friend-loader').remove();
				});
			}

			/* Pour que les suggestions ne se décallent pas vers la droite */
			if( options.suggestions ){
				var $sug = $( options.suggestions );
				var current_offset = parseInt( $sug.css('left').split('px')[0] );
				$sug.css({ left: current_offset - $html.outerWidth(true) });
			}
		},
		findPlaceAttributes: function( place ){

			console.log(place);

			if( !place.address_components ){
				return console.warn('Couldnt find address_components');	
			} 

			var compo = place.address_components,
                locality = '',
                place_name = '';

                compo.forEach(function( el ){

                	if( !el.types ) return;

                    if( el.types.indexOf('neighborhood') != -1 )
                        place_name = el.long_name;

                    if( place.formatted_address )
                    	place_name = place.formatted_address.split(',')[0];

                    if( el.types.indexOf('route') != -1 )
                        place_name = el.long_name;

                    if( el.types.indexOf('locality') != -1 )
                        locality = el.long_name;

                    if( place.name )
                    	place_name = place.name
                    

                });

            if( place_name === '' ){
              place_name = place.name;
            }

            if( locality === '' ){
              locality = 'Earth';
            }
				  
          return {
				place_id   : place.place_id,
				place_name : place_name,
				city       : locality,
				lat        : place.geometry.location.lat(),
				lng        : place.geometry.location.lng()
          };

		},
		addPlaceToInput: function( place, input_id ){

			if( !place.place_id ){
				return console.warn('No place_id found, cant add item');
			}

			var $input = $('#'+input_id),
				place = place;

			$input.val('');
			$input.hide();

			var $place = $input.siblings('div');
			if( $place.length != 0 ){
				$place.remove();
				$input.show();
			}

			var $html = $( LJ.fn.renderPartyPlaceInCreate( place ) );			
				$html.hide().insertBefore( $input );
				$html.show();

		},
		addDateToInput: function( date_str, input_id ){

			var $input = $('#' + input_id),
				date = moment( date_str, 'DD/MM/YY' );
			
			$input.val('');
			
			if( $('.date').length != 0 ){
				LJ.fn.removeDateToInput();
			} 

			var msg = date.day() == moment().day() ? "Tout à l'heure !" : "Une belle journée ";
			$input.attr('placeholder', msg );
			
			var $html = $( LJ.fn.renderDateInCreate( date_str ) );
				$html.hide().insertBefore( $input );
				$input.css({ width: $input.outerWidth() - $html.outerWidth(true) });
				$html.show();

			LJ.pikaday.hide();

		},
		addHourToInput: function( hour, min ){

			var $input = $('#cr-hour');
			var msg    = 'Une belle heure';

			$input.val('');

			if( $('.hour').length != 0 ){
				LJ.fn.removeHourToInput();
			}

			var h = parseInt( hour );
			if( h == 18 ){
				msg = 'Afterwork!';
			}
			if( h == 19 ){
				msg = 'Apéro';
			}
			if( h == 21 ){
				msg = 'Before time';
			}
			if( h == 23 ){
				msg = 'Ambiance...';
			}

			$input.attr('placeholder', msg);

			var $html = $( LJ.fn.renderHourInCreate( hour, min ) );
				$html.hide().insertBefore( $input );
				$input.css({ width: $input.outerWidth() - $html.outerWidth(true) });
				$html.show();

		},
		hashtagify: function( str ){
			
			var hashtag_parts = [];
				str.toLowerCase().trim().split(/[\s_-]/).forEach(function( el, i ){
					if( i == 0 ){
						hashtag_parts.push( el );
					} else {
						if( el != '') {
							var elm = el[0].toUpperCase() + el.substring(1);
							hashtag_parts.push( elm );
						}
					}
				});
				return hashtag_parts.join('');

		},
		findMainImage: function( user ){

			var user = user || LJ.user ;
			
			if( user.main_picture ){
				return user.main_picture
			};
			
			
			var index = _.findIndex( user.pictures, function( el ){
				return el.is_main == ( true || "true" );
			});

			return user.pictures[ index ];

		},
		removeDateToInput: function( str ){

			var $input = $('#cr-date'),
				$date  = $('.date');

			$input.css({ width: $input.outerWidth() + $date.outerWidth(true) })
			$('.date').remove();
			str && $input.val('').attr('placeholder', str);

		},
		removeHourToInput: function(){

			var $input = $('#cr-hour'),
				$hour  = $('.hour');

			$input.css({ width: $input.outerWidth() + $hour.outerWidth(true) })
			$('.hour').remove();
			$('.hp-main').show();

		},
		swapNodes: function( a, b ){

		    var aparent = a.parentNode;
		    var asibling = a.nextSibling === b ? a : a.nextSibling;
		    b.parentNode.insertBefore(a, b);
		    aparent.insertBefore(b, asibling);

		},
		randomInt: function(low, high) {
    		return Math.floor(Math.random() * (high - low + 1) + low);
		},
        say: function( eventName, data, options, cb ){

        	var url = '/' + eventName;

        	if( typeof options.success == 'function' )
        		cb = options;

        	$.ajax({
        		method:'POST',
        		url:url,
        		dataType:'json',
        		data: data,
        		beforeSend: function( req ){

        			if( options.no_header ){
        				return
        			} else {
						req.setRequestHeader('x-access-token', LJ.accessToken );
        			}

        		},
        		success: function( data ){
        			if( typeof( cb.success ) == 'function' ) cb.success( data );
        		},
        		error: function( data ){
        			if( typeof( cb.error ) == 'function' ) return cb.error( data );
        			/* Default response to any HTTP error */
        			LJ.fn.handleServerError( JSON.parse( data.responseText ).msg );
        		}
        	});


        },
        handleSuccessDefault: function( data ){
        	delog('Success!');
        },
        handleErrorDefault: function( data ){
        	delog('Error!');
        },
        GraphAPI: function( url, callback, opts ){

			var ls = window.localStorage;

			var access_token = ( LJ.user.facebook_access_token && LJ.user.facebook_access_token.long_lived ) 
							|| ( ls.preferences && JSON.parse( ls.preferences ).long_lived_tk );
			FB.api( url, { access_token: access_token }, callback );

		},
		iHost: function( hosts_facebook_id ){

			if( !hosts_facebook_id ){
				return console.error('Cant host an event that doesnt exist!');
			}

			return hosts_facebook_id.indexOf( LJ.user.facebook_id ) != -1 ;

		},
		iGroup: function( members_facebook_id ){

			if( !members_facebook_id ){
				return console.error('Cant belong to a group that doesnt exist!');
			}

			return members_facebook_id.indexOf( LJ.user.facebook_id ) != -1;
		},
		iStatus: function( event_id ){

			var evt = _.find( LJ.cache.events, function( evt ){
				return evt._id == event_id;
			});

			if( !evt ){
				return console.warn('Couldnt find event in cache with id : ' + event_id );
			}

			var status = null;
			evt.groups.forEach(function( group ){

				if( LJ.fn.iGroup( group.members_facebook_id ) ){
					status = group.status;
				}

			});

			if( LJ.fn.iHost( _.pluck( evt.hosts, 'facebook_id') )){
				status = 'hosting';
			}

			return status

		},
		api: function( method, url, options, callback ){

			if( !callback && typeof(options) == 'function' ){
				callback = options;
				options = {};
			};

			var call_started = new Date();

			var data = _.merge( options.data || {}, { 
				socket_id   : LJ.pusher.connection.socket_id,
				facebook_id : LJ.user.facebook_id,
				token       : LJ.accessToken
			});
			
			$.ajax({
				method: method,
				url: '/api/v' + LJ.settings.api_version + '/' + url,
				data: data,
				beforeSend: function( req ){
					req.setRequestHeader('x-access-token', LJ.accessToken );
        		},
				success: function( data ){
					setTimeout(function(){
						callback( null, data );
					}, LJ.ui.minimum_loading_time*2 - ( new Date() - call_started ) );
				},
				error: function( xhr ){
					setTimeout(function(){
						callback( xhr, null );
					}, LJ.ui.minimum_loading_time*2 - ( new Date() - call_started ) );
				},
				complete: function(){
					setTimeout(function(){
						LJ.fn.defaultApiCompleteCallback();
					}, LJ.ui.minimum_loading_time*2 - ( new Date() - call_started ) );
				}
			})

		},
		getToken: function(){
			return LJ.accessToken;
		},
		defaultApiCompleteCallback: function(){

			// console.log('api call completed');
		},
		handleServerSuccess: function( msg, selector ){

        	setTimeout( function(){ 

		        if( msg ){
		        	LJ.fn.toastMsg( msg, 'info');
		        }

		        var $container = $(selector);
		        $container.find('.selected').removeClass('selected')
				$container.find('.modified').removeClass('modified').addClass('selected')
				$container.find('.validating').removeClass('validating')
				$container.find('.validating-btn').removeClass('validating-btn')
				$container.find('.asking').removeClass('asking')
				$container.find('.pending').removeClass('pending');

        	}, LJ.ui.artificialDelay );

        },
        handleServerError: function( msg, ms ){

        	if( typeof(msg) != 'string' ){
        		msg = JSON.parse( msg.responseText ).msg;
        	}

        	if( typeof(msg) != 'string' ){
        		return LJ.fn.toastMsg('Erreur interne','error');
        	}

        	var ms = ms || 500;
        	setTimeout( function(){ 
        	
	        	LJ.fn.toastMsg( msg, 'error');
				$('.validating').removeClass('validating');
				$('.btn-validating').removeClass('btn-validating');
				$('.asking').removeClass('asking');
				$('.pending').removeClass('pending');

			}, ms );

        },
        makeGroupId: function( group_ids ){

        	if( !Array.isArray( group_ids ) || group_ids.length < 2 )
        		return console.error('Cant make group id, not proper array &| length ');
        	
        	return group_ids.sort(function( e1, e2 ){ return parseInt(e1) - parseInt(e2) }).join('.');

        },
        makeChatId: function( options ){
        	
        	var event_id = options.event_id;
        	var group_id = options.group_id;

        	if( !event_id || !group_id ){
        		console.log(event_id); console.log(group_id);
        		return console.error('Cant make chat id, missing parameter ')
        	}

        	return event_id + '-' + group_id;
        },
        getGroupById: function( evt, group_id ){

        	return  _.find( evt.groups, function( group ){ return group.group_id == group_id; });

        },
        findMyGroupIdFromDom: function( child ){

        var group_id = $( child ).parents('.row-events-accepted-inview')
					     .find('.event-accepted-user[data-userid="'+LJ.user.facebook_id+'"]')
					     .parents('.event-accepted-users-group').attr('data-groupid');

		return group_id;


        },
        findMyGroupIdFromEvent: function( evt ){

        	var group_id = null;

        	evt.groups.forEach(function( group ){

        		if( group.members_facebook_id.indexOf( LJ.user.facebook_id ) != -1 )
        			group_id = group.group_id;

        	});

        	return group_id;

        },
        filterUser: function( user ){
        	return _.pick( user, 
        		[
        			'facebook_id',
					'facebook_url', 
					'signup_date', 
					'age', 
					'gender', 
					'job', 
					'name', 
					'drink', 
					'mood', 
					'pictures'
        		]);
        },
        roughSizeOfObject: function( object ) {

		    var objectList = [];
		    var stack = [ object ];
		    var bytes = 0;

		    while ( stack.length ) {
		        var value = stack.pop();

		        if ( typeof value === 'boolean' ) {
		            bytes += 4;
		        }
		        else if ( typeof value === 'string' ) {
		            bytes += value.length * 2;
		        }
		        else if ( typeof value === 'number' ) {
		            bytes += 8;
		        }
		        else if
		        (
		            typeof value === 'object'
		            && objectList.indexOf( value ) === -1
		        )
		        {
		            objectList.push( value );

		            for( var i in value ) {
		                stack.push( value[ i ] );
		            }
		        }
		    }
		    return bytes;
		},
		countUnreadMessages: function(){

			var messages = [];
			$('.row-events-accepted-inview .bubble').each(function( i, bubble ){
				messages.push( parseInt(  $(bubble).text() || 0 ) );
			});

			var n = 0;
			messages.forEach(function( n_count ){
				n += n_count;
			});

			return n

		},
		updateEventCache: function( new_event ){

			var cached_event =_.find( LJ.cache.events, function( evt ){
				return ( evt._id === new_event._id || evt._id == new_event.event_id );
			});

			if( !cached_event ){
				console.log('Adding event in cache since not found');
				return LJ.cache.events.push( new_event );
			} else {
				// console.log('Event found in cache, updating it');
				cached_event = _.merge( cached_event, new_event );
			}


		},
		formatRequestInInputs: function(){

			var $input = $('.row-requestin-group-name').find('input');
            var $item  = $('.row-requestin-group-name').find('.item');
            if( $input.val().trim().length != 0 ){
                $item.remove();
                LJ.fn.addItemToInput({ 
                    html: LJ.fn.renderItemInInput_GroupName( $input.val() ),
                    inp: '#ri-groupname',
                    max: 1
                });
                $input.val('');
            }

            var $input = $('.row-requestin-group-message').find('input');
            var $item  = $('.row-requestin-group-message').find('.item');
            if( $input.val().trim().length != 0 ){
                $item.remove();
                LJ.fn.addItemToInput({ 
                    html: LJ.fn.renderItemInInput_GroupMessage( $input.val() ),
                    inp: '#ri-groupmessage',
                    max: LJ.settings.app.max_ambiance
                });
                $input.val('');
            }

		},
		formatCreateEventInputs: function(){

			// Ambiance hashtags
			// var $input = $('.row-create-ambiance').find('input');
   //          var $item  = $('.row-create-ambiance').find('.item');

   //          if( $input.val().trim().length == 0 ) return;

   //              LJ.fn.addItemToInput({ 
   //                  html: LJ.fn.renderAmbianceInCreate( $input.val() ),
   //                  inp: '#cr-ambiance',
   //                  max: 5
   //              });
   //              $input.val('');

		},
		adjustAllTabviews: function(){

			var elements_width = 0;
			var $tabviews = $('.row-events-accepted-tabview');
			var n_tabviews = $('.event-accepted-tabview').length;
			var fix_width  = 23;
			var max_width = $tabviews.width() - n_tabviews * fix_width;
			var new_width = parseInt( max_width / n_tabviews ) > 200 ? 200 : parseInt( max_width / n_tabviews );
			
			$('.event-accepted-tabview').css({
				width: new_width
			});

			$('.tabview-date-day, .tabview-place').css({
				left: '-' + n_tabviews + 'px'
			});

			$tabviews
				.children().each(function( i, el ){
					$( el ).css({
						'z-index': 999 - i
					});
				});
		},
		selectFirstResult: function( $pac, callback ){

		    var first_result = $pac.find('.pac-item:first').text();

		    var geocoder = new google.maps.Geocoder();
		    geocoder.geocode({ "address": first_result }, function( results, status ){
		        if( status == google.maps.GeocoderStatus.OK ){
		        	return callback( null, results[0] );
		        } else {
		        	return callback( "Error calling the geocode api" );
		        }
		    });   

		},
		getEvent: function( event_id ){

			var evt = _.find( LJ.cache.events, function( el ){
                 return el._id == event_id 
             });

            if( !evt ){
                return console.warn('Couldnt find event...')
            } else {
                return evt;
            }
            
		},
		isElementInViewport: function(el) {

            var rect = el[0].getBoundingClientRect();
            return ( rect.top >= 0 && rect.left >= 0 && rect.bottom <=  $(window).height() && rect.right <= $(window).width() );
    	}


	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		renderMoodInProfile: function( mood_array ){

          var html = '';
            mood_array.forEach(function( mood ){
              html += '<div class="row-select mood" data-selectid="' + mood.id + '">'
                        + '<i class="icon icon-mood icon-' + mood.id +'"></i>'
                        + '<span data-lid="p_lifestyle_' + mood.id + '">' + mood.display + '</span>'
                      +'</div>'
            });
          return html;

        },
        renderDrinkInProfile: function( drink_array ){

          var html = '';
            drink_array.forEach(function( drink ){
              html += '<div class="row-select drink" data-selectid="' + drink.id + '">' + drink.display + '</div>'
            });
          return html;

        },
        renderFacebookUploadedPictures: function( data ){

            var images = _.pluck( data, 'images' ),
                html = '<div class="facebook-image-item-wrap">';

                html += '<div data-lid="p_facebook_upload_title" class="modal-title modal-title-facebook">Vos photos de profil</div>'
            images.forEach(function( img ){

              var url = '';
              img.forEach(function( itm ){

                console.log(itm);
                if( itm.width > 250 && itm.width < 450 || itm.height > 250 && itm.height < 450){
                  url = itm.source
                }

              });

                var $img = $('<img class="super-centered fb" src="' + url + '">');                
                var html_img = '<div class="facebook-image-item none">'
                                + '<div class="facebook-image-wrap">' + $img.prop('outerHTML') + '</div>'
                             + '</div>';

                html += html_img;

            });
                html += ['<div class="upload-buttons">',
                          '<button class="theme-btn btn-validate btn-validating">Valider</button>',
                          '<button class="theme-btn btn-cancel">Annuler</button>',
                        '</div>'].join('');

                html += '</div>';

            html = $(html);
            LJ.fn.setAppLanguage( LJ.app_language, html );
            return html.prop('outerHTML');
            
        },
        renderFriendInProfile: function( friend ){

            var img_id = LJ.fn.findMainImage( friend ).img_id,
                img_version = LJ.fn.findMainImage( friend ).img_version,
                display_options = LJ.cloudinary.profile.friends.params;

            display_options.version = img_version;

            var image_tag = $.cloudinary.image( img_id, display_options ).prop('outerHTML');

            var html =  '<div class="row-friend-item detailable" data-id="'+friend.facebook_id+'">'
                            + '<div class="row-friend-img">'+ image_tag +'</div>'
                            + '<div class="row-friend-name">' + friend.name + '</div>'
                            + '<div class="row-friend-action"></div>' 
                        + '</div>'

            return html;
        },
        renderProfilePicturesWraps: function(){

            var pictures = LJ.user.pictures;
            var html = '';

            for( var i = 0; i < pictures.length; i++)
            {
                var main = '';
                if( pictures[i].is_main ){
                    var main = " main-picture";
                }

                html += '<div class="picture unselectable' + main + '" data-img_version="' + pictures[i].img_version + '" data-img_place="' + i + '">'
                        +'<div class="picture-hashtag"><span>#</span><input readonly type="text" placeholder="classic"></input></div>'
                        +'<div class="picture-edit">'
                          +'<i class="icon icon-main icon-user-1"></i>'
                          +'<i class="icon icon-delete icon-trash-empty"></i>'
                        +'</div>'
                        +'<div class="picture-upload none">'
                         +'<div class="upload-desktop">'
                          +'<form class="upload_form"></form>'
                          +'<i class="icon icon-upload-desktop icon-desktop"></i>'
                         +'</div>'
                         +'<div class="upload-facebook">'
                          +'<i class="icon icon-upload-facebook icon-facebook"></i>'
                         +'</div>'
                        +'</div>'
                        +'</div>';
            }

            return html;
        },
        renderDeleteProfile: function(){

          var html = [
                '<div class="delete-profile-wrap">',
                    '<div data-lid="s_delete_title" class="modal-title">Supprimer mon profile</div>',
                    '<div data-lid="s_delete_text" class="delete-profile-text">Toutes les données vous concernant seront supprimées</div>',
                    '<div class="delete-profile-buttons">',
                      '<button data-lid="s_delete_validate" class="theme-btn btn-validate btn-validate-modal">Supprimer</button>',
                      '<button data-lid="s_delete_cancel" class="theme-btn btn-cancel">Annuler</button>', 
                    '</div>',
                '</div>',
            ].join('');

          html = $(html)
          LJ.fn.setAppLanguage( LJ.app_language, html );
          return html.prop('outerHTML');

        },
        renderGoodbye: function(){

          var html = [
            '<div class="super-centered">',
              '<div data-lid="s_delete_goodbye" class="goodbye none">',
                  'Votre compte a bien été supprimé',
              '</div>',
            '</div>'
          ].join('');

          html = $(html);
          LJ.fn.setAppLanguage( LJ.app_language, html );
          return html.prop('outerHTML');

        }
        

	});

		window.LJ.fn = _.merge( window.LJ.fn || {}, {

			renderContactForm: function(){

				var html = [

					'<div class="landing-contact">',
						'<div data-lid="lp_contact_title" class="contact-title">Contactez-nous</div>',
						'<form>',
							'<div class="contact-row contact-error none"></div>',
							'<div class="contact-row">',
								'<label data-lid="lp_contact_name" for="contact-name">Nom*</label>',
								'<input id="contact-name" type="text" placeholder="Ben"/>',
							'</div>',
							'<div class="contact-row">',
								'<label data-lid="lp_contact_email" for="contact-email">Email*</label>',
								'<input id="contact-email" type="text" placeholder="ben@party.com"/>',
							'</div>',
							'<div class="contact-row">',
								'<label data-lid="lp_contact_message" for="contact-message">Message*</label>',
								'<textarea id="contact-message" placeholder="Hey " rows="8" cols="50" ></textarea>',
							'</div>',
						'</form>',
						'<div class="contact-buttons">',
							'<button data-lid="p_button_validate" class="theme-btn btn-validate">Envoyer</button>',
							'<button data-lid="p_button_cancel" class="theme-btn btn-cancel">Annuler</button>',
						'</div>',
					'</div>'

				].join('');

				var $html = $( html );
				LJ.fn.setAppLanguage( LJ.app_language, $html );

				return $html.prop('outerHTML');

			}

		});


	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		renderUserProfileInCurtain: function( user ){

            /* Photos de thumbs */
            var user_main_pictures = '';
            var user_thumb_pictures = '';
            var user_picture_hashtags = '';

            user.pictures.forEach( function( itm ){

                var main_type      = itm.is_main ? 'main_active'  : 'main'  ;
                var thumb_type     = itm.is_main ? 'thumb_active' : 'thumb' ;
                var hashtag_active = itm.is_main ? 'active'       : '' ;

                var display_params_main             = LJ.cloudinary.curtain[ main_type ].params;
                    display_params_main.version = itm.img_version;

                var display_params_thumb             = LJ.cloudinary.curtain[ thumb_type ].params;
                    display_params_thumb.version = itm.img_version;
                    display_params_thumb.width       = LJ.cloudinary.curtain.main.params.width / 5;
                    display_params_thumb.height      = display_params_thumb.width;

                var user_picture_thumb   = $.cloudinary.image( itm.img_id, display_params_thumb ).attr('img-place', itm.img_place).attr('img-version', itm.img_version ).prop('outerHTML'),
                    user_picture_main    = $.cloudinary.image( itm.img_id, display_params_main ).attr('img-version', itm.img_version ).prop('outerHTML'),
                    user_picture_hashtag = '<div class="modal-user-picture-hashtag '+ hashtag_active+'" img-place="' + itm.img_place + '">#' + itm.hashtag + '</div>';

                user_thumb_pictures += user_picture_thumb;
                user_main_pictures  += user_picture_main;
                user_picture_hashtags += user_picture_hashtag;
            });

            /* Rendu des images */    
            var images_html = '<div class="modal-user-pictures">'
                                + '<div class="modal-user-main-picture">'
                                    + user_main_pictures
                                    + user_picture_hashtags
                                + '</div>'
                                + '<div class="modal-user-other-pictures">' + user_thumb_pictures + '</div>'
                            + '</div>'

            /* Rendu des informations */
            var description_html = '<div class="modal-user-description">'
                                + '<div class="modal-user-description-head">'
                                    + '<div class="modal-user-name">' + user.name + '</div>'
                                    + '<div class="modal-user-membersince">Membre depuis le ' + moment(user.signup_date).format('DD/MM/YYYY') + '</div>'
                                    + '<div class="modal-user-age">' + user.age +'</div>'
                                    //+ '<div class="modal-user-mood">#'  + LJ.fn.hashtagify( user.mood ) + '</div>'
                                    //+ '<div class="modal-user-drink">#' + LJ.fn.hashtagify( user.drink )+ '</div>'
                                    //+ '<div class="modal-user-job">#'   + LJ.fn.hashtagify( user.job ) + '</div>'
                                + '</div>'
                                + '<div class="modal-user-description-body">'
                                + '</div>'


            var html = '<div class="modal-user-content">' + images_html + description_html + '</div>';

            return html;
        },
        renderUserProfileInCurtainNone: function(){

             var html = '<h2 class="super-centered">.../</h2>';
             html = $(html);
             LJ.fn.setAppLanguage( LJ.text_source["err_no_user_entry"][ LJ.app_language ] );

             return html.prop('outerHTML');

        }
		
	});	

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		renderCreateEvent: function( options ){

          var options = options || {};
          
          var agerange = options.agerange,
              mixity   = options.mixity;

            var agerange_html = '',
                mixity_html   = '';

            /*    agerange.forEach(function(agerange,i){
                  var selected = '';
                  if( i == 0 ){
                    var selected = 'selected';
                  }
                  agerange_html += '<div class="row-select agerange ' + selected + '" data-selectid="' + agerange.id + ' ">'
                                      +'<i class="icon icon-agerange icon-' + agerange.icon_code + '"></i>'
                                      + agerange.display
                                    +'</div>';
                });
*/
                // mixity.forEach(function(mixity,i){
                //   var selected = '';
                //   if( i == 0 ){
                //     var selected = 'selected';
                //   }
                //   mixity_html += '<div class="row-select mixity ' + selected + '" data-selectid="' + mixity.id + ' ">'
                //                       +'<i class="icon icon-mixity icon-' + mixity.icon_code + '"></i>'
                //                       + mixity.display
                //                     +'</div>';
                //   });

              var html = '<div id="createEvent" class="">'
        
                        +'<div class="row-input row-input-lg">'
                         +'<div data-lid="e_create_title" class="modal-title">Proposer un meefore</div>'
                        +'</div>'

                        +'<div class="row-input row-input-lg etiquette row-create-friends">'
                          +'<label data-lid="e_create_hosts" class="label label-lg" for="cr-friends">Organisateurs</label>'
                          +'<input data-lid="e_create_hosts_placeholder" class="" id="cr-friends" type="text" placeholder="Sélectionne parmis tes amis ( 3 max )">'
                        +'</div>'

                        +'<div class="row-input row-input-md etiquette row-create-date">'
                          +'<label data-lid="e_create_begins_at" class="label " for="cr-date">Date du before</label>'
                          +'<input data-lid="e_create_begins_at_placeholder" class="" readonly data-select="datepicker" id="cr-date" type="text" placeholder="Quel jour?">'
                        +'</div>'

                         +'<div class="row-input row-input-md etiquette row-create-hour">'
                          +'<label data-lid="e_create_hour" class="label" for="cr-hour">Heure du before</label>'
                          +'<input data-lid="e_create_hour_placeholder" class="" readonly id="cr-hour" type="text" placeholder="Quel heure?">'
                        +'</div>'

                        +'<div class="row-input row-input-md etiquette row-create-before-place">'
                          +'<label data-lid="e_create_address" class="label" for="cr-before-place">Lieu du meefore</label>'
                          +'<input data-lid="e_create_address_placeholder" id="cr-before-place" type="text" placeholder="Quel quartier?">'
                        +'</div>'

                        +'<div class="row-input row-input-md etiquette row-create-party-place">'
                          +'<label data-lid="e_create_party" class="label label-lg" for="cr-party-place">Lieu de la soirée</label>'
                          +'<input data-lid="e_create_party_placeholder" id="cr-party-place" type="text" placeholder="Après le before, on enchaîne où ?">'
                        +'</div>'

                        // +'<div class="row-input row-input-lg etiquette row-create-ambiance">'
                        //   +'<label data-lid="e_create_ambiance" class="label label-lg" for="cr-ambiance">Ambiance</label>'
                        //   +'<input data-lid="e_create_ambiance_placeholder" class"" id="cr-ambiance" type="text" maxlength="40" placeholder="Hashtag ton before ( 5 max )">'
                        // +'</div>'

                        +'<div class="row-input row-input-lg etiquette row-create-age">'
                          +'<label data-lid="e_create_agerange" class="label label-lg" for="cr-age">Âge souhaité</label>'
                          +'<div class="row-select-wrap agerange-wrap">'
                          + '<input class="" id="cr-agerange" type="range" min="' + LJ.settings.app.agerange_min + '" max="' + LJ.settings.app.agerange_max + '">'
                          +'</div>'
                        +'</div>'

                        // +'<div class="row-input row-input-lg etiquette row-create-mixity">'
                        //   +'<label data-lid="e_create_guests_type" class="label label-lg" for="cr-mixity">Type d\'invités</label>'
                        //   +'<div class="row-select-wrap mixity-wrap">'
                        //         + mixity_html
                        //   +'</div>'
                        // +'</div>'


                        +'<div class="row-buttons visible">'
                            +'<button data-lid="e_create_button_cancel" class="theme-btn btn-large btn-cancel right">Annuler</button>'
                            +'<button data-lid="e_create_button_validate" class="theme-btn btn-large btn-validate btn-validate-modal right">Créer un before</button>'
                        +'</div>' 

                      +'</div>'

                      html = $(html);
                      LJ.fn.setAppLanguage( LJ.app_language, $(html) )

                      return html.prop('outerHTML');
        },
        renderMeInInput: function(){

          var friend = LJ.user;

          /* Rendering friend thumb image */
            var img_id  = LJ.fn.findMainImage( friend ).img_id,
            img_version = LJ.fn.findMainImage( friend ).img_version;

            var display_options         = LJ.cloudinary.create.friends.params;
            display_options.version = img_version;

            var image_tag_friend = $.cloudinary.image( img_id, display_options ).removeClass('none').prop('outerHTML');
          
            var html =  '<div class="friend me" data-id="'+friend.facebook_id+'">'
                            + image_tag_friend
                            + '<div class="friend-name">' + friend.name + '</div>'
                        +'</div>'

            return html;


        },
        renderFriendInInput: function( friend ){

            /* Rendering friend thumb image */
            var img_id  = LJ.fn.findMainImage( friend ).img_id,
            img_version = LJ.fn.findMainImage( friend ).img_version;

            var display_options         = LJ.cloudinary.create.friends.params;
            display_options.version = img_version;

            var image_tag_friend = $.cloudinary.image( img_id, display_options ).removeClass('none').prop('outerHTML');
            var image_tag_loader = LJ.$bar_loader.clone().addClass('friend-loader').prop('outerHTML');

            var html =  '<div class="rem-click friend" data-id="'+friend.facebook_id+'">'
                            + image_tag_friend
                            + image_tag_loader
                            + '<div class="friend-name">' + friend.name + '</div>'
                        +'</div>'

            return html;


        },
        renderAmbianceInCreate: function( hashtag ){

            var html =  '<div class="rem-click ambiance">'
                            + '<div class="ambiance-hashtag">#</div>'
                            + '<div class="ambiance-name">' + hashtag + '</div>'
                        +'</div>'

            return html;
        },
        renderDefaultItem: function( string ){

           var html = ['<div class="rem-click default">',
                       '<div class="default-icon">#</div>',
                       '<div class="item-name default-name">' + string + '</div>',
                        '</div>'
                      ].join('');

            return html;

        },
        renderBeforePlaceInCreate: function( place ){

            var place = LJ.fn.findPlaceAttributes( place );

            if( !place ){
              return console.warn('No place object to render');
            }

            var html = '<div class="rem-click before-place" data-placeid="' + place.place_id + '" data-place-lat="' + place.lat + '" data-place-lng="' + place.lng + '">'
                            + '<i class="icon icon-before-place icon-location"></i>'
                            + '<div class="before-place-name"><span>' + place.place_name +'</span>,<span class="locality"> ' + place.city + ' </span></div>'
                        +'</div>'

            return html;

        },
        renderPartyPlaceInCreate: function( place ){

            var place = LJ.fn.findPlaceAttributes( place );

             if( !place ){
              return console.warn('No place object to render');
            }

            var html = '<div class="rem-click party-place" data-placeid="' + place.place_id + '" data-place-lat="' + place.lat + '" data-place-lng="' + place.lng + '">'
                            + '<i class="icon icon-before-place icon-location"></i>'
                            + '<div class="party-place-name"><span>' + place.place_name +'</span>,<span class="locality"> ' + place.city + ' </span></div>'
                        +'</div>'

            return html;

        },
        renderDateInCreate: function( date ){

            var html =  '<div class="rem-click date">'
                            + '<i class="icon icon-date icon-clock"></i>'
                            + '<div class="date-name">' + date + '</div>'
                        +'</div>'

            return html;
        },
        renderHourInCreate: function( hour, min ){

            var html =  '<div class="rem-click hour hour-fix">'
                            + '<i class="icon icon-date icon-clock"></i>'
                            + '<div class="hour-name">'
                             + '<span class="date-hour">' + hour + '</span>'
                             + 'H'
                             + '<span class="date-min">' + min + '</span></div>'
                        +'</div>'

            return html;
        },
        renderHourPicker: function( opts ){

          var hour_range = opts.hour_range;
          var min_range  = opts.min_range;

          var hours_html = '<div class="hp-hour">' + LJ.fn.formatHourAndMin( opts.default_hour[0] ) + '</div>'
          var min_html   = '<div class="hp-min">' + LJ.fn.formatHourAndMin( opts.default_hour[1] ) + '</div>'

          var html = [

            '<div class="hp-main">',
              '<div class="hp-layer">',
                '<div class="hp-upndown hp-upndown-left">',
                  '<i class="hp-icon hp-icon-up icon-up-dir"></i>',
                  '<i class="hp-icon hp-icon-down icon-down-dir"></i>',
                '</div>',
                '<div class="hp-hourwrap">',
                  hours_html,
                '</div>',
                '<div class="hp-spliter">',
                  opts.spliter,
                '</div>',
                '<div class="hp-minwrap">',
                  min_html,
                '</div>',
                '<div class="hp-upndown hp-upndown-right">',
                  '<i class="hp-icon hp-icon-up icon-up-dir"></i>',
                  '<i class="hp-icon hp-icon-down icon-down-dir"></i>',
                '</div>',
              '</div>',
            '</div>'

          ].join('');

          return html;

        },
        formatHourAndMin: function( hour ){
          if( hour < 10 ){
            return '0'+hour;
          } else {
            return ''+hour;
          }
        },
        renderCreatePartyBtn: function(){

            var html = [
                '<div class="row-events-filters-group filters-create-party">',
                    '<button class="theme-btn btn-create-party right">',
                        '<span data-lid="e_create_party_button">Soirée partenaire</span>',
                    '</button>',
                '</div>'].join('');

            return html;

        },
        renderCreateParty: function( options ){

          var party_types = options.party_types;

            var party_types_html = '';
            party_types.forEach(function( type, i ){
              var selected = '';
              if( i == 0 ){
                var selected = 'selected';
              }
              party_types_html += '<div class="row-select party-type ' + selected + '" data-selectid="' + type.id + ' ">'
                                  +'<i class="icon icon-party-type icon-' + type.icon_code + '"></i>'
                                  + type.display
                                +'</div>';
              });

            var html = '<div id="createParty" class="">'
        
                +'<div class="row-input row-input-lg">'
                 +'<div class="modal-title">Proposer une soirée</div>'
                +'</div>'

                // Nom de la soirée
                +'<div class="row-input row-input-md etiquette row-create-party-name">'
                  +'<label class="label label-lg" for="cr-party-name">Nom de la soirée</label>'
                  +'<input class="" id="pa-name" type="text" placeholder="Nom de la soirée">'
                +'</div>'

                // Nom de l'organisation
                +'<div class="row-input row-input-md etiquette row-create-party-hosted-by">'
                  +'<label class="label label-lg" for="pa-hosted-by">Organisé par..</label>'
                  +'<input class="" id="pa-hosted-by" type="text" placeholder="Le Violondingue...">'
                +'</div>'

                  // Heure de début
                 +'<div class="row-input row-input-md etiquette row-create-party-hour-begin">'
                  +'<label class="label" for="pa-hour-begin">Heure de début</label>'
                  +'<input class="" id="pa-hour-begin" maxlength="5" minlength="5" type="text" placeholder="20h30">'
                +'</div>'

                // Heure de fin
                 +'<div class="row-input row-input-md etiquette row-create-party-hour-end">'
                  +'<label class="label" for="pa-hour-end">Heure de fin</label>'
                  +'<input class="" id="pa-hour-end"  maxlength="5" minlength="5" type="text" placeholder="6h00">'
                +'</div>'

                // Jour de la soirée
                +'<div class="row-input row-input-md etiquette row-create-party-date">'
                  +'<label class="label " for="pa-day">Date de la soirée</label>'
                  +'<input class="" id="pa-day"  maxlength="10" minlength="10" type="text" placeholder="24/12/2015">'
                +'</div>'

                // Nombre de personnes attendues
                +'<div class="row-input row-input-md etiquette row-create-party-attendees">'
                  +'<label class="label label-lg" for="pa-attendees">Taille de la soirée</label>'
                  +'<div class="row-select-wrap attendees-wrap">'
                  + '<input class="" id="pa-attendees" type="range">'
                  +'</div>'
                +'</div>'

                // Addresse de la soirée
                +'<div class="row-input row-input-lg etiquette row-create-party-place">'
                  +'<label class="label" for="pa-address">Lieu de la soirée</label>'
                  +'<input id="pa-address" type="text" placeholder="Quel endroit?">'
                +'</div>'

                // Lien de la photo (url)
                +'<div class="row-input row-input-lg etiquette row-create-party-picture">'
                  +'<label class="label " for="pa-picture">Photo URL</label>'
                  +'<input class="" id="pa-picture" type="text" placeholder="http://...">'
                +'</div>'

                // URL de la soirée 
                +'<div class="row-input row-input-lg etiquette row-create-party-link">'
                  +'<label class="label label-lg" for="pa-link">URL</label>'
                  +'<input class"" id="pa-link" type="text" placeholder="Lien externe ( http://... )">'
                +'</div>'


                // Type de soirée (pour la pin)
                +'<div class="row-input row-input-lg etiquette row-create-party-type">'
                  +'<label class="label label-lg" for="pa-type">Type de soirée</label>'
                  +'<div class="row-select-wrap party-type-wrap">'
                        + party_types_html
                  +'</div>'
                +'</div>'

                +'<div class="row-buttons visible">'
                    +'<button class="theme-btn btn-large btn-cancel right">Annuler</button>'
                    +'<button class="theme-btn btn-large btn-validate btn-validate-modal right">Créer une soirée</button>'
                +'</div>' 

              +'</div>'

                return html;
        }


	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, 

		{
    renderChatLine: function( options ){
      
      if( !options )
          return console.error('Cant render chatline without opts'); 

      var html        = '';
      var msg         = options.msg;
      var name        = options.name;
      var img_id      = options.img_id;
      var img_vs      = options.img_vs;
      var sent_at     = options.sent_at;
      var facebook_id = options.facebook_id;
      var me          = (facebook_id == LJ.user.facebook_id || options.force_me ) ? 'me' : '';

      var display_params = _.merge( LJ.cloudinary.events.chat.params, { version: img_vs } );
      var img_tag      = $.cloudinary.image( img_id, display_params ).prop('outerHTML');

      var mmt = moment( new Date( sent_at ) );
      var sent_at_html = mmt.dayOfYear() == moment().dayOfYear() ?
                         mmt.format('HH') + 'h' + mmt.format('mm') :
                         mmt.format('DD/MM');

      if( options.whisper_to ){
        var whisperto = 'data-whisperto="' + options.whisper_to + '"'
      }

      html  +=    '<div class="event-accepted-chat-message ' + me +'" data-authorid="' + facebook_id + '" data-authorname="' + name + '" '+ whisperto + '>'
                  + img_tag
                  + '<div class="event-accepted-chat-sent-at">' + sent_at_html + '</div>'
                  + '<div class="event-accepted-chat-text">'    + msg          + '</div>'
                + '</div>'

      return html;

    },
    renderChatLine_Bot: function( message ){
      
      if( !message )
          return console.error('Il manque le message');

      var html        = '';
      var msg         = message;
      var name        = LJ.bot_profile.name;
      var img_id      = LJ.bot_profile.img_id;
      var img_vs      = LJ.bot_profile.img_vs;
      var sent_at     = new Date()
      var facebook_id = LJ.bot_profile.facebook_id;

      var display_params = _.merge( LJ.cloudinary.events.chat.params, { version: img_vs } );
      var img_tag      = $.cloudinary.image( img_id, display_params ).prop('outerHTML');

      var mmt = moment( new Date( sent_at ) );
      var sent_at_html = mmt.dayOfYear() == moment().dayOfYear() ?
                         mmt.format('HH') + 'h' + mmt.format('mm') :
                         mmt.format('DD/MM');

      html += '<div class="event-accepted-chat-message data-authorid="' + facebook_id + '" data-authorname="' + name +'" >'
                  + img_tag
                  + '<div class="event-accepted-chat-sent-at">' + sent_at_html + '</div>'
                  + '<div class="event-accepted-chat-text">'    + msg          + '</div>'
                + '</div>';

      return html;

    },
    renderEventPreview_Default: function(){

      var html = '<div class="event-preview">'
                   + '<div data-lid="e_prevew_default_text" class="event-preview-default">Aucun meefore n\'est prévu pour cette soirée. Soyez le premier à en proposer un. </div>'
                   + '<button  data-lid="e_preview_first_to_create" class="theme-btn btn-preview btn-create-event slow-down-3">Proposer un meefore pour cette soirée</div>'
                + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      
      return html.prop('outerHTML');

    },
    renderEventPreview_User: function( evt ){

      return LJ.fn.renderEventPreview( evt, {
        request_html: '<button  data-lid="e_preview_participate" class="theme-btn btn-preview btn-requestin slow-down-3">Participer</div>'
      });

    },
    renderEventPreview_MemberAccepted: function( evt ){

      return LJ.fn.renderEventPreview( evt, {
        request_html: '<button data-lid="e_preview_chat" class="theme-btn btn-preview btn-jumpto slow-down-3">Discuter</div>'
      });

    },
    renderEventPreview_MemberPending: function( evt ){

      return LJ.fn.renderEventPreview( evt, {
        request_html: '<button data-lid="e_preview_pending" class="theme-btn btn-preview btn-jumpto slow-down-3">En attente</div>'
      });

    },
    renderEventPreview_Host: function( evt ){

      return LJ.fn.renderEventPreview( evt, {
        request_html: '<button data-lid="e_preview_manage" class="theme-btn btn-preview btn-jumpto slow-down-3">Organiser</div>'
      });

    },
    renderEventPreview: function( evt, options ){

      var options = options || {};
      var hosts_pictures_html, details_html, hosts_names = []

      /* Hosts pictures */
      hosts_pictures_html = '<div class="event-preview-hosts">';
      evt.hosts.forEach(function( host ){

        var display_params = LJ.cloudinary.events.map.hosts.params;
            display_params.version = LJ.fn.findMainImage( host ).img_version;

        var img_tag = $.cloudinary.image( LJ.fn.findMainImage( host ).img_id, display_params ).prop('outerHTML');
        
        var country = '<div class="user-flag"><span class="flag-icon flag-icon-' + host.country_code + '"></span></div>';
        hosts_pictures_html += '<div class="event-preview-host-picture" data-userid="' + host.facebook_id + '">' + img_tag + country +'</div>'

      });
      hosts_pictures_html += '</div>';

      /* Event details */
      evt.hosts.forEach(function( host, i ){
        if( i == 0 ){
          hosts_names.push( host.name );
        } else if( i == evt.hosts.length - 1 ){
          hosts_names.push( ' et ' + host.name );
        } else {
          hosts_names.push( ', ' +host.name );
        }
      });

      // var ambiance_html = '<div class="event-preview-ambiance nonei">';
      // evt.ambiance.forEach(function( hashtag ){
      //   if( hashtag == '' ) return;
      //   ambiance_html += '<span class="event-preview-ambiance-hashtag">#</span><span class="event-preview-ambiance-name">' + LJ.fn.hashtagify(hashtag) + '</span>';
      // });
      // ambiance_html += '</div>';

      var date_html = '<div class="preview-date">'
                        + '<div class="preview-date-month">' + moment.monthsShort( moment( evt.begins_at ).month() ) + '</div>'
                        + '<div class="preview-date-day">' + moment( evt.begins_at ).format('DD/MM') + '</div>'
                    + '</div>';

      /* Request html */
      var request_html = options.request_html;

      details_html = '<div class="event-preview-details">'
                      + '<span class="preview-type">Meefore</span> '
                      + '<div class="event-preview-address"><i class="icon icon-location"></i>' + evt.address.place_name + ', ' + evt.address.city_name + '</div>'
                      + '<div class="event-preview-hosts-names"><i class="icon icon-users"></i>' + hosts_names.join('')    + '</div>'
                      // + ambiance_html
                    +'</div>';

      var html = '<div class="event-preview" data-eventid="' + evt._id + '">'
                    + date_html
                    + hosts_pictures_html
                    + details_html
                    + request_html
                + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      
      return html.prop('outerHTML');

    },
    renderPartyPreview_Event: function( party, options ){

      var options = options || {}; 

      var n = 0;
      LJ.cache.events.forEach(function( evt ){
        if( evt.party.address.place_id === party.address.place_id ){
          n++;
        }
      });


       details_html = '<div class="party-preview-details">'
                      + '<div class="party-preview-icon"><i class="icon party-icon icon-glass"></i></div>'
                      + '<div class="party-preview-place-name">' + party.address.place_name + ', ' + party.address.city_name + '</div>'
                      + '<div class="party-preview-details--sub">'
                        + '<div data-lid="e_preview_planned" class="party-preview-place-type"></div>'
                      + '</div>'
                    +'</div>';

      var html = '<div class="party-preview " data-placeid="' + party.address.place_id + '">'
                  //  + hosts_pictures_html
                    + details_html
                    // + '<button class="theme-btn btn-preview btn-requestin slow-down-3">Proposer un meefore</div>'
                + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      
      return html.prop('outerHTML').replace('%n', n );

    },
    renderPartyPreview_Party: function( party, options ){

      var options = options || {}; 

      var date_html = '<div class="preview-date">'
                        + '<div class="preview-date-month">' + moment.monthsShort( moment( party.begins_at ).month() ) + '</div>'
                        + '<div class="preview-date-day">' + moment( party.begins_at ).format('DD/MM') + '</div>'
                    + '</div>';

      var party_type = party.type;

       details_html = '<div class="party-preview-details">'
                      + '<div class="party-preview-picture" style="background-image:url(' + party.picture_url + ')"></div>'
                      + '<div class="party-preview-place-name">' + party.name + ',<br> ' + party.address.place_name + '</div>'
                      + '<div class="party-preview-details--sub">'
                        + '<div class="party-preview-place-type">Organisé par  ' + party.hosted_by + '</div>'
                        + '<div class="party-preview-attendees">' + party.attendees + ' personnes attendues</div>'
                      + '</div>'
                    +'</div>';

      var html = '<div class="party-preview " data-placeid="' + party.address.place_id + '">'
                  //  + hosts_pictures_html
                    + date_html
                    + details_html
                    // + '<button class="theme-btn btn-preview btn-requestin slow-down-3">Proposer un meefore</div>'
                + '</div>';

      return html;

    },
    renderMixityInFilters: function( mixity_arr ){

      // var html = '';
      //     mixity_arr.forEach(function(mixity){
      //       if( mixity.id != 'whatever' )
      //         html += '<div class="event-filter event-mixity slow-down-3" data-selectid="' + mixity.id + '">' + mixity.display + '</div>'
      //     });
      //   return html;

    },
    renderAgerangeInFilters: function( agerange_arr ){

      var html = '';
          agerange_arr.forEach(function(agerange){
            if( agerange.id != 'whatever' )
              html += '<div class="event-filter event-agerange slow-down-3" data-selectid="' + agerange.id + '">' + agerange.display + '</div>'
          });
        return html;

    },
    renderUserImgTag: function( user, params ){

      var main_image     = LJ.fn.findMainImage( user );
      var display_params = _.merge( params, { version: main_image.img_version } );
      var img_tag        = $.cloudinary.image( main_image.img_id, display_params ).prop('outerHTML');

      return img_tag;

    },
    renderEventSettings: function( evt ){

      var settings_options = [];
      ['open','suspended', 'canceled'].forEach(function( status ){
        var active = evt.status == status ? 'active' : '';
        settings_options.push(' data-status="' + status + '" class="event-settings-group-action ' + active + '" >');
      });

      var settings_html = [
          '<div class="event-inview-settings etiquette">',
            '<div class="event-settings-group settings-group-status">',
              '<div data-lid="ch_settings_status_label" class="event-settings-group-name">Statut du meefore</div>',
              '<div' + settings_options[0] + '<i class="icon icon-toggle-on"></i><span data-lid="ch_settings_status_open">Ouvert</span></div>',
              '<div' + settings_options[1] + '<i class="icon icon-toggle-off"></i><span data-lid="ch_settings_status_suspended">Suspendu/Complet</span></div>',
              '<div' + settings_options[2] + '<i class="icon icon-trash-empty"></i><span data-lid="ch_settings_status_canceled">Annulé</span></div>',
            '</div>',
            '<div class="event-settings-group settings-group-buttons">',
              '<button data-lid="ch_button_update" class="theme-btn btn-validate">Mettre à jour</button>',
              '<button data-lid="ch_button_cancel" class="theme-btn btn-cancel">Annuler</button>',
            '</div>',
          '</div>'
      ].join('');

      return settings_html;

    },
    renderUserInGroup: function( user, img_tag ){

      var country = '<div class="user-flag"><span class="flag-icon flag-icon-' + user.country_code + '"></span></div>';

      var html =  '<div class="event-accepted-user-state offline"></div>'
                      + '<div class="event-accepted-user-picture">' + img_tag + country +'</div>'
                      + '<div class="event-accepted-user-name">'    + user.name   + '</div>'
                      + '<div class="event-accepted-user-age">'     + user.age    + ' ans</div>'

      return html;

    },
    renderHostsGroup: function( hosts ){

      var hosts_html = '<div class="event-accepted-users-group" data-status="hosts" data-groupid="hosts">'
                            + '<div data-lid="ch_hosts" class="event-accepted-group-name">Organisateurs</div>';

      hosts.forEach(function( member ){

      var img_tag = LJ.fn.renderUserImgTag( member, LJ.cloudinary.events.group.params );
      hosts_html += '<div class="event-accepted-user" data-userid="'+member.facebook_id+'">'
                        + LJ.fn.renderUserInGroup( member, img_tag )
                      + '</div>';
      });

      hosts_html += '</div>';

      hosts_html = $(hosts_html);
      LJ.fn.setAppLanguage( LJ.app_language, hosts_html );

      return hosts_html.prop('outerHTML');


    },
    renderHostsGroupWithCog: function( hosts ){

      var hosts_html = '<div class="event-accepted-users-group" data-status="hosts" data-groupid="hosts">'
                            + '<i class="icon icon-event-settings icon-cog"></i>'
                            + '<div data-lid="ch_hosts" class="event-accepted-group-name">Organisateurs</div>';

      hosts.forEach(function( member ){

      var img_tag = LJ.fn.renderUserImgTag( member, LJ.cloudinary.events.group.params );
      hosts_html += '<div class="event-accepted-user" data-userid="'+member.facebook_id+'">'
                        + LJ.fn.renderUserInGroup( member, img_tag )
                      + '</div>';
      });

      hosts_html += '</div>';

      hosts_html = $(hosts_html);
      LJ.fn.setAppLanguage( LJ.app_language, hosts_html );

      return hosts_html.prop('outerHTML');

    },
    renderUsersGroup: function( group ){

      var group_members_facebook_id =  group.members_facebook_id;

      var mygroup  = group_members_facebook_id.indexOf( LJ.user.facebook_id ) != -1 ? 'mygroup' : '';
      var group_id = LJ.fn.makeGroupId( group_members_facebook_id );

      var user_group_html = '<div class="event-accepted-users-group ' + mygroup + '" data-status="' + group.status + '" data-groupid="' + group_id + '">'
                            + '<div class="event-accepted-group-name">' + group.name + '</div>';

      group.members.forEach(function( member ){

        var img_tag = LJ.fn.renderUserImgTag( member, LJ.cloudinary.events.group.params );
        user_group_html += '<div class="event-accepted-user" data-userid="' + member.facebook_id + '">'
                          + LJ.fn.renderUserInGroup( member, img_tag )
                        + '</div>';
      });


      user_group_html += '</div>';

      return user_group_html;

    },
    renderUsersGroupWithToggle: function( group ){

     var group_id = LJ.fn.makeGroupId( _.pluck( group.members, 'facebook_id' ) );

     var toggle_mode = group.status == 'accepted' ? 'on' : 'off';

     var user_group_html = '<div class="event-accepted-users-group none" data-status="' + group.status + '" data-groupid="' + group_id + '">'
                            + '<i class="icon icon-toggle icon-toggle-' + toggle_mode + '"></i>'
                            + '<div class="event-accepted-group-name">' + group.name + '</div>';

      group.members.forEach(function( member ){

        var img_tag = LJ.fn.renderUserImgTag( member, LJ.cloudinary.events.group.params );
        user_group_html += '<div class="event-accepted-user" data-userid="' + member.facebook_id + '">'
                          + LJ.fn.renderUserInGroup( member, img_tag )
                        + '</div>';
      });


      user_group_html += '</div>';

      return user_group_html;

    },
    renderEventInview_Host: function( evt ){

      var html = '', hosts_html = '', groups_html = '', chatgroups_html = '', chat_wrap_html = '';

      var hosts_html = LJ.fn.renderHostsGroupWithCog( evt.hosts );

      /* Render all group on the left panel, filtered by click on chatgroup after */
      evt.groups.forEach(function( group ){
        groups_html += LJ.fn.renderUsersGroupWithToggle( group );
      });

      /* Render chatgroup on the top */
      chatgroups_html += LJ.fn.renderChatGroup_Host();
      evt.groups.forEach(function( group, i ){
        chatgroups_html += LJ.fn.renderChatGroup_Group( group );
      });
      /* Render a specific chat with chatid per group */
      chat_wrap_html += LJ.fn.renderChatWrap_Host_Host( evt._id );
      evt.groups.forEach(function( group, i ){
        chat_wrap_html += LJ.fn.renderChatWrap_Host_Group( evt._id, group );
      });

      html += '<div data-eventid="' + evt._id + '"class="row-events-accepted-inview" data-status="hosted">'
                + '<div class="event-accepted-inview">'
                  + '<div class="event-accepted-users">'
                    + hosts_html
                    + groups_html
                  + '</div>'
                  + '<div class="event-accepted-chat">'
                    + '<div class="event-accepted-chatgroups">'
                      + chatgroups_html
                    + '</div>'
                    + '<div class="event-accepted-chatwraps">'       
                      + chat_wrap_html
                    + '</div>'
                  + '</div>'
                  + '<div class="backtomap"><i class="icon icon-minus"></i></div>'
                + '</div>'
                + LJ.fn.renderEventSettings( evt );

            + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');

    },
    renderChatGroup_Group: function( group ){

      var html =  '<div class="event-accepted-chatgroup" data-groupid="' + LJ.fn.makeGroupId( group.members_facebook_id ) + '">'
                      + '<span>' + group.name + '</span>'
                      + '<span class="bubble none"></span>'
                   + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');

    },
    renderChatGroup_Host: function(){

      var html =  '<div class="event-accepted-chatgroup" data-groupid="hosts" >'
                      + '<span data-lid="ch_hosts" > Organisateurs </span>'
                      + '<span class="bubble none"></span>'
                   + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');

    },
     renderChatWrap_Host_Host: function( event_id ){

      var html = '<div class="event-accepted-chat-wrap none" data-groupid="hosts" data-chatid="' + LJ.fn.makeChatId({ event_id:event_id, group_id: "hosts" }) + '">'
                        + '<div class="event-accepted-chat-messages">'
                        + LJ.fn.renderChatWrapNotification_Host_Host()
                      + '</div>'
                      + '<div class="event-accepted-chat-typing">'
                        + '<div class="readby" data-names=""></div>'
                        + '<input data-lid="ch_placeholder" type="text" />'
                        + '<button data-lid="ch_button_send" class="theme-btn">Envoyer</button>'
                      + '</div>'
                  + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');

    },
    renderChatWrap_Host_Group: function( event_id, group ){

      var html = '<div class="event-accepted-chat-wrap none"'
                  + 'data-groupid="' + LJ.fn.makeGroupId( group.members_facebook_id ) + '"' 
                  + 'data-chatid="' + LJ.fn.makeChatId({ event_id: event_id, group_id: LJ.fn.makeGroupId( group.members_facebook_id ) }) + '">'
                    +'<div class="event-accepted-chat-messages">'
                        + LJ.fn.renderChatWrapNotification_Host_Group( group )
                      + '</div>'
                      + '<div class="event-accepted-chat-typing">'
                        + '<div class="readby" data-names=""></div>'
                        + '<input type="text"/>'
                        + '<button data-lid="ch_button_send" class="theme-btn">Envoyer</button>'
                      + '</div>'
                  + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');

    },
    renderChatWrap_Group_Group: function( event_id, group ){

      var html = '<div class="event-accepted-chat-wrap none"'
                  + 'data-groupid="' + LJ.fn.makeGroupId( group.members_facebook_id ) + '"' 
                  + 'data-chatid="' + LJ.fn.makeChatId({ event_id: event_id, group_id: LJ.fn.makeGroupId( group.members_facebook_id ) }) + '">'
                    +'<div class="event-accepted-chat-messages">'
                        + LJ.fn.renderChatWrapNotification_Group_Group()
                      + '</div>'
                      + '<div class="event-accepted-chat-typing">'
                        + '<div class="readby" data-names=""></div>'
                        + '<input type="text"/>'
                        + '<button data-lid="ch_button_send" class="theme-btn">Envoyer</button>'
                      + '</div>'
                  + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');

    },
    renderChatWrapNotification_Host_Host: function( ){

      var html = '<div data-lid="ch_first_msg_host_channel" class="super-centered event-accepted-notification-message">'
                          + 'Votre évènement a été créé avec succès.'
                          + '<br>'
                          + 'Vous pouvez discuter ici avec vos amis organisateurs en toute tranquilité. Ce chat '
                          + 'est reservé aux organisateurs.'
                        + '</div>';

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');

    },
    renderChatWrapNotification_Host_Group: function( group ){

      var html = '<div class="super-centered event-accepted-notification-message"><div>'
                          + group.name 
                          + ' <span data-lid="ch_first_msg_host">a demandé à rejoindre votre meefore : </span></div>' 
                          + '<div class="event-accepted-group-message">' + group.message + '</div>'
                          + '<button data-lid="ch_request_validate" class="theme-btn btn-validate-group">Accepter ce groupe</button>'
                        + '</div>'
      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');

    },
    renderChatWrapNotification_Group_Group: function(){

      var html =  '<div data-lid="ch_first_msg_group" class="super-centered event-accepted-notification-message">'
                        + 'Votre demande a bien a été envoyée' 
                        + '<br>'
                        + 'Dès que l\'un des organisateurs vous aura accepté, vous aurez accès à la discussion.'
                      + '</div>'

      html = $(html);
      LJ.fn.setAppLanguage( LJ.app_language, html )
      return html.prop('outerHTML');
                      
    },
    renderEventTabview: function( evt ){


      var html = '<div class="event-accepted-tabview slow-down-3" data-eventid="' + evt._id + '">'
                      + '<i class="icon icon-tabview icon-accepted icon-chat"></i>'
                      + '<i class="icon icon-tabview icon-hosting icon-mindset"></i>'
                      + '<i class="icon icon-tabview icon-kicked icon-ellipsis"></i>'
                      + '<i class="icon icon-tabview icon-pending icon-ellipsis"></i>'
                      + '<span class="tabview-date-day">' + moment( evt.begins_at ).format('DD/MM') + '</span>'
                      + '<span class="tabview-place">' + evt.address.place_name + '</span>'
                      + '<span class="bubble none"></span>'
                  + '</div>';

      return html;

    },
    renderEventInview_User: function( evt ){

    var html = '', hosts_html = '', groups_html = '', chatgroups_html = '', chat_wrap_html = '', status = '';


      var hosts_html = LJ.fn.renderHostsGroup( evt.hosts );
      
      evt.groups.forEach(function( group ){

        if( group.members_facebook_id.indexOf( LJ.user.facebook_id ) != -1 ){

          groups_html += LJ.fn.renderUsersGroup( group );
          chatgroups_html += LJ.fn.renderChatGroup_Group( group );
          chat_wrap_html += LJ.fn.renderChatWrap_Group_Group( evt._id, group );
          status  = group.status;

        }       
      });


      html += '<div data-eventid="' + evt._id + '" data-status="' + status + '" class="row-events-accepted-inview" >'
                + '<div class="event-accepted-inview">'
                  + '<div class="event-accepted-users">'
                    + hosts_html
                    + groups_html
                  + '</div>'
                  + '<div class="event-accepted-chat">'
                      + '<div class="event-accepted-chatgroups">'
                        + chatgroups_html
                      + '</div>'
                      + '<div class="event-accepted-chatwraps">'       
                        + chat_wrap_html
                      + '</div>'
                  + '</div>'
                  + '<div class="backtomap"><i class="icon icon-minus"></i></div>'
                + '</div>'
            + '</div>';

        return html;
    },
    renderEventInview_Intro: function( evt ){

    var html = '', hosts_html = '', groups_html = '', chatgroups_html = '', chat_wrap_html = '', status = '';

      var hosts_html = LJ.fn.renderHostsGroup( evt.hosts );
      var group = evt.groups[0];
      
        // groups_html += LJ.fn.renderUsersGroup( group );
        status = "accepted";

     

      var chat_wrap_html = '<div class="event-accepted-chat-wrap"'
                            + 'data-groupid=""' 
                            + 'data-chatid="chat-intro">'
                              +'<div class="event-accepted-chat-messages">'
                                  + LJ.fn.renderChatWrapNotification_Group_Group()
                                + '</div>'
                                + '<div class="event-accepted-chat-typing">'
                                  + '<div class="readby" data-names=""></div>'
                                  + '<input type="text"/>'
                                  + '<button data-lid="ch_button_send" class="theme-btn">Envoyer</button>'
                                + '</div>'
                            + '</div>';

      var chatgroups_html =  '<div class="event-accepted-chatgroup active" data-groupid="">'
                              + '<span>Intro</span>'
                              + '<span class="bubble none"></span>'
                           + '</div>';

      html += '<div data-eventid="' + evt._id + '" data-status="' + status + '" class="event-inview-intro row-events-accepted-inview" >'
                + '<div class="event-accepted-inview">'
                  + '<div class="event-accepted-users">'
                    + hosts_html
                    + groups_html
                  + '</div>'
                  + '<div class="event-accepted-chat">'
                      + '<div class="event-accepted-chatgroups">'
                        + chatgroups_html
                      + '</div>'
                      + '<div class="event-accepted-chatwraps">'       
                        + chat_wrap_html
                      + '</div>'
                  + '</div>'
                  + '<div class="backtomap"><i class="icon icon-minus"></i></div>'
                + '</div>'
            + '</div>';

        html = $(html);
        LJ.fn.setAppLanguage( LJ.app_language, html );
        return html.prop('outerHTML');
    },
    renderEventRequestIn: function( event_id ){

      var html = [

            '<div id="requestIn" data-eventid="'+event_id+'">',
                '<div class="row-input row-input-lg">',
                  '<div data-lid="e_request_title" class="modal-title">Demande de participation </div>',
                '</div>',
                '<div class="row-input row-input-lg etiquette row-requestin-group-name">',
                  '<label data-lid="e_request_group_name" class="label label-lg" for="ri-groupname"></label>',
                  '<input data-lid="e_request_group_name_placeholder" id="ri-groupname" type="text" placeholder="Sera affiché dans le chat"/>',
                '</div>',
                 '<div class="row-input row-input-lg etiquette row-requestin-group-members">',
                  '<label data-lid="e_request_group_members" class="label label-lg" for="ri-groupmembers"></label>',
                  '<input data-lid="e_request_group_members_placeholder" id="ri-groupmembers type="text" placeholder="Choisissez les personnes avec qui vous comptez sortir"/>',
                '</div>',
                 '<div class="row-input row-input-lg etiquette row-requestin-group-message">',
                  '<label data-lid="e_request_group_message" class="label label-lg" for="ri-groupmessage"></label>',
                  '<input data-lid="e_request_group_message_placeholder" id="ri-groupmessage" type="text" placeholder="Pourquoi faire un meefore avec vous et pas un autre groupe ?"/>',
                '</div>',
                '<div class="row-buttons visible">',
                  '<button data-lid="e_request_button_cancel" class="theme-btn btn-large btn-cancel right">Annuler</button>',
                  '<button data-lid="e_request_button_validate" class="theme-btn btn-large btn-validate btn-validate-modal right">Rejoindre ce meefore</button>',
                '</div>', 
            '</div>'

          ];

          html = $( html.join('') );
          LJ.fn.setAppLanguage( LJ.app_language, html )
          
          return html.prop('outerHTML');


    },
    renderItemInInput: function( str ){

       var html =  '<div class="rem-click item">'
                            + '<div class="item-name">' + str + '</div>'
                        +'</div>'

        return html;

    },
    renderItemInInput_Country: function( code ){

      code = code.toLowerCase();

      var html = '<div class="item item-country">'
                  + '<i class="flag-icon flag-icon-' + code + '"></i>'
                  + '<div data-lid="country_' + code +'" class="item-name">' + LJ.text_source[ "country_" + code ][ LJ.app_language ] + '</div>'
                + '</div>';
                
      return html;

    },
    renderItemInInput_GroupName: function( str ){

        var html = '<div class="rem-click item">'
                        + '<i class="icon icon-group-name icon-mindset"></i>'
                        + '<div class="item-name">' + str + '</div>'
                    +'</div>'

        return html;

    },
    renderItemInInput_GroupMessage: function( str ){

        var html = '<div class="rem-click item">'
                        + '<i class="icon icon-group-message icon-chat-1"></i>'
                        + '<div class="item-name">' + str + '</div>'
                    +'</div>'

        return html;

    },
    renderDatesInFilter: function(){

        var html = '';

        for( var i = 0; i < 6; i++ ){
          var date_l = moment.weekdaysShort( moment().add( i, 'day' ).day() );
          var date_n = moment().add( i, 'day' ).format('DD/MM');
          var date_id = moment().add( i, 'day' ).format('DD/MM/YYYY'); 
                  
          html += ['<div class="filter-date-item" data-dateid="' + date_id + '">',
                        '<span class="filter-date-item-weekday">' + date_l + '</span>',
                        '<span class="filter-date-item-numbday">' + date_n + '</span>',
                      '</div>'].join('');

          }

          return html;

    }
       
        
        

});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		renderTypeaheadNotFoundHosts: function(){

			var display_settings = LJ.cloudinary.search.user.params;
				img_id  		 = LJ.cloudinary.logo.black_on_white.id;

			var message 		 = "Aucun de tes amis n'a ce nom. Peut-être n'est-il pas encore inscrit? Invite-le!";


			var html = '<div class="search-result-default search-result-default-empty">'
				       + '<div class="search-result-name-wrap">'
				       + '<div class="search-result-name search-result-name-host">' + message + '</div>'
				       + '</div>'
				      +'</div>';

			return html;

		},
		renderTypeaheadNotFound: function(){
			
			var display_settings = LJ.cloudinary.search.user.params;
				img_id  		 = LJ.cloudinary.logo.black_on_white.id;

			var message 		 = "Aucun résultats";

			user_main_img = $.cloudinary.image( img_id, display_settings ).prop('outerHTML');

			var html = '<div class="search-result-default search-result-default-empty">'
					   + '<div class="search-result-images">' 
				       		+ user_main_img 
				       + '</div>'
				       + '<div class="search-result-name-wrap">'
				       + '<div class="search-result-name">' + message + '</div>'
				       + '</div>'
				      +'</div>';

			return html;

		},
		renderTypeaheadPending: function(){

			var message 		 = "Recherche..."
			var image_tag_loader = LJ.$spinner_loader.clone().addClass('search-loader').addClass('super-centered').prop('outerHTML');

			var html = '<div class="search-result-default search-result-default-empty" >'
					   + '<div class="search-result-images">' 
				       		+ image_tag_loader
				       + '</div>'
				       + '<div class="search-result-name-wrap">'
				       + '<div class="search-result-name">' + message + '</div>'
				       + '</div>'
				      +'</div>';
			return html;

		},
		renderTypeaheadBlank: function( data ){
			return '<div class="nonei"></div>';
		},
		renderTypeaheadSuggestion_Places:  function( place ){

			var html = '<div data-placeid="'+place._id+'">'
							+'<div class="place-data place-name">'+place.name+'</div>'
							+'<div class="place-data place-address">'+place.address+'</div>'
							+'<div class="place-data place-type">'+place.type+'</div>'
						+'</div>';

			return html;

		},
		renderTypeaheadSuggestion_Users: function( user ){

			var user_main_img = '', user_hashtags = '';

			var main_img = LJ.fn.findMainImage( user ),
				display_settings = LJ.cloudinary.search.user.params;
				display_settings.version = main_img.img_version;

			user_main_img = $.cloudinary.image( main_img.img_id, display_settings ).prop('outerHTML');

			user_hashtags += '<div class="ambiance-hashtag adjust">#</div><div class="ambiance-name ">' +  user.job + '</div>';
			user_hashtags += '<div class="ambiance-hashtag adjust">#</div><div class="ambiance-name">' +  user.age + '</div>';

			var image_tag_loader = LJ.$spinner_loader.clone().addClass('search-loader').addClass('super-centered').prop('outerHTML');

			var html = '<div data-userid="'+user.facebook_id+'">'
					   + '<div class="search-result-images">' 
				       		+ user_main_img 
				       		+ image_tag_loader
				       + '</div>'
				       + '<div class="search-result-name-wrap">'
				       		+ '<div class="search-result-name">' + user.name + '</div>'
				       		+ '<div class="search-result-hashtags">' + user_hashtags + '</div>'
				       + '</div>'
				      +'</div>';
			return html;

		}
			
	});


window.LJ.fn = _.merge( window.LJ.fn || {} ,

{
		
		handleDomEvents_Globals: function(){

            $('#logo').click(function(){
                $('#events').click();
            });

			LJ.$body.on('click', '.moving-arrow', function(){
				$('.landing-keypoints').velocity('scroll', { duration: window.tanim || 1800, easing: window.nanim || "ease-in-out" });
			});

			LJ.$body.on('mouseenter', '.eventItemWrap', function(){
				$(this).addClass('mouseover');
			});

			LJ.$body.on('mouseleave', '.eventItemWrap', function(){
				$(this).removeClass('mouseover');
			});

			$('.modal-curtain').click( function(){
				LJ.fn.hideModal();
			});

            LJ.$body.on('click', '.detailable', function(){

            	var facebook_id = $(this).attr('data-id') || $(this).closest('[data-userid]').attr('data-userid');

            	if( !facebook_id ){
            		return console.warn('Couldnt find any id to display profile');
            	}

            	LJ.fn.displayUserProfile( facebook_id );
            });
            
            LJ.$body.on('click', '.row-input, .picture-hashtag', function(){

            	var $self = $(this);

            	if( $self.parents('.row').hasClass('editing') ) return;

            	if( $self.hasClass('.picture-hashtag') ){
            		$self.closest('.picture')
            			.find('.picture-upload')
            			.velocity('transition.fadeOut', { duration: 300 });
            	}

            	$self.parents('.row')
            		.find('.icon-edit')
            		.toggleClass('slow-down-3')
            		.click();

            	$self.find('input').focus();

            });


            LJ.$body.on('click', '.pick-lang', function(){

            	var $self = $(this);
            	var lang_code = $self.attr('data-code');

            	if( $self.hasClass('active') ) return;

        		LJ.fn.displayCurtain({
        			behindTheScene: function(){

        				console.log('Changing language');
        				$('.pick-lang').removeClass('active');
        				$('.pick-lang[data-code="' + lang_code + '"]').addClass('active');

        				LJ.fn.setAppLanguage( lang_code );
        			},
        			duration: 550,
        			delay: 350,
        			static_delay: true,
        			afterTheScene: function(){

        				if( $self.hasClass('no-cb') ) return;
        				
        				LJ.fn.toastMsg( LJ.text_source[ "t_language_changed" ][ lang_code ] );

        			}
        		});

            });

		},
		handleDomEvents_Search: function(){

			LJ.$body.bind('typeahead:select', function(ev, suggestion) {

				console.log(suggestion);

				if( $('.row-create-party-location input').is( ev.target ) ){
					/* Nothing special - default typeahead behavior, copy name on input */	
				}

			  	if( $('#search input').is( ev.target ) ){
			  		LJ.fn.displayUserProfile( suggestion.facebook_id );
			  	}

			  	if( $('.row-create-friends input').is( ev.target ) ){
			  		delog('Friends input selected!');
			  	}

			});

		}
		


});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEventsChat: function(){  

            LJ.$body.on('click', '.backtomap', function(){

               LJ.fn.clearActivePreview();
               LJ.fn.clearActiveInview();
               LJ.fn.clearAllActiveMarkers();
               LJ.fn.clearAllActivePaths();
               LJ.fn.clearAllHalfActivePaths();

            });

            LJ.$body.on('click', '.event-accepted-chat-message img', function(){

                var $self       = $(this);
                var $chat_wrap  = $self.parents('.event-accepted-chat-wrap')
                var facebook_id = $self.parents().attr('data-authorid');
                var chat_id     = $chat_wrap.attr('data-chatid');

                // Cant whisper to himself or any other id than user id
                if( facebook_id == LJ.user.facebook_id || !/^\d{1,}$/i.test( facebook_id ) ){
                    console.log('Cant whisper to himself');
                    return;
                }

                LJ.fn.stageUserForWhisper( facebook_id, chat_id );
                
            });

            LJ.$body.on('click', '.btn-validate-group', function(){

                var $self = $(this);
                var group_id = $self.parents('.event-accepted-chat-wrap').attr('data-groupid');

                $self.parents('.row-events-accepted-inview')
                    .find('.event-accepted-users-group[data-groupid="' + group_id +'"]')
                    .find('.icon-toggle').click();

            });

            LJ.$body.on('focus', '.event-accepted-chat-typing input', function(){

                if( LJ.user.app_preferences.ux.message_readby == 'no' ) return 

                var $self       = $(this);
                var $event_wrap = $self.parents('.row-events-accepted-inview');
                var $chat_wrap  = $self.parents('.event-accepted-chat-wrap');
                var $readby     = $self.siblings('.readby');

                if( ['accepted', 'hosted'].indexOf( $event_wrap.attr('data-status')) == -1 ){
                    return console.log('Not accepted in event, nothing to send');
                }

                if( $chat_wrap.find('.event-accepted-chat-message').last().find('.whisper-text').length != 0 ){
                    return console.log('Not sending readby for whispers');
                }
                
                var names =  _.pull( $readby.attr('data-names').split(','), '' );
                if( names.length > 0 && names.indexOf( LJ.user.name ) == -1 ){

                    // check éventuel sur l'option oui ou non montrer qu'on a lu les messages
                    var event_id =  $event_wrap.attr('data-eventid');
                    
                    if( $event_wrap.attr('data-status') == 'hosted' ){
                        group_id = 'hosts';
                    } else {
                        group_id  = LJ.fn.findMyGroupIdFromDom( this ); 
                    }

                    LJ.fn.sendReadBy({
                        name     : LJ.user.name,
                        group_id : group_id,
                        event_id : event_id,
                        chat_id  : $chat_wrap.attr('data-chatid')
                    });
                    return;
                }

                console.log('Message already seen, not sending anything');

            });
			
            LJ.$body.on('keypress', '.event-accepted-chat-typing input', function(e){

                var keyCode = e.keyCode || e.which;
                if( keyCode === 13 ){
                    $(this).siblings('button').click();
                }

            });

            LJ.$body.on('click', '.event-accepted-chat-typing button', function(){

                var $self          = $(this);
                var $event_wrap    = $self.parents('.row-events-accepted-inview');
                var $chat_wrap     = $self.parents('.event-accepted-chat-wrap');
                
                var msg       = $self.siblings('input').val();
                var event_id  = $event_wrap.attr('data-eventid');
                var group_id  = null;
                var chat_id   = null;

                if( $event_wrap.attr('data-status') == 'hosted' ){
                    group_id = 'hosts';
                } else {
                    group_id = LJ.fn.findMyGroupIdFromDom( this ); 
                }

                // Find offline users based on display
                var offline_users = [];
                $event_wrap.find('.offline').each(function( i, el ){
                    if( $(el).closest('.event-accepted-users-group').css('display') == 'block' ){
                        offline_users.push( $(el).closest('.event-accepted-user').attr('data-userid') );
                    }
                });

                var chat_id  = $chat_wrap.attr('data-chatid');

                if( ['accepted','hosted'].indexOf( $event_wrap.attr('data-status') ) == -1  )
                    return LJ.fn.toastMsg( LJ.text_source["to_chat_inp_not_in"][ LJ.app_language ], 'info');

                if( msg.trim().length == 0 )
                    return LJ.fn.toastMsg( LJ.text_source["to_chat_inp_empty"][ LJ.app_language ], 'info');

                if( $self.hasClass('active') )
                    return LJ.fn.toastMsg( LJ.text_source["to_chat_inp_too_quick"][ LJ.app_language ], 'info');

                var data = {
                    msg             : msg,
                    event_id        : event_id,
                    group_id        : group_id,
                    chat_id         : chat_id,
                    img_id          : LJ.fn.findMainImage( LJ.user ).img_id,
                    img_vs          : LJ.fn.findMainImage( LJ.user ).img_version,
                    facebook_id     : LJ.user.facebook_id,
                    name            : LJ.user.name,
                    offline_users   : offline_users,
                    sent_at         : new Date()
                };

                if( $self.hasClass('btn-whisper') ){

                    var whisper_to = [];
                    $self.siblings('img').each(function( i, img ){
                        whisper_to.push( $(img).attr('data-authorid') );
                    });

                    data.whisper_to   = whisper_to;
                    LJ.fn.addChatLineWhisper( data );

                } else {
                    LJ.fn.addChatLine( data );
                }

                // Order important cause addChatLine erases .text() property
                $self.siblings('input').val('');
                $self.siblings('.readby').attr('data-names','').append( LJ.$bar_loader.clone().css({ width: '10px' }))

                LJ.fn.api('post', 'chats/' + chat_id, { data: data }, function( err, res ){
                    if( err ){
                        LJ.fn.handleApiError( err );
                    } else {
                        LJ.fn.handleSendChatSuccess( res );
                    }
                });

            });
			 
		},
        handleSendChatSuccess: function( res ){

            // delog('Handling chat success for chat_id : ' + res.chat_id );

            $('.event-accepted-chat-wrap[data-chatid="' + res.chat_id + '"]')
                .find('.event-accepted-chat-typing button').removeClass('active').end()
                .find('.readby').text('Envoyé')
                    .find('img').remove();


        },
		addChatLine: function( options ){
            
            // delog('Adding chatline...');
            
            var chat_id = options.chat_id;

            if( !chat_id )
                return console.error('Cannot add chatline without chat id');

            var chat_msg_html = LJ.fn.renderChatLine( options );
            
            var $wrap = $('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');

            if( $wrap.length == 0 )
                return console.error('Didnt find the container based on id : ' + chat_id );

            $wrap
            .find('.event-accepted-notification-message')
                .remove().end()
            .find('.readby')
                .attr('data-names', options.name ).text('').end()
            .find('.event-accepted-chat-messages .jspPane')
                .append( chat_msg_html )
            .find('.event-accepted-chat-message').last()
                .css({ opacity: 0 })

            LJ.fn.adjustAllChatPanes();
            setTimeout(function(){

                if( typeof options.variations == 'function' ){
                    options.variations( $wrap.find('.event-accepted-chat-message').last() );
                };
                
                var $last_msg_me = $wrap.find('.event-accepted-chat-message.me').last().addClass(  options.class_names && options.class_names.join(' ')  );
                var $last_msg_sd = $wrap.find('.event-accepted-chat-message:not(.me)').last().addClass(  options.class_names && options.class_names.join(' ') );
                
                if( options.facebook_id == LJ.user.facebook_id ){
                    $wrap.find('.event-accepted-chat-message.me').last().addClass('sending');
                    $last_msg_me.velocity({ opacity: [ 0.5, 0 ] }, { duration: 200 });
                } else {
                    $last_msg_sd.velocity({ opacity: [ 1.0, 0 ] }, { duration: 200 });
                }

            }, 50 );


        },
        addChatLineWhisper: function( options ){

            options.variations = LJ.fn.whisperify( options );
            LJ.fn.addChatLine( options );

        },
        whisperify: function( options ){

            return function( $wrap ){

                if( !$wrap )
                    return;
                
                var user_id = options.facebook_id;
                $wrap.find('.event-accepted-chat-text').addClass('whisper-text');

                var base_css = {
                    width      :'20px',
                    height     :'20px',
                    top        :'25px',
                    border     :'1px solid white',
                    padding    :'1px',
                    background :'white', 'box-shadow': '1px 1px 2px #a2a2a2'
                };

                if( user_id != LJ.user.facebook_id ){
                    options.whisper_to.forEach(function( whisperer_id, i ){
                        $wrap.parents('.event-accepted-chat')
                        .siblings('.event-accepted-users')
                        .find('.event-accepted-user[data-userid="' + whisperer_id + '"] img')
                        .clone()
                        .css( base_css )
                        .css({ left: ( 47 - 14 * i ) + 'px' })
                        .css({ 'z-index': (10-i) })
                        .appendTo( $wrap );
                    });
                } else {
                    options.whisper_to.forEach(function( whisperer_id, i ){
                        $wrap.parents('.event-accepted-chat')
                        .siblings('.event-accepted-users')
                        .find('.event-accepted-user[data-userid="' + whisperer_id + '"] img')
                        .clone()
                        .css( base_css )
                        .css({ right: ( 30 - 14 * i ) + 'px' })
                        .css({ 'z-index': (10-i) })
                        .appendTo( $wrap );
                    });
                }
                
                if( options.whisper_to.length > 1 ){
                    $wrap.find('.event-accepted-chat-sent-at').css({'top':'25%'});
                }
            }


        },
        fetchMyChat_Host: function( evt ){

            // console.log('Fetching chat as host');

            var event_id = evt._id;
            var $wrap    = $('.row-events-accepted-inview[data-eventid="' + event_id + '"]');

            // Fetch hosts chat
            var options_array = [{
                group_id : "hosts",
                chat_id  : LJ.fn.makeChatId({ event_id: event_id, group_id: "hosts" }) 
            }];

            // Fetch other chats
            evt.groups.forEach(function( group ){

                // Only request if not pending. That way, we dont override the message "Validate" 
                if( group.status == "accepted" ){

                    // User group id to build chatid, but then have to send "hosts" for proper auth
                    var group_id = LJ.fn.makeGroupId( group.members_facebook_id );
                    var chat_id  = LJ.fn.makeChatId({ event_id: event_id, group_id: group_id });

                    options_array.push({
                        chat_id  : chat_id,
                        group_id : "hosts"
                    });
                }

            });

            options_array.forEach(function( option ){

                LJ.fn.fetchChatHistoryById( _.merge( option, { event_id: event_id } ) );

            });

        },
        fetchMyChat_Group: function( evt ){

            var event_id = evt._id;
            var $wrap    = $('.row-events-accepted-inview[data-eventid="' + event_id + '"]');

            if( $wrap.attr('data-status') != 'accepted' )
                return console.warn('No chat to fetch, still waiting approval');

            var group_id = $wrap.find('.event-accepted-users-group.mygroup').attr('data-groupid');
            var chat_id  = LJ.fn.makeChatId({ event_id: evt._id, group_id: group_id });

            var data = {
                event_id : event_id,
                chat_id  : chat_id,
                group_id : group_id
            };

            LJ.fn.fetchChatHistoryById( data, function( err, res ){
                if( err ){
                    LJ.fn.handleApiError( err );
                } else {
                    LJ.fn.handleFetchChatHistoryById( res );
                }
            });        

            
        },
        fetchChatHistoryById: function( options ){

            // delog('Fetching messages for chat with id : ' + options.chat_id );

            var data = {
                chat_id          : options.chat_id,
                group_id         : options.group_id,
                event_id         : options.event_id,
                messages_fetched : options.messages_fetched || 0          
            };

            LJ.fn.api('get','chats/' + options.chat_id, { data: data }, function( err, res ){

                if( err ){
                    return LJ.fn.handleApiError( err );
                } else {
                    LJ.fn.handleFetchChatHistoryById({

                        event_id        : options.event_id,
                        messages        : res.messages,
                        readby          : res.readby,
                        chat_id         : options.chat_id,
                        prepend         : options.prepend

                    });
                }

            });

        },
        handleFetchChatHistoryById: function( options ){
                
            var event_id  = options.event_id,
                messages  = options.messages,
                readby    = options.readby;
                chat_id   = options.chat_id;
                prepend   = options.prepend || false;

                var chats_html = [];
                var $wrap      = $('.event-accepted-chat-wrap[data-chatid="' + options.chat_id + '"]');

                if( !event_id )
                    return console.error('Cannot add chat history without event id');

                if( !messages ){
                    chats_html.push( LJ.fn.renderChatLine_Bot("Cette discussion est vide. Envoyez le premier message!") );
                } else {                   
                    messages.forEach(function( msg ){
                        chats_html.push( LJ.fn.renderChatLine( msg ) );
                    });
                }

                if( chats_html.length != 0 ){

                    var $messagesWrap = $wrap.find('.jspPane');
                    var messages_html = chats_html.length != 0 && chats_html.join('');
                    
                    if( prepend ){
                        
                        var $new_messages = $( messages_html );
                        $new_messages
                            .addClass('none')
                            .insertBefore( $messagesWrap.children().first() )

                        var duration = 400;

                        $wrap.find('.load-chat-history, img.super-centered').velocity('transition.fadeOut', {
                                        duration: duration
                                     });
                        
                        $messagesWrap
                            .children()
                            .velocity({ opacity: [ 0, 0.3] }, {
                                duration: duration,
                                complete: function(){
                                    
                                    $messagesWrap.children().addClass('none');

                                    LJ.fn.adjustChatPaneById({
                                        stick_to_content: true,
                                        event_id: event_id,
                                        chat_id: chat_id
                                    });

                                     $messagesWrap
                                        .children()
                                        .removeClass('none')
                                        .velocity({ opacity: [ 1, 0] }, {
                                            duration: duration,
                                            complete: function(){
                                                $messagesWrap.parents('.event-accepted-chat-wrap').removeClass('fetching-more');                                                
                                            }
                                        });
                                }
                            });

                    } else {
                        
                        $messagesWrap
                            .html( messages_html ).end()
                            .find('.readby').attr('data-names', readby )

                        LJ.fn.displayReadBy({ event_id: event_id, readby: readby, chat_id: chat_id });
                        
                        LJ.fn.adjustAllChatPanes();
                    }

                    // Prepended or appended, whispery anyway
                    LJ.fn.whisperifyChatMessages( chat_id );


                } else {
                    // Prevent loader from staying eternally
                    $wrap.find('.load-chat-history, img.super-centered').velocity('transition.fadeOut', {
                        duration: 900,
                        complete: function(){

                            $wrap
                                .find('.load-chat-history').text("Tous les messages ont été chargés !")
                                .velocity('transition.fadeIn',{
                                    duration: 900,
                                    complete: function(){

                                         $wrap
                                            .find('.load-chat-history')
                                            .velocity('transition.fadeOut',{
                                                duration: 900,
                                            });

                                        $wrap
                                            .find('.event-accepted-chat-message')
                                            .velocity({ opacity: [ 1, 0.3 ]},{ 
                                                duration: 900 
                                            });

                                    }
                                });
                        }
                     });
                }

        },
        sendReadBy: function( options ){

            var chat_id  = options.chat_id;
            var group_id = options.group_id;
            var event_id = options.event_id;
            var name     = options.name;

            if( !name || !chat_id )
                return console.error('Cant send readyby, missing parameter');

            var data = {
                name     : name,
                group_id : group_id,
                event_id : event_id
            };

            LJ.fn.api('post', 'chats/' + chat_id + '/readby', { data: data }, function( err, res ){
                if( err ){
                    return LJ.fn.handleApiError( err );
                } else {
                    console.log('Send readby success!');
                }
            });

        },
        displayReadBy: function( options ){

            var readby   = options.readby,
                event_id = options.event_id,
                chat_id  = options.chat_id;

            if( !chat_id ){
                return console.error('Cannot display names without id');
            } 
                
            var $chat_wrap  = $('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');
            var $event_wrap = $('.row-events-accepted-inview[data-eventid="' + event_id + '"]');
            var $hosts      = $event_wrap.find('.event-accepted-users-group[data-status="hosts"]').find('.event-accepted-user');
            var $users      = $event_wrap.find('.event-accepted-users-group[data-status="accepted"]:not(.none)').find('.event-accepted-user');
            var $readby     = $chat_wrap.find('.readby');

            var n = $hosts.length + $users.length;
            var last_sender_name = $chat_wrap.find('.event-accepted-chat-message').last().attr('data-authorname');

            $readby.attr('data-names', readby );
            var names = $readby.attr('data-names').split(',');

            names = _.pull( names, last_sender_name );

            var display = '';
            
            if( names.length == n-1 && name.length > 1 ){
                display = 'Vu par tout le monde';
            }
            if( names.length == 1 && names[0] != '' & display == ''){
                display = 'Vu par ' + names[0];
            }
            if( names.length > 1 ){
                display = 'Vu par ' + names.slice( 0, names.length -1 ).join(', ') + ' et ' + names[ names.length - 1 ];
            }

            $readby.text( display );

        },
        bindFetchMoreHistory: function( chat_id ){

            var do_nothing_condition;
            $('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]')

            .bind('jsp-scroll-y', function( e, scroll_position_y, is_at_top, is_at_bottom ){

                var $self = $(this);

                // Capture value out of the closure. setTimeout needs to read the real value, refreshed
                do_nothing_condition = !is_at_top || $self.hasClass('fetching-more');

                if( do_nothing_condition ){
                    // console.log('Do nothing first round...');
                    return // Do nothing
                }

                if( $self.hasClass('fetching-confirm') ){
                    return;
                }
                $self.addClass('fetching-confirm');

                if( $self.hasClass('fetching-more') ){
                    return;
                }

                // console.log('Fetching once...');
                // Condition seems okay. If still ok in 't' ms, then do it.
                setTimeout(function(){

                    // console.log('Triggering twice...');
                    $self.removeClass('fetching-confirm');

                    if( do_nothing_condition ){
                        // console.log('NOT Triggering twice!');
                        return;
                    }              
                    var chat_id  = $self.attr('data-chatid');
                    var event_id = chat_id.split('-')[0];
                    var jsp      = LJ.jsp_api[ event_id ].chats[ chat_id ];

                    if( !jsp ){
                        return console.warn('Jsp undefined');
                    }
                    
                    console.log('Fetching more messages...');
                    $self.addClass('fetching-more');

                    var chat_id  = chat_id;
                    var group_id = chat_id.split('-')[1];
                    var event_id = chat_id.split('-')[0]; 

                    var messages_fetched = $self.find('.event-accepted-chat-message').length;
                    var $last_message    = $self.find('.event-accepted-chat-message').first();

                    if( $last_message.hasClass('jsp-glue') )
                        return;

                    $last_message.addClass('jsp-glue');

                    LJ.fn.showLoadersInChat( $self );

                    LJ.fn.fetchChatHistoryById({
                        chat_id          : chat_id,
                        event_id         : event_id,
                        group_id         : group_id,
                        messages_fetched : messages_fetched,
                        prepend          : true
                    });
                        

                }, 300 );

            });

        }

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEventsSettings: function(){

			LJ.$body.on('click', '.settings-group-buttons .btn-validate', function(){

                var $self = $(this);

                if( $self.hasClass('btn-validating') ) return;

                var $wrap = $self.parents('.row-events-accepted-inview');
                var event_id = $wrap.attr('data-eventid');
                var status   = $wrap.find('.settings-group-status .active').attr('data-status');

                // Special case for cancel : need ask user confirmation
                if( status == "canceled" ){
                    $wrap.find('.settings-group-status').children().velocity('transition.slideRightOut', {
                        duration: 300,
                        complete: function(){
                            $wrap.find('.settings-group-status')
                                 .append(['<div class="confirm-cancel none">',
                                    '<span class="event-settings-group-name">Êtes-vous sûr ?</span>',
                                    '<button class="theme-btn btn-validate" data-confirm="yes">Oui</button>',
                                    '<button data-confirm="no" class="theme-btn btn-cancel">Non</button></div>'
                                    ].join(''))
                                 .find('.confirm-cancel').velocity('transition.slideLeftIn', {
                                    duration : 300,
                                    display  : 'inline-block'
                                 });
                            $wrap.find('.settings-group-buttons').find('button').addClass('btn-validating');
                        }
                    })
                    return;
                }

                $self.addClass('btn-validating');
                LJ.fn.showLoaders();
                
                LJ.fn.changeEventStatus({
                    event_id : event_id,
                    status   : status
                });

            }); 

    
            LJ.$body.on('click', '.confirm-cancel button', function(){

                var $self    = $(this);
                var $wrap = $self.parents('.row-events-accepted-inview');
                var event_id = $wrap.attr('data-eventid');
                var confirm  = $self.attr('data-confirm');

                if( confirm == "yes" ){

                    $self.addClass('btn-validating');
                    LJ.fn.showLoaders();
                    
                    LJ.fn.changeEventStatus({
                        event_id : event_id,
                        status   : "canceled"
                    });

                } else {

                    $('.confirm-cancel').velocity('transition.slideRightOut', {
                        duration: 300,
                        complete: function(){
                            var $wrap = $self.closest('.row-events-accepted-inview');
                            $wrap.find('.settings-group-status *').velocity('transition.slideLeftIn',{
                                duration : 300,
                                display  : 'inline-block'
                            });
                            $wrap.find('.settings-group-buttons').find('button').removeClass('btn-validating');
                            $(this).remove();

                        }
                    })                   

                }

            }); 

            LJ.$body.on('click', '.icon-event-settings', function(){
               
                var $self = $(this);

                var $eventSettings = $self.parents('.row-events-accepted-inview')
                                          .find('.event-inview-settings');

                if( $self.hasClass('active') ){
                    $self.removeClass('active');
                    $eventSettings.velocity( LJ.ui.slideRightOutLight, {display:'none'} );
                    return;
                }

                $self.addClass('active');
                $eventSettings.velocity( LJ.ui.slideLeftInLight, {display:'block'} );
                
            });
            
            LJ.$body.on('click', '.settings-group-buttons .btn-cancel', function(){

                if( $(this).hasClass('btn-validating') ) return;
                $(this).parents('.row-events-accepted-inview').find('.icon-event-settings').click();

            });

            LJ.$body.on('click', '.event-settings-group-action', function(){

                $(this).siblings('.event-settings-group-action').removeClass('active');
                $(this).addClass('active');     
                
            });
			
			
			 
		},
		handleChangeStatusSuccess: function( data ){

            var event_id = data.event_id;
            var status   = data.status;

            LJ.fn.hideLoaders();
            LJ.fn.updateEventCache( data );
            LJ.fn.refreshEventStatusOnMap( event_id, status );
            LJ.fn.toastMsg( LJ.text_source["to_request_event_status_modified"][ LJ.app_language ] , 'info');

            // close the setting panel (of every event, in fact)
            $('.row-events-accepted-inview[data-eventid="' + event_id + '"]')
                .find('.icon-event-settings').removeClass('active').end()
                .find('.event-inview-settings').velocity( LJ.ui.slideRightOutLight, { display:'none' })
                .find('.btn-validating').removeClass('btn-validating');

            if( status == "canceled" ){
                LJ.fn.handleCancelEvent( event_id );
            }


        },
        removeMarker: function( opts ){

            var cache_src = opts.cache_src;
            var match_id  = opts.match_id;
            var done      = opts.done;

            if( !LJ[ cache_src ] ) return;

            LJ[ cache_src ].forEach(function( mrk, i ){
                if( mrk.id == match_id ){
                    if( mrk.marker && mrk.marker.setMap ){
                        mrk.marker.setMap( null );
                    } else {
                        mrk.setMap( null );
                    }
                    LJ[ cache_src ].splice( i, 1 );
                    if( done ){
                        done();
                    }
                }
            });

        },
        handleCancelEvent: function( event_id ){

            var evt = LJ.fn.getEvent( event_id );

            if( !evt ) return;

            // Refresh tabviews ui
            LJ.fn.adjustAllTabviews();

            // Clear event marker
            LJ.fn.removeMarker({
                cache_src : 'event_markers',
                match_id  : event_id
            });

            // Clear active event marker
            LJ.fn.removeMarker({
                cache_src : 'active_event_marker',
                match_id  : event_id,
                done      : LJ.fn.clearAllActivePaths
            });
            
            // Clear cache paths so its not displayed when loaded from cache
            // with no events in its extremities
            LJ.fn.removeMarker({
                cache_src : 'half_active_paths',
                match_id  : event_id
            })
            if( LJ.cache.paths ){
                delete LJ.cache.paths[ event_id ];
            }

            // Clear party marker if no other meefore was going there either
            var place_id = _.find( LJ.cache.events, function( el ){
                return el._id == event_id; 
            }).party.address.place_id;

            var k = 0;
            LJ.cache.events.forEach(function( evt ){
                if( evt.party.address.place_id === place_id ){
                    k++;
                }
            });

            if( k == 1 ){
            // There was only 1 meefore going there, remove party marker too
                LJ.fn.removeMarker({
                    cache_src : 'party_markers',
                    match_id  : place_id
                });
               LJ.fn.removeMarker({
                    cache_src : 'active_party_marker',
                    match_id  : place_id
                });
            }

            // Clear event cache
            LJ.cache.events.forEach(function( evt, i ){
                if( evt._id == event_id ){
                    LJ.cache.events.splice( i, 1 );
                }
            });


            var $els =  $('.row-events-accepted-inview[data-eventid="' + event_id + '"]')
                    .add('.event-accepted-tabview[data-eventid="' + event_id + '"]')
                    .add('.row-preview');


            $els.velocity('transition.slideDownOut', {
                duration: 500,
                complete: function(){
                    $('.row-events-accepted-inview[data-eventid="' + event_id + '"]')
                    .add('.event-accepted-tabview[data-eventid="' + event_id + '"]')
                }
            });

            // If user was trying to requestIn, alert that event has been canceled
            if( $('#requestIn[data-eventid="' + event_id + '"]').length ){
                $('#requestIn').children().velocity('transition.fadeOut', {
                    duration: 600,
                    complete: function(){
                        var el = '<div class="modal-title super-centered">' + LJ.text_source["e_request_event_got_canceled"][ LJ.app_language ] + '</div>';
                        $(el).hide().appendTo('#requestIn').velocity('transition.fadeIn', { duration: 600 });
                    }
                });
            }


        },
        changeEventStatus: function( options ){

            var event_id = options.event_id,
                status   = options.status;

            if( !event_id || !status ){
                return console.error('Cant update status without options');
            }

            var data = {
                status: status
            };

            LJ.fn.showLoaders();
            LJ.fn.api('patch','events/' + event_id + '/status', { data: data }, function( err, evt ){
                if( err ){
                    LJ.fn.handleApiError( err );
                } else {
                    LJ.fn.handleChangeStatusSuccess( evt );
                }
            });

        }

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEventsGroups: function(){

			 LJ.$body.on('click', '.icon-toggle', function(){

                var $self = $(this);

                LJ.fn.showLoaders();
                $self.addClass('active');

                var group_status = '';
                var group_id = $self.parents('.event-accepted-users-group').attr('data-groupid');
                var status   = $self.parents('.event-accepted-users-group').attr('data-status');
                var event_id = $self.parents('.row-events-accepted-inview').attr('data-eventid');

                if( status == 'accepted' ) {
                    group_status = 'kicked';
                } else {
                    group_status = 'accepted';
                }

                LJ.fn.updateGroupStatus({
                        group_status : group_status,
                        group_id     : group_id,
                        event_id     : event_id
                });

            });	


            LJ.$body.on('click', '.event-accepted-chatgroup', function(){

                var $self = $(this);

                if( $self.hasClass('active') )
                    return;

                // Remove bubbles, update tabview's
                $self.find('.bubble').addClass('none').text('');

                var event_id = $self.parents('.row-events-accepted-inview').attr('data-eventid');
                LJ.fn.updateTabviewBubbles( event_id );

                $('.event-accepted-chatgroup').removeClass('active')
                $self.addClass('active');

                var group_id = $self.attr('data-groupid');
                var chat_id  = LJ.fn.makeChatId({ event_id: event_id, group_id: group_id });

                var duration = 235;

                // Display proper groups
                $('.event-accepted-users-group:not([data-groupid="hosts"])')
                    .velocity('transition.fadeOut',{
                        duration: duration * 1.65,
                        complete: function(){

                            LJ.fn.adjustChatPaneById({
                                event_id : event_id,
                                chat_id  : chat_id
                            });

                        }
                    });

                $('.event-accepted-users-group[data-groupid="' + group_id + '"]:not([data-groupid="hosts"])')
                    .velocity('transition.fadeIn',
                        { duration: duration * 1.65
                    });

                // Display proper chat
                var $current_chat =  $('.event-accepted-chat-wrap:not(.none)');
                var $target_chat  =  $('.event-accepted-chat-wrap[data-groupid="' + group_id + '"]');

                $current_chat

                     .find('.event-accepted-notification-message')
                        .velocity('transition.fadeOut', { 
                            duration: duration * 1.65
                        }).end()

                    .find('.event-accepted-chat-message:not(.me)')
                    .velocity( LJ.ui.slideRightOutLight, {
                        duration: duration,
                        complete: function(){
                            $('.event-accepted-chat-wrap').addClass('none');
                        }
                    }).end()

                    .find('.event-accepted-chat-message.me')
                    .velocity( LJ.ui.slideLeftOutLight, {
                        duration: duration,
                        complete: function(){
                            $('.event-accepted-chat-wrap').addClass('none');      
                        }
                    }).end()

                    .find('.event-accepted-chat-typing')
                    .velocity('transition.fadeOut', {
                        duration: duration,
                        complete: function(){

                            LJ.fn.adjustChatPaneById({
                                event_id : event_id,
                                chat_id  : chat_id
                            });
            	
                            $current_chat.addClass('none');

                            $target_chat
                                .find('.event-accepted-notification-message').addClass('none').end()
                                .find('.event-accepted-chat-message').addClass('none').end()
                                .removeClass('none');

                            $target_chat

                               .find('.event-accepted-chat-message:not(.me)')
                                    .css({ opacity: 0 })
                                    .removeClass('none')
                                    .velocity( LJ.ui.slideRightInLight, {
                                        duration: duration + 100
                                    }).end()

                                .find('.event-accepted-chat-message.me')
                                    .css({ opacity: 0 })
                                    .removeClass('none')
                                    .velocity( LJ.ui.slideLeftInLight, {
                                        duration: duration + 100
                                    }).end()

                               .find('.event-accepted-notification-message')
                                    .css({ opacity: 0 })
                                    .removeClass('none')
                                    .velocity('transition.fadeIn', { 
                                        duration: duration * 4
                                    }).end()

                                .find('.event-accepted-chat-typing')
                                    .velocity('transition.fadeIn');

                        }
                    });

            });			
			 
		},
		updateGroupStatus: function( options ){

            var group_status = options.group_status,
                event_id     = options.event_id,
                group_id     = options.group_id;

            if( !group_status || !group_status || !event_id )
                return console.error('Missing group_id || group_status || group_id');

            var data = {
                group_status : group_status,
                chat_id      : LJ.fn.makeChatId({ event_id: event_id, group_id: group_id })
            };

            LJ.fn.api('patch', 'events/' + event_id + '/groups/' + group_id + '/status', { data: data }, function( err, res ){

                LJ.fn.hideLoaders();

                if( err ){
                    LJ.fn.handleApiError( err );
                } else {
                    LJ.fn.handleUpdateGroupStatusSuccess( res );
                }

            });

        },
        handleUpdateGroupStatusSuccess: function( res ){

            console.log('Updating group status success');
            var event_id = res.event_id;
            var group    = res.group;

            LJ.fn.updateGroupStatusUI( event_id, group );

            var status = group.status;
            var $wrap = $('.row-events-accepted-inview[data-eventid="' + event_id + '"]');

            $wrap.find('[data-groupid="' + group.group_id + '"]')
                 .attr('data-status', status )

            if( status == 'accepted' ){

                 LJ.fn.addChatLine({
                        chat_id     : LJ.fn.makeChatId({ event_id: event_id, group_id: group.group_id }),
                        msg         : LJ.text_source["to_event_group_accepted"][ LJ.app_language ].replace('%s', group.name ),
                        name        : LJ.bot_profile.name,
                        img_id      : LJ.bot_profile.img_id,
                        facebook_id : LJ.bot_profile.facebook_id,
                        sent_at     : new Date(),
                        class_names : ["bot"]

                });  
            }

            if( status == 'kicked' ){

                LJ.fn.addChatLine({
                        chat_id     : LJ.fn.makeChatId({ event_id: event_id, group_id: group.group_id }),
                        msg         : LJ.text_source["to_event_group_pending"][ LJ.app_language ].replace('%s', group.name ),
                        name        : LJ.bot_profile.name,
                        img_id      : LJ.bot_profile.img_id,
                        facebook_id : LJ.bot_profile.facebook_id,
                        sent_at     : new Date(),
                        class_names : ["bot"]

                    });  
            }     
        },
        updateGroupStatusUI: function( event_id, group ){

            var status   = group.status;
            var group_id = group.group_id;

            var $wrap    = $('.row-events-accepted-inview[data-eventid="' + event_id + '"]');

            $wrap.find('[data-groupid="' + group.group_id + '"]')
                 .attr('data-status', status );

            if( status == 'accepted' ){
                $wrap.find('[data-groupid="' + group.group_id + '"] .icon-toggle')
                    .removeClass('icon-toggle-off').addClass('icon-toggle-on').removeClass('active');

            }

            if( status == 'kicked' ){
                $wrap.find('[data-groupid="' + group.group_id + '"] .icon-toggle')
                    .removeClass('icon-toggle-on').addClass('icon-toggle-off').removeClass('active');

                    var bot_msg = LJ.text_source["to_event_group_pending"][ LJ.app_language ].replace('%s', group.name );
            }

        }

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEventsFilters: function(){

			 LJ.$body.on('click', '.filter-date-item', function(){

                var $self = $(this);
              	$self.toggleClass('active');

              	LJ.fn.applyDateFilter();

            });

			
		},
		applyDateFilter: function(){

			var date_to_display = [];
			var override;

			$('.filter-date-item.active').each(function( i, el ){
				date_to_display.push( moment( $(el).attr('data-dateid'), 'DD/MM/YYYY' ).dayOfYear() );
			});

			if( date_to_display.length == 0 ){
				override = true;
			}

			LJ.event_markers.forEach(function( marker ){
				if( date_to_display.indexOf( moment( marker.data.begins_at ).dayOfYear() ) == -1 && !override ){
					marker.marker.setMap( null );
				} else {
					if( !marker.marker.getMap() ){
						marker.marker.setMap( LJ.map );
					}
				}
			});

			LJ.party_markers.forEach(function( marker ){
				if( date_to_display.indexOf( moment( marker.data.begins_at ).dayOfYear() ) == -1 && !override ){
					marker.marker.setMap( null );
				} else {
					if( !marker.marker.getMap() ){
						marker.marker.setMap( LJ.map );
					}
				}	
			});

		}

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEventsPreview: function(){

			LJ.$body.on('click', '.btn-jumpto', function(){
				var event_id = $(this).parents('.event-preview').attr('data-eventid');
				var $tab = $('.event-accepted-tabview[data-eventid="' + event_id + '"]');
				
				$tab.click();
			});

            LJ.$body.on('keydown', 'input', function(e){

                var $self = $(this);
                var keyCode = e.keyCode || e.which;

                /* Ajout du group name */
                if( (keyCode == 9 || keyCode == 13) && $self.parents('.row-requestin-group-name').length != 0 && $self.val().length != 0 ){
                    e.preventDefault();
                    var str = $self.val().trim();
                    LJ.fn.addItemToInput({ html: LJ.fn.renderItemInInput_GroupName( str ), inp: this, max: 1 });
                    $(this).val('');
                }
                 /* Ajout du group name */
                if( (keyCode == 9 || keyCode == 13) && $self.parents('.row-requestin-group-message').length != 0 && $self.val().length != 0 ){
                    e.preventDefault();
                    var str = $self.val().trim();
                    LJ.fn.addItemToInput({ html: LJ.fn.renderItemInInput_GroupMessage( str ), inp: this, max: 1 });
                    $(this).val('');
                }

            });

            LJ.$body.on('focusout', '#requestIn input', function(){

                LJ.fn.formatRequestInInputs();

            });

            LJ.$body.on('mouseenter', '#requestIn .btn-validate', function(){

                LJ.fn.formatRequestInInputs();

            });

			LJ.$body.on('click', '#requestIn .btn-validate', function(){

                if( $(this).hasClass('btn-validating') ) return;

                $(this).addClass('btn-validating');
                $('#createEvent').find('label').addClass('lighter');
                LJ.fn.showLoaders();
                
                var event_id = $(this).parents('#requestIn').attr('data-eventid');
             
                LJ.fn.requestIn( event_id );

            });

             LJ.$body.on('click','.btn-requestin', function(){

                var event_id = $(this).parents('.event-preview').attr('data-eventid');

                if( !event_id )
                    return console.error('eventid wasnt attached to the dom, cant continue with the request');
                
                LJ.fn.displayInModal({
                    source: 'local',
                    fix_height: 0,
                    starting_width: 550,
                    custom_classes: ['text-left'],
                    render_cb: function(){
                        return LJ.fn.renderEventRequestIn( event_id );
                    },
                    predisplay_cb: function(){

                        $('.row-events-map').hide();
                        LJ.fn.initTypeaheadGroups( LJ.user.friends );

                         /* Adjusting label & input width */
                        LJ.fn.adjustAllInputsWidth('#requestIn');

                        var default_groupname = LJ.user.name + ' & co';
                        LJ.fn.addItemToInput({ html: LJ.fn.renderItemInInput_GroupName( default_groupname ), inp: '#ri-groupname', max: 1 });

                         var default_message = 'Ahoy!';
                        LJ.fn.addItemToInput({ html: LJ.fn.renderItemInInput_GroupMessage( default_message ), inp: '#ri-groupmessage', max: 1 });

                    }
                })

            });

		},
		requestIn: function( event_id ){

            delog('Requesting in  for event with id : '+ event_id + '...');

            var name, message, members_facebook_id = [];
            var $wrap = $('#requestIn');

            var $itemname = $wrap.find('.row-requestin-group-name .item-name');
            var $itemmsge = $wrap.find('.row-requestin-group-message .item-name');

            //name & message
            name    = $itemname.text().trim();
            message = $itemmsge.text().trim();

            // members
            if( $wrap.find('.friend').length != 0 ){
                members_facebook_id.push( LJ.user.facebook_id );
                $wrap.find('.friend').each(function(i, el){
                        members_facebook_id.push( $(el).attr('data-id') );
                });
            }

            var request = {
                name                : name,
                message             : message,
                members_facebook_id : members_facebook_id
            };

            
            LJ.fn.api('patch', 'events/' + event_id + '/request', { data: request }, function( err, res ){

                LJ.fn.hideLoaders();
                
                $('#requestIn')
                    .find('.lighter').removeClass('lighter').end()
                    .find('.btn-validating').removeClass('btn-validating');

                if( err ){
                    LJ.fn.handleApiError( err );
                } else {
                    LJ.fn.handleRequestInSuccess( res );
                }

            });


        },
        handleRequestInSuccess: function( data ){

                delog('Request in success');
                
                var event_id = data.event_id;

                LJ.fn.hideModal(function(){

                    LJ.fn.fetchEventById( event_id, LJ.fn.handleFetchEventById );
                    LJ.fn.toastMsg( LJ.text_source["to_request_sent"][ LJ.app_language ], 'info');

                     LJ.active_event_marker[0].marker.setIcon( LJ.cloudinary.markers.pending_active );

                    _.find( LJ.event_markers, function( marker ) { return marker.id == event_id; })
                     .marker.setIcon( LJ.cloudinary.markers.pending );


                });

        },
        addEventPreview: function( evt, options ){

            var renderFn;

            if( !evt || evt === {} ){
                console.log('No event to be added. Adding suggestion...');
                renderFn = LJ.fn.renderEventPreview_Default;
            } else {

                renderFn = LJ.fn.renderEventPreview_User;
                options = options || {};

                var hids = _.pluck( evt.hosts, 'facebook_id');

                if( hids.indexOf( LJ.user.facebook_id ) != -1 ){
                    renderFn = LJ.fn.renderEventPreview_Host;
                }

                evt.groups.forEach(function( group ){

                    var mids = _.pluck( group.members, 'facebook_id' );
                    if( mids.indexOf( LJ.user.facebook_id )!= -1 ){
                        if( group.status == "accepted" ){
                            renderFn = LJ.fn.renderEventPreview_MemberAccepted;
                        }
                        if( group.status == "pending" || group.status == "kicked"  ){
                            renderFn = LJ.fn.renderEventPreview_MemberPending;
                        }

                    }
                });
            }

            var event_preview = renderFn( evt );

            // Displaying Logic
            var $evt = $('.event-preview');
            var duration = 270;

            // No preview is there
            if( $evt.length == 0 ){

                delog('First render');

                $( event_preview ).hide().appendTo('.row-events-preview');

                $('.row-events-preview')
                    .css({ display: 'block', opacity: 0 })
                    .velocity( LJ.ui.slideUpInLight, {
                    duration: duration,
                    complete: function(){
                        $('.event-preview').css({ opacity: 0 }).show();
                        $('.event-preview').velocity( LJ.ui.slideDownInVeryLight,{ 
                            duration: duration
                        });
                    }
                })

                return;
            } 

            delog('Re-render');
            if( $('.row-events-preview').css('opacity') != '1' ){
                return setTimeout(function(){
                    LJ.fn.addEventPreview( evt, options );
                }, 100 );
            }

            $('.event-preview')
                .velocity( LJ.ui.slideUpOutVeryLight, { 
                    duration: duration,
                    complete: function(){
                        $('.row-events-preview').html( event_preview )
                        .children()
                        .velocity( LJ.ui.slideDownInLight, {
                            duration: duration +  300 ,
                            complete: function(){
                            }
                        });
                    }
                });

        },
        addPartyPreview: function( party, options ){

            if( !party || party === {} ){
                return console.error('No party to be added : ' + party );
            }

            options = options || {};    

            var cached_party

            // If user party has same place_id and date than a known partner party,
            // display the partner party template with full info.
            // Otherwise, display normal template. Just never refresh it.
            cached_party = _.find( LJ.cache.parties, function( cached_party ){
                return party.address.place_id == cached_party.address.place_id;
            });

            if( cached_party && options.begins_at && moment( cached_party.begins_at ).dayOfYear() == moment( options.begins_at ).dayOfYear() ){
                var party_preview =  LJ.fn.renderPartyPreview_Party( cached_party );
            }

            if( cached_party && options.begins_at && moment( cached_party.begins_at ).dayOfYear() != moment( options.begins_at ).dayOfYear() ){
                var party_preview =  LJ.fn.renderPartyPreview_Event( party );
            }

            if( cached_party && !options.begins_at ){
                var party_preview =  LJ.fn.renderPartyPreview_Party( cached_party );
            }

            if( !cached_party ){
                var party_preview =  LJ.fn.renderPartyPreview_Event( party );   
            }

            // Override for intro only
            if( options.intro ){
                var party_preview = LJ.fn.renderPartyPreview_Party( party );
            }


            var $party = $('.party-preview');
            var duration = 270;

            if( $party.length == 0 ){

                 delog('First render party');

                $( party_preview ).hide().appendTo('.row-party-preview');

                $('.row-party-preview')
                    .css({ display: 'block', opacity: 0 })
                    .velocity( LJ.ui.slideUpInLight, {
                    duration: duration,
                    complete: function(){
                        $('.party-preview').css({ opacity: 0 }).show()
                        $('.party-preview').velocity( LJ.ui.slideDownInVeryLight,{ 
                            duration: duration 
                        });
                    }
                })

                return;

            }

            // If same place, same hour, and no cached party was found.
            var compel = '.party-preview-place-name';
            if( $party.length && $('.row-party-preview').find(compel).text() == $(party_preview).find(compel).text() ){
                return;
            }
            
            delog('Re-render party');
            if( $('.row-party-preview').css('opacity') != '1' ){
                return setTimeout(function(){
                    LJ.fn.addPartyPreview( party, options );
                }, 100 );
            }


            $party
                .removeClass('slow-down-3')
                .velocity( options.transition_out || LJ.ui.slideUpOutVeryLight, { 
                    duration: duration,
                    complete: function(){
                        $('.row-party-preview').html( party_preview )
                        .children().removeClass('slow-down-3')
                        .velocity( options.transition_in || LJ.ui.slideDownInLight, {
                            duration: duration +  300 ,
                            complete: function(){
                                $(this).addClass('slow-down-3');
                            }
                        });
                    }
                });

        },
        refreshEventPreview: function(){

            var evt  = LJ.fn.findEventNearest();

            if( !evt || evt === {} )
                return console.log('No event to be displayed');

            // LJ.fn.addEventPreview( evt );

        }

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEventsTabview: function(){


            LJ.$body.on('click', '.event-accepted-tabview', function(){
                
                var $self                = $(this);

                var event_id             = $self.attr('data-eventid');
                var current_event_id     = $('.event-accepted-tabview.active').attr('data-eventid');

                var $inview_wrap_target  = $('.row-events-accepted-inview[data-eventid="' + event_id + '"]');
                var $inview_wrap_current = $('.row-events-accepted-inview[data-eventid="' + current_event_id + '"]');

                var evt                  = _.find( LJ.cache.events, function( el ){ return el._id === event_id });
                var duration             = 700;


                // Adjust dynamically the height so it perfectly fills the screen from filter div to footerdiv
                var adjusted_height = $( window ).outerHeight( true )  
                                      - $('.row-events-preview').innerHeight()
                                      - parseInt( $('.row-events-preview').css('top').split('px')[0] );

                $inview_wrap_target.css({ height: adjusted_height });

                // if( $inview_wrap_target.find('.event-accepted-chatgroup.active').length == 0 ){
                //     $inview_wrap_target.find('.event-accepted-chatgroup').first().click();
                // }
                
                $inview_wrap_target.find('.event-accepted-chatgroup.last-active').click();

                // Close chatviews
                if( $self.hasClass('active') ){
                    $inview_wrap_target.velocity('transition.slideDownOut', { duration: 400 }).removeClass('active');
                    $inview_wrap_target.find('.event-accepted-chatgroup.active').removeClass('active').addClass('last-active');
                    $self.removeClass('active');
                    return;
                }
                    

                // First opening 
                if( $('.event-accepted-tabview.active').length == 0 ){
                    LJ.fn.adjustAllChatPanes();
                    $self.addClass('active');

                    $inview_wrap_target
                        .siblings('.active').removeClass('active').end()
                        .velocity('transition.slideUpIn', { duration: 600 }).addClass('active')
                        .find('.event-accepted-inview').velocity('transition.slideUpIn')
                        .find('.event-accepted-chatgroup.last-active').addClass('active');

                    LJ.fn.addEventPreview( evt );
                    LJ.fn.addPartyPreview( evt.party, {
                        begins_at: evt.begins_at
                    } );
                    return;
                }

                // Switch tab

                // Update tabview 
                $('.event-accepted-tabview').removeClass('active');

                // Update chatgroup view (to prevent host bubbleup not working on last opened chat)
                $('.event-accepted-chatgroup.active').removeClass('active').addClass('last-active');
                $inview_wrap_target.find('.event-accepted-chatgroup.last-active').addClass('active');
                $self.addClass('active');
                                
                // Update preview
                LJ.fn.addEventPreview( evt );
                LJ.fn.addPartyPreview( evt.party,{
                     begins_at: evt.begins_at
                });

                // Update inview 
                $inview_wrap_current
                    .removeClass('active')
                    .find('.event-accepted-inview, .event-inview-settings')
                    .velocity('transition.slideUpOut', {
                        duration: duration
                    }).end()
                    .velocity('transition.fadeOut', {
                        duration: duration
                    });


                setTimeout(function(){
                    
                    $inview_wrap_target
                        .addClass('active')
                        .find('.event-accepted-inview')
                        .velocity('transition.slideUpIn', {
                            duration: duration 
                        }).end()
                        .velocity('transition.fadeIn', {
                            duration: duration
                        });
                        
                    LJ.fn.adjustAllChatPanes();
                   
                }, 330 );

                // $inview_wrap_current
                //     .removeClass('active')
                //     .velocity('transition.slideUpOut', {
                //         duration: duration
                //     })

                // setTimeout(function(){

                //     $inview_wrap_target
                //         .addClass('active')
                //         .velocity('transition.slideUpIn', {
                //             duration: duration
                //         });

                //       LJ.fn.adjustAllChatPanes();

                // }, 350 );


            });

			
			 
		},
		addEventInviewAndTabview: function( evt, options ){

            var options = options || {};
            
            var event_id = evt._id ;
            var renderFn =  LJ.fn.iHost( _.pluck( evt.hosts, 'facebook_id' ) ) ? 
                            LJ.fn.renderEventInview_Host :
                            LJ.fn.renderEventInview_User ;


            $('.row-events-accepted').append( renderFn( evt ) );
            $('.row-events-accepted-tabview').append( LJ.fn.renderEventTabview( evt ) );
            LJ.fn.updateTabviewIconStatus();

            if( !options.hide ){
                $('.event-accepted-tabview').last().click();
            }

            /* jsp */
            var $inview =  $('.row-events-accepted-inview[data-eventid="' + event_id + '"]');

            $inview.find('.event-accepted-chatgroup').first().addClass('last-active');
            $inview.find('.event-accepted-chat-wrap').first().removeClass('none');
            
            var chats_jsp = {};

            /* Host special case */
            if( LJ.fn.iHost( _.pluck( evt.hosts, 'facebook_id') )){
                var group_id = "hosts";
                var chat_id  = LJ.fn.makeChatId({ event_id: event_id, group_id: group_id });
                var $chat    = $inview.find('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');

                chats_jsp[ chat_id ] = $chat.find('.event-accepted-chat-messages').jScrollPane().data('jsp');

                LJ.fn.bindFetchMoreHistory( chat_id );
                
            }
            /* End hosts special case */

            evt.groups.forEach(function( group ){

                var group_id = LJ.fn.makeGroupId( group.members_facebook_id );
                var chat_id  = LJ.fn.makeChatId({ event_id: event_id, group_id: group_id });
                var $chat    = $inview.find('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');

                chats_jsp[ chat_id ] = $chat.find('.event-accepted-chat-messages').jScrollPane().data('jsp');

                // Fetch more chats on scrolltop
                LJ.fn.bindFetchMoreHistory( chat_id );

            });

            LJ.jsp_api[ event_id ] = {
                users: $inview.find('.event-accepted-users').jScrollPane().data('jsp'),
                chats: chats_jsp
            };

            /* Adjust all tabviews*/
            LJ.fn.adjustAllTabviews();
	           

        }

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEventsCreate: function(){

			 LJ.$body.on('click', '.rem-click', function(){

			 	var $self   = $(this);
                if( $self.parents('.row-create-before-place').length != 0 ){
                    $self.siblings('input').show().end().remove();
                    return;
                }
                if( $self.parents('.row-create-party-place').length != 0 ){
                    $self.siblings('input').show().end().remove();
                    return;
                }
                LJ.fn.removeItemToInput(this);
            });

             LJ.$body.on('mouseenter', '#createEvent .btn-validate', function(){

                LJ.fn.formatCreateEventInputs();

            });

			LJ.$body.on('keydown', 'input', function(e){

                var $self = $(this);
                var keyCode = e.keyCode || e.which;


                /* Remove des hashtag event  */
                if( keyCode == 8  && $self.val().length == 0 ){
                    $self.parents('.row-input').find('.rem-click').last().click();
                }

                /* Ajout des hashtag */
                // if( (keyCode == 9 || keyCode == 13) && $self.parents('.row-create-ambiance').length != 0 && $self.val().length != 0 ){
                //     e.preventDefault();
                //     var str = LJ.fn.hashtagify( $self.val() );
                //     LJ.fn.addItemToInput({ html: LJ.fn.renderAmbianceInCreate( str ), inp: this, max: LJ.settings.app.max_ambiance });
                //     $(this).val('');
                // }

                LJ.$body.on('click', '.before-place', function(){
                    LJ.fn.removeBeforePlaceToInput();
                }); 
            });

			/* Ajout des hosts / partyplace via la touche tab && click */
            LJ.$body.bind('typeahead:autocomplete typeahead:select', function( ev, suggestion ) {

                var $input = $('.row-create-friends input');
                if( $input.is( ev.target ) ){
                    LJ.fn.addItemToInput({
                       typeahead   : true,
                       inp         : ev.target,
                       max         : LJ.settings.app.max_hosts,
                       html        : LJ.fn.renderFriendInInput( suggestion ),
                       suggestions : '.search-results-friends' 
                    });
                }

                var $input = $('.row-requestin-group-members input');
                if( $input.is( ev.target ) ){
                    LJ.fn.addItemToInput({
                        typeahead   : true,
                        max         : LJ.settings.app.max_hosts,
                        inp         : ev.target,
                        html        : LJ.fn.renderFriendInInput( suggestion ),
                        suggestions : '.search-results-friends'
                    });
                }

                var $input = $('.row-create-party-place input');
                if( $input.is( ev.target ) ){
                    LJ.fn.addItemToInput({
                        typeahead   : true,
                        max         : 1,
                        inp         : ev.target,
                        html        : LJ.fn.renderPartyPlaceInCreate( suggestion ),
                        suggestions : '.search-results-party-places'
                    });
                }
            });


            /* Make sure always empty when closed */
            LJ.$body.bind('typeahead:autocomplete typeahead:select typeahead:change', function( ev, suggestion ){

            
                var $input = $('.row-create-friends input');
                    if( $input.is( ev.target ) ){
                        $input.typeahead('val','');
                    }

                var $input = $('.row-create-party-place input');
                    if( $input.is( ev.target ) ){
                        $input.typeahead('val','');
                    }

                var $input = $('.row-requestin-group-members input');
                    if( $input.is( ev.target ) ){
                        $input.typeahead('val','');
                    }

            });

            LJ.$body.on('click', '#createEvent .btn-validate', function(){

                if( $(this).hasClass('btn-validating') ) return;

                $(this).addClass('btn-validating');
                $('#createEvent').find('label').addClass('lighter');
                LJ.fn.showLoaders();
                LJ.fn.createEvent();

            });


            //  LJ.$body.on('click', '.mixity', function(){

            //     var $self = $(this);
            //     $('.mixity').removeClass('selected');
            //     $self.addClass('selected');

            // });

            LJ.$body.on('click', '.agerange', function(){

                var $self = $(this);
                $('.agerange').removeClass('selected');
                $self.addClass('selected');

            });

            // LJ.$body.on('click', '#createEvent', function(e){

            //     if( $(e.target).closest('.hp-main').length == 0 && $('.hp-main').css('display') == 'block' ){
                    
            //     }

            // });


            LJ.$body.on('click', '.btn-create-event', function(){

                LJ.fn.displayInModal({ 
                    source:'local',
                    fix_height: -120,
                    starting_width: 600,
                    custom_classes: ['text-left'],
                    render_cb: function(){
                        return LJ.fn.renderCreateEvent({ 
                            // mixity: LJ.settings.app.mixity
                        });
                    },
                    predisplay_cb: function(){

                        $('.row-events-map').hide();
                        /* Typehead on hosts and places */
                        //LJ.fn.initTypeaheadPlaces();           // DEPRECATED, TO KEEP FOR FUTURE BUSINESS MODEL //
                        LJ.fn.initTypeaheadHosts( LJ.user.friends );

                        /* Adjusting label & input width */
                        LJ.fn.adjustAllInputsWidth('#createEvent');

                        /* Date picker */ 
                        LJ.fn.initPickaday({
                            container_id: 'createEvent',
                            input_id: 'cr-date'
                        }); 

                        /* Custom hour picker */
                        LJ.fn.initHourPicker({
                            inp: '#cr-hour',
                            spliter: 'H',
                            hour_range: [ 4, 23 ],
                            min_range: [0, 55],
                            default_hour: [20,30],
                            min_step: 5
                        });

                        /* Rangeslider */
                        $('#createEvent').find('input[type="range"]').ionRangeSlider({

                            min           : LJ.settings.app.agerange_min,
                            max           : LJ.settings.app.agerange_max,
                            type          : "double",
                            min_interval  : 1,
                            drag_interval : true,
                            keyboard      : true,
                            from          : 20,
                            to            : 26,
                            max_postfix   : "+"
                        });


                        /* Google Places Autocomplete API */
                        LJ.fn.initGooglePlaces_CreateEvent();
                        
                        /* Default views */
                        LJ.fn.addItemToInput({
                           typeahead   : true,
                           inp         : '#cr-friends',
                           max         : LJ.settings.app.max_hosts,
                           html        : LJ.fn.renderMeInInput(),
                           suggestions : '.search-results-friends' 
                        });

                    } 
                });
            });

			
		},
        initGooglePlaces_CreateParty: function(){

            $('#pa-address').val('');

            LJ.google_places_autocomplete_party = new google.maps.places.Autocomplete(
                document.getElementById('pa-address')
            );
            $('.pac-container').last().addClass('create-party-place');

            LJ.google_places_autocomplete_party.addListener('place_changed', function(){
                var place = LJ.google_places_autocomplete_party.getPlace();
                LJ.fn.addPlaceToInput( place, 'pa-address');
            });

             // Attempt to add *press enter* support
            $('#pa-address').keydown(function(e){

                 var keyCode = e.keyCode || e.which;
                 var $self = $(this);

                 if( keyCode == 13 || keyCode == 9 ){
                    e.preventDefault();

                    var type = $self.attr('id').split('-')[1];
                    var $pac = $('.pac-container.' + type);
                    LJ.fn.selectFirstResult( $pac, function( err, place ){

                        if( err ){
                            return console.warn( err );
                        } else {
                            console.log('Fetched with place : ' + JSON.stringify( place, null, 4 ) );
                            if( $self.is('#pa-address') ){
                                LJ.fn.addPlaceToInput( place, 'pa-address' );
                            }
                        }

                    });
                 }

            });

        },
		initGooglePlaces_CreateEvent: function(){

			$('#cr-before-place').val('');
            $('#cr-party-place').val('');
            var options = { 
                componentRestrictions: {
                   // country: LJ.app_language 
                }
            };

            LJ.google_places_autocomplete_before = new google.maps.places.Autocomplete( 
            	document.getElementById('cr-before-place'), options 
            );
            $('.pac-container').last().addClass('before');
            
            LJ.google_places_autocomplete_before.addListener('place_changed', function(){
                var place = LJ.google_places_autocomplete_before.getPlace();
                LJ.fn.addPlaceToInput( place, 'cr-before-place' );
            });

             LJ.google_places_autocomplete_party = new google.maps.places.Autocomplete( 
                document.getElementById('cr-party-place'), options 
            );
             $('.pac-container').last().addClass('party');
            
            LJ.google_places_autocomplete_party.addListener('place_changed', function(){
                var place = LJ.google_places_autocomplete_party.getPlace();
                LJ.fn.addPlaceToInput( place, 'cr-party-place' );
            });

            // Attempt to add *press enter* support
            $('#cr-party-place, #cr-before-place').keydown(function(e){

                 var keyCode = e.keyCode || e.which;
                 var $self = $(this);

                 if( keyCode == 13 || keyCode == 9 ){
                    e.preventDefault();

                    var type = $self.attr('id').split('-')[1];
                    var $pac = $('.pac-container.' + type);
                    LJ.fn.selectFirstResult( $pac, function( err, place ){

                        if( err ){
                            return console.warn( err );
                        } else {
                            console.log('Fetched with place : ' + JSON.stringify( place, null, 4 ) );
                            if( $self.is('#cr-party-place') ){
                                LJ.fn.addPlaceToInput( place, 'cr-party-place' );
                            }
                             if( $self.is('#cr-before-place') ){
                                LJ.fn.addPlaceToInput( place, 'cr-before-place' );
                            }
                        }

                    });
                 }

            });

		},
		initPickaday: function( opts ){

            var input_id = opts.input_id,
                container_id = opts.container_id;

            var $input = $('#'+input_id);
            var $container = $('#'+container_id);

			LJ.pikaday = new Pikaday({ 
                            field: document.getElementById( input_id ),
                            format:'DD/MM/YY',
                            minDate: new Date(),
                            bound: false,
                            i18n: LJ.text_source[ "i18n" ][ LJ.app_language ]
                        });

            $('.pika-single').insertAfter( container_id );
            
            /* Date picker custom handling for better ux */
            LJ.$body.on('mousedown', '.pika-day:not(.pika-prev,.pika-next)', function(e){

                var $self = $(this);
                var date_str =  moment({ 
                    D: $self.attr('data-pika-day'),
                    M: $self.attr('data-pika-month'),
                    Y: $self.attr('data-pika-year') })
                .format('DD/MM/YY');

                var msg = 'Good choice to party';
                LJ.fn.addDateToInput( date_str, input_id );

            });

            $container.on('mousedown', '.pika-next', function(e){             
                LJ.pikaday.nextMonth();
            });

            $container.on('mousedown', '.pika-prev', function(e){             
                LJ.pikaday.prevMonth();
            });

            LJ.$body.on('mouseenter', '.pika-prev, .pika-next', function(){
                LJ.state.show_picker = true;
            });

            LJ.$body.on('mouseleave', '.pika-prev, .pika-next', function(){
                LJ.state.show_picker = false;
            });

            LJ.$body.on('focus', '#cr-date', function(){
                LJ.pikaday.show();
            });

            LJ.$body.on('focusout', '#cr-date', function(){
                if( LJ.state.show_picker ) return;
                LJ.pikaday.hide();
            });

            LJ.$body.on('click', '.date', function(){
                var msg = 'Ou vient quand?';
                LJ.fn.removeDateToInput( msg );
            }); 

		},
        initHourPicker: function( opts ){
            var opts = opts || {};

            var $inp = $( opts.inp );

            if( !$inp )
                return console.warn('Cant initialize hour picker without input');

            var $hourPicker = $( LJ.fn.renderHourPicker( opts ) );

            $hourPicker.insertAfter( $inp )
                       .css({
                            'position' : 'absolute',
                            'top'      : '10px',
                            'left'     : '135px',
                            'z-index'  : '100000'
                       });

            $('.hp-upndown-left .hp-icon-up').click(function(e){
                LJ.fn.incrHour(e, opts);
            });

            $('.hp-upndown-left .hp-icon-down').click(function(e){
                LJ.fn.decrHour(e, opts);
            });

            $('.hp-upndown-right .hp-icon-up').click(function(e){
                LJ.fn.incrMint(e, opts);
            });

            $('.hp-upndown-right .hp-icon-down').click(function(e){
                LJ.fn.decrMint(e, opts);
            });
            
            $('.hp-main').mousewheel(function(e){

                e.preventDefault();

                if( $(e.target).hasClass('hp-hour')){
                    if( e.deltaY == 1 ){
                        LJ.fn.incrHour(e, opts);
                    }
                    if( e.deltaY == -1 ){
                        LJ.fn.decrHour(e, opts);
                    }
                }
                if( $(e.target).hasClass('hp-min')){
                    if( e.deltaY == 1 ){
                        LJ.fn.incrMint(e, opts);
                    }
                    if( e.deltaY == -1 ){
                        LJ.fn.decrMint(e, opts);
                    }
                }
            });

            $('.row-create-hour').click(function(e){

                if(  $('.hp-main').hasClass('block') ){
                    return;
                }

                $inp.attr('placeholder','');
                $('.hp-main').show();

            });

            LJ.$body.mousedown(function(e){
                if( $(e.target).closest('.row-create-hour').length == 0 && $('.hp-main').css('display') != 'none' ){
                    var hour = $('.hp-hour').text();
                    var min  = $('.hp-min').text();
                    LJ.fn.addHourToInput( hour, min );
                    $('.hp-main').hide();
                }
            });

            $('.hp-main').on('mousedown', function(e){
                
                if( $(e.target).hasClass('hp-icon') ){
                    return;
                }

                $('.hp-main').hide().addClass('block');
                setTimeout(function(){
                    $('.hp-main').removeClass('block');
                }, 300);

                var hour = $('.hp-hour').text();
                var min  = $('.hp-min').text();
                LJ.fn.addHourToInput( hour, min );


            });


        },
		createEvent: function(){

            delog('Creating event...');

            var hosts_facebook_id  = [], ambiance = [],
                begins_at = '', agerange = '', mixity = '',
                address = {}, party = {};

            var $wrap = $('#createEvent');

            // hosts
            $wrap.find('.friend').each(function(i, el){
                hosts_facebook_id.push( $(el).attr('data-id') );
            });

            // ambiance
            // $wrap.find('.ambiance-name').each(function(i, el){
            //     ambiance.push( $(el).text() );
            // });

            // begins_at
            var day  = $wrap.find('.date-name').text().trim();
            var hour = $wrap.find('.date-hour').text().trim();
            var min  = $wrap.find('.date-min').text().trim();

            if( !day || !hour || !min ){
                begins_at = undefined;
            } else {
                begins_at = moment().set({
                    h: hour,
                    m: min,
                    D: day.split('/')[0],
                    M: day.split('/')[1],
                    Y: day.split('/')[2]
                }).toISOString(); 
            }

            // timezone
            // Attention! Si un user crée un event dans une timezone différente, cela pose problème
            // Il faudrait pour ça aller chercher la timezone à partir de l'addresse avec une API Google,
            // Mais ça fait beaucoup pour pas grand chose à mon avis...
            timezone = moment().utcOffset(); // eg. 120 for UTC+2, 60 for France (UTC+1)
            
            // age_range
            agerange  = $('.irs-from').text() + '-' + $('.irs-to').text();

            // mixity
            // mixity    = $wrap.find('.mixity.selected').attr('data-selectid').trim();

            // before address
            var $place = $wrap.find('.row-create-before-place').find('.rem-click');
            if( $place.length != 0 ){
                address.lat        = parseFloat( $place.attr('data-place-lat') );
                address.lng        = parseFloat( $place.attr('data-place-lng') );
                address.place_id   = $place.attr('data-placeid');
                address.place_name = $place.find('span').eq(0).text().trim();
                address.city_name  = $place.find('span').eq(1).text().trim();
            } else {
                address = undefined;
            }

            // party address
            party.address = {};
            party.type    = "anytype";

            var $place = $wrap.find('.row-create-party-place').find('.rem-click');
            if( $place.length != 0 ){
                party.address.lat        = parseFloat( $place.attr('data-place-lat') );
                party.address.lng        = parseFloat( $place.attr('data-place-lng') );
                party.address.place_id   = $place.attr('data-placeid');
                party.address.place_name = $place.find('span').eq(0).text().trim();
                party.address.city_name  = $place.find('span').eq(1).text().trim();
            } else {
                party = undefined;
            }

            // party_party
            //party_party._id = $wrap.find('.party-place').attr('data-placeid');

            var new_event = {
                hosts_facebook_id : hosts_facebook_id,
                // mixity         : mixity,
                // ambiance       : ambiance,
                begins_at         : begins_at,
                timezone          : timezone,
                agerange          : agerange,
                address           : address,
                party             : party
            };
            
            LJ.fn.api('post', 'events', { data: new_event }, function( err, res ){

                LJ.fn.hideLoaders();
                $('#createEvent')
                    .find('.lighter').removeClass('lighter')
                    .end()
                    .find('.btn-validating').removeClass('btn-validating');

                if( err ){
                    LJ.fn.handleApiError( err );
                } else {
                    LJ.fn.handleCreateEventSuccess( res );
                }

            });

        },
        handleCreateEventSuccess: function( evt ){

            delog('Event successfully created');
            LJ.fn.updateEventCache( evt );

            // UX Trick
                /* Message during login */
                var tpl = ['<div class="auto-login-msg super-centered none">',
                            '<span>' + LJ.text_source["e_create_loading_text"][ LJ.app_language ] + '</span>',
                            '</div>',
                         ].join('');

                $( tpl )
                    .appendTo('.curtain')
                    .velocity('transition.fadeIn', {
                        duration: 800,
                        delay: 500,
                        complete: function(){
                            $(this).velocity('transition.fadeOut', {
                                delay: 700,
                                complete: function(){
                                    $(this).remove();
                                }
                            });
                        }
            });

            LJ.fn.displayCurtain({ 

                behindTheScene: function(){

                    LJ.fn.hideModal();
                    LJ.fn.displayEventMarker( evt );
                    LJ.fn.displayPartyMarker_Event( evt );
                    LJ.fn.addEventInviewAndTabview( evt, { hide: true });
                    LJ.fn.displayPathToParty({ evt: evt });
                    LJ.map.panTo({ lat: evt.address.lat, lng: evt.address.lng });
                    LJ.map.setZoom( 15 );

                    /* the model is the single source of truth... */
                    LJ.fn.fetchMe();

                },
                static_delay: true,
                delay: 2000,
                afterTheScene: function(){
                    
                    LJ.fn.toastMsg( LJ.text_source["to_event_created_success_2"][ LJ.app_language ], 'info');
                    // LJ.fn.toastMsg( LJ.text_source["to_event_created_success_2"][ LJ.app_language ], 'info');
                    LJ.fn.joinEventChannel( evt );

                    setTimeout(function(){
                        $('.event-accepted-tabview[data-eventid="' + evt._id + '"]').click()
                    }, 250);
                }   
            });

        },
        createParty: function(){

            delog('Creating party...');

            var $wrap = $('#createParty');

            // Text fields
            var name           = $wrap.find('.row-create-party-name').find('.item-name').text();
            var hosted_by      = $wrap.find('.row-create-party-hosted-by').find('.item-name').text();
            var link           = $wrap.find('.row-create-party-link').find('.item-name').text();
            var picture_url    = $wrap.find('.row-create-party-picture').find('.item-name').text();
            var begins_at_full = $wrap.find('.row-create-party-hour-begin').find('.item-name').text();
            var ends_at_full   = $wrap.find('.row-create-party-hour-end').find('.item-name').text();
            var day_full       = $wrap.find('.row-create-party-date').find('.item-name').text();

            // attendees
            var attendees   = $('.irs-from').text() + '-' + $('.irs-to').text();

            // begins_at
            var begins_at_h = begins_at_full.split(/h/i)[0];
            var begins_at_m = begins_at_full.split(/h/i)[1];
            var begins_at_D = day_full.split('/')[0];
            var begins_at_M = day_full.split('/')[1];
            var begins_at_Y = day_full.split('/')[2];

            var begins_at = moment().set({
                h: begins_at_h,
                m: begins_at_m,
                s: 0,
                D: begins_at_D,
                M: begins_at_M,
                Y: begins_at_Y
            });

            var timezone = begins_at.utcOffset();

            // ends at
            var ends_at_h = ends_at_full.split(/h/i)[0];
            var ends_at_m = ends_at_full.split(/h/i)[1];
            var ends_at_D = day_full.split('/')[0];
            var ends_at_M = day_full.split('/')[1];
            var ends_at_Y = day_full.split('/')[2];

            var ends_at = moment().set({
                h: begins_at_h,
                m: begins_at_m,
                s: 0,
                D: begins_at_D,
                M: begins_at_M,
                Y: begins_at_Y
            }).add( 1, 'day' );

            begins_at = begins_at.toISOString();
            ends_at   = ends_at.toISOString();

            // party type
            type = $wrap.find('.party-type.selected').attr('data-selectid').trim();

            // address
            var $place = $wrap.find('.row-create-party-place').find('.rem-click');
            var address = {};
            if( $place.length != 0 ){
                address.lat        = parseFloat( $place.attr('data-place-lat') );
                address.lng        = parseFloat( $place.attr('data-place-lng') );
                address.place_id   = $place.attr('data-placeid');
                address.place_name = $place.find('span').eq(0).text().trim();
                address.city_name  = $place.find('span').eq(1).text().trim();
            }

            var new_party = {
                name        : name,
                hosted_by   : hosted_by,
                attendees   : attendees,
                link        : link,
                picture_url : picture_url,
                type        : type,
                begins_at   : begins_at,
                ends_at     : ends_at,
                timezone    : timezone,
                address     : address
            };
            
            LJ.fn.api('post', 'parties', { data: new_party }, function( err, res ){

                LJ.fn.hideLoaders();
                $('#createParty')
                    .find('.lighter').removeClass('lighter')
                    .end()
                    .find('.btn-validating').removeClass('btn-validating');

                if( err ){
                    LJ.fn.handleApiError( err );
                } else {
                    LJ.fn.handleCreatePartySuccess( res );
                }

            });

        },
        incrHour: function(e, opts){
            e.stopPropagation();

            if( parseInt( $('.hp-hour').text() ) == opts.hour_range[1] ){
                return;
            }

            $('.hp-hour').text( LJ.fn.formatHourAndMin( parseInt( $('.hp-hour').text() ) + 1 ));
            if( parseInt( $('.hp-hour').text() ) == opts.hour_range[1] ){
                $('.hp-upndown-left .hp-icon-up').hide();
                return;
            }
            $('.hp-upndown-left .hp-icon-down').show();
        },
        decrHour: function(e, opts){
            e.stopPropagation();

            if( parseInt( $('.hp-hour').text() ) == opts.hour_range[0] ){
                return;
            }

            $('.hp-hour').text( LJ.fn.formatHourAndMin( parseInt( $('.hp-hour').text() ) - 1 ));
            if( parseInt( $('.hp-hour').text() ) == opts.hour_range[0] ){
                $('.hp-upndown-left .hp-icon-down').hide();
                return;
            }
            $('.hp-upndown-left .hp-icon-up').show();
        },
        incrMint: function(e, opts){
            e.stopPropagation();

            if( parseInt( $('.hp-min').text() ) == opts.min_range[1] ){
                return;
            }

            $('.hp-min').text( LJ.fn.formatHourAndMin( parseInt( $('.hp-min').text() ) + opts.min_step ));
            if( parseInt( $('.hp-min').text() ) == opts.min_range[1] ){
                $('.hp-upndown-right .hp-icon-up').hide();
                return;
            }
             $('.hp-upndown-right .hp-icon-down').show();

        },
        decrMint: function(e, opts){
            e.stopPropagation();

            if( parseInt( $('.hp-min').text() ) == opts.min_range[0] ){
                return;
            }

             $('.hp-min').text( LJ.fn.formatHourAndMin( parseInt( $('.hp-min').text() ) - opts.min_step ));
             if( parseInt( $('.hp-min').text() ) == opts.min_range[0] ){
                $('.hp-upndown-right .hp-icon-down').hide();
                return;
            }
             $('.hp-upndown-right .hp-icon-up').show();
        }


	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

        handleDomEventsMap: function(){

            LJ.$body.on('mousedown', function(e){ 

                if( $(e.target).hasClass('row-preview') ){
                    $('.event-accepted-tabview.active').click(); 
                }

                if( $(e.target).hasClass('row-events-accepted-inview') ){
                    $('.row-events-accepted-inview.active').find('.icon-minus').click();
                }

            });

            Mousetrap.bind('esc', function(e) {
                $('.btn-cancel').each(function(i, el){
                    if( $(el).css('display') != 'none' ){
                        $(el).click();
                    }
                });
            });


        },
        initMap: function() {

             var map_style_meefore = new google.maps.StyledMapType( LJ.google.map.style.meemap, {
                name: 'meemap'
            });

            LJ.map = new google.maps.Map(document.getElementsByClassName('row-events-map')[0], {
                center: LJ.google.map_center,
                zoom: 13,
                // scrollwheel: false,
                disableDefaultUI: true,
                //zoomControl: true,
                zoomControlOptions: {
                    style    : google.maps.ZoomControlStyle.SMALL,
                    position : google.maps.ControlPosition.RIGHT_TOP
                },
                mapTypeControlOptions: {
                    mapTypeIds: ['meemap']
                }
            });

            LJ.map_service = new google.maps.places.PlacesService( LJ.map );

            /* Map styling */
            LJ.map.mapTypes.set('meemap', map_style_meefore );
            LJ.map.setMapTypeId('meemap');

            LJ.map.addListener('center_changed', function(){
                
            });

            LJ.map.addListener('click', function(e){
                
            	LJ.fn.clearAllActiveMarkers();
                LJ.fn.clearAllActivePaths();
                LJ.fn.clearAllHalfActivePaths();
                LJ.fn.clearActivePreview();
                LJ.fn.clearActiveInview();

                LJ.fn.refreshMap();

            });


            LJ.map.addListener('dragend', function(){
                //if( LJ.active_marker )
                //    return;
            	//LJ.fn.refreshEventPreview();
            });

        },

        handleFetchEvents: function( err, events ){

            if( err ){
                return console.log('Error fetching events : ' + JSON.stringify( err, null, 3 ) );
            }

            console.log('Total events successfully fetched, n = ' + events.length);
            LJ.cache.events = events;
                

        },
        handleFetchParties: function( err, parties ){

            if( err ){
                return console.log('Error fetching parties : ' + JSON.stringify( err, null, 3 ) );
            }

            console.log('Total parties successfully fetched, n = ' + parties.length);
            LJ.cache.parties = parties;

        },
        handleFetchEventById: function( err, evt, opt ){

            if( err ){
                return console.log('Error fetching event by id : ' + JSON.stringify( err, null, 3 ));
            }
            
            LJ.fn.updateEventCache( evt );
            LJ.fn.joinEventChannel( evt ); 
            LJ.fn.addEventInviewAndTabview( evt, opt );
            
            if( LJ.fn.iHost( _.pluck( evt.hosts, 'facebook_id' ) ) ){
                    LJ.fn.fetchMyChat_Host( evt );
            } else {
                    LJ.fn.fetchMyChat_Group( evt );
            }

        },
        handleFetchMyEvents: function( err, events ){

          if( err ){
            return console.log('Error fetching and sync friends : ' + err );
          }

            console.log('Personnal events successfully fetched, n = ' + events.length);
            
            LJ.$body.on('display:layout:after', function(){

                $('.row-events-accepted-tabview').velocity('transition.slideUpIn');

                events.forEach(function( evt, i ){
                    LJ.fn.handleFetchEventById( null, evt, { hide: true });
                });

            });


        },
        fetchEvents: function( callback ){

            LJ.fn.api('get', 'events', callback );

        },
        fetchParties: function( callback ){

            LJ.fn.api('get', 'parties', callback );

        },
        // For fetch when a friend puts us host or ask event with us 
        fetchEventById: function( event_id, callback ){

            if( !LJ.user.facebook_id )
                return console.error("Can't fetch events, userId not found");

            LJ.fn.api('get','events/' + event_id, callback );

        },
        // During initialisation 
        fetchMyEvents: function( callback ){

            if( !LJ.user.facebook_id )
                return console.error("Can't fetch events, userId not found");

            LJ.fn.api('get','me/events', callback );

        },
        findEventNearest: function(){

            return LJ.fn.findEventsNearests(1)[0];

        },
        findEventsNearests: function( max_events ){

            var max_events      = max_events;
            var nearest_events  = [];
            var center          = new google.maps.LatLng( LJ.map.getCenter().lat(), LJ.map.getCenter().lng() );

            LJ.cache.events.forEach(function( evt ){

                var evt_latlng     = new google.maps.LatLng( evt.address.lat, evt.address.lng);
                var dist_to_center = google.maps.geometry.spherical.computeDistanceBetween( center, evt_latlng );

                if( nearest_events.length < max_events ){
                    nearest_events.push({ place_id: evt.address.place_id, dist_to_center: dist_to_center });
                } else {                
                    nearest_events.push({ place_id: evt.address.place_id, dist_to_center: dist_to_center });
                    var max = _.max( nearest_events, function(el){ return el.dist_to_center; });
                    _.remove( nearest_events, function(el){ return el == max });                        
                }

            });

            return _.filter( LJ.cache.events, function( evt ){
                var nearest_events_id = _.pluck( nearest_events, 'place_id' );
                return nearest_events_id.indexOf( evt.address.place_id ) != -1 ;
            });

        },
        displayEventsMarkers: function( events ){
                
            events.forEach(function( itm ){
                LJ.fn.displayEventMarker( itm );
            });

          /* Rendu des évènements les plus proches par rapport à la position de départ*/
            // setTimeout(function(){
            //     LJ.fn.refreshEventPreview();
            // }, 1000 );        
           

        },
        displayPartyMarkers_Events: function( events ){

            events.forEach(function( evt ){
                LJ.fn.displayPartyMarker_Event( evt );
            });


        },
        displayPartyMarkers_Parties: function( parties ){

            parties.forEach(function( party ){
                LJ.fn.displayPartyMarker_Party( party );
            });


        },
        refreshMap: function(){
            google.maps.event.trigger( LJ.map, 'resize');
            //LJ.map.panTo( LJ.google.map_center );
        },
        displayMarker: function( options ){

            if( !options.lat || !options.lng || !options.url )
                return console.error('Missing argument for display marker');

            // Define and display the Marker on the Map
            var new_marker = new google.maps.Marker({
                position  : { lat: options.lat, lng: options.lng },
                map       : LJ.map,
                opacity   : options.opacity || 1,
                animation : options.animation || null,
                icon      : options.url,
                zIndex    : options.zIndex
            });

            // Make sure only display in intro mode
            if( options.intro ) {
                LJ.intro_marker = LJ.intro_marker || [];
                LJ.intro_marker.push( new_marker );
                return;                
            }

        
            // Store references of markers to destroy em and make them disappear from the map ( marker.setMap(null) )
            if( options.singleton ){
                LJ[ options.cache ] && LJ[ options.cache ].setMap( null );
                LJ[ options.cache ] = new_marker;
            } else {
                LJ[ options.cache ] = LJ[ options.cache ] || [];
                LJ[ options.cache ].push({
                        marker : new_marker,
                        id     : options.id,
                        data   : options.data
                    });
                // Fix, if has active in namespace, force refresh to be on top
                setTimeout(function(){
                    if( /active/.test( options.cache ) ){
                        LJ[ options.cache ][ LJ[options.cache ].length -1 ].marker.setZIndex(100);
                    }
                }, 30 )
            }

            if( Array.isArray( options.listeners )){
                options.listeners.forEach(function( listener ){
                    new_marker.addListener( listener.event_type, listener.callback );
                });
            }

        },
        displayEventMarker: function( evt, options ){

            var options = options || {};

            var url;
            var status;
            var open_status;

            var my_group = _.find( evt.groups, function( group ){
                return group.members_facebook_id.indexOf( LJ.user.facebook_id ) != -1; 
            });

            if( my_group ){
                status = my_group.status;
            } else if( LJ.fn.iHost( _.pluck( evt.hosts, 'facebook_id' )) ){
                status = "hosting";
            } else {
                status = 'base';
            }

            if( evt.status == "open" ){
                open_status = "open"
            } else {
                open_status = "full"
            }

            var effective_lat = evt.address.lat;
            var effective_lng = evt.address.lng;

            LJ.event_markers = LJ.event_markers || [];
            LJ.party_markers = LJ.party_markers || [];

            // Offsetting markers that pin to the exact same place_id for
            var concat_markers =  LJ.event_markers.concat( LJ.party_markers );
            concat_markers.forEach(function( mark ){

                var address = mark.data.party ? mark.data.party.address : mark.data.address;
                var evt_latlng   = new google.maps.LatLng( evt.address.lat, evt.address.lng);
                var other_latlng = new google.maps.LatLng( address.lat, address.lng );
                var distance     = google.maps.geometry.spherical.computeDistanceBetween( other_latlng, evt_latlng );

                if( distance < 100 ){
                    effective_lng = google.maps.geometry.spherical.computeOffset( evt_latlng, 100, LJ.fn.randomInt(0, 180) ).lng();
                    effective_lat = google.maps.geometry.spherical.computeOffset( evt_latlng, 100, LJ.fn.randomInt(0, 180) ).lat();
                }

            });


            LJ.fn.displayMarker( _.merge({
                lat       : effective_lat,
                lng       : effective_lng,
                url       : options.url || LJ.cloudinary.markers[ status ][ open_status ].url,
                cache     : options.cache || 'event_markers',
                singleton : false,
                id        : evt._id,
                data      : evt,
                zIndex    : 1,
                listeners : [
                    {
                        event_type : 'click',
                        callback   : function(e){

                            if( LJ.fn.isEventMarkerActivated( evt._id ) ){
                                return console.log('Marker already activated');
                            }

                            // Clear everything
                            LJ.fn.clearAllActiveMarkers();
                            LJ.fn.clearAllActivePaths();
                            LJ.fn.clearAllHalfActivePaths();

                            // Display preview
                            LJ.fn.addEventPreview( evt );
                            // Pass in the date of the event, to determine if the party
                            // matches a partner party in case same place_id, or if party occurs
                            // another day in order to display the right preview!
                            LJ.fn.addPartyPreview( evt.party, { begins_at: evt.begins_at } );

                            // Display active pins, paths and half active paths
                            LJ.fn.displayPathToParty({ evt: evt });
                            LJ.fn.displayHalfActivePaths( evt.party );
                            LJ.fn.displayActiveEventMarker( evt, { lat: effective_lat, lng: effective_lng });
                            LJ.fn.displayActivePartyMarker_Event( evt.party );
                        }
                    }, {
                        event_type : 'mouseover',
                        callback   : function(e){
                            this.setZIndex(2);
                            console.log('Hovering : ' + evt._id );
                            $('.event-accepted-tabview[data-eventid="' + evt._id + '"]').addClass('highlight');
                        }
                    }, {
                        event_type : 'mouseout',
                        callback   : function(e){
                            $('.event-accepted-tabview[data-eventid="' + evt._id + '"]').removeClass('highlight');
                        }
                    }
                ]
            }, options ));


        },
        displayPartyMarker_Event: function( evt, options ){

            var options = options || {};

            var party = evt.party;
            // Only display the marker if no other party at the same location exists
            if( _.find( LJ.party_markers, function( sche ){
                return sche.id == party.address.place_id; 
            })){
                return console.log('No displaying marker, already there');
            }           

            LJ.fn.displayMarker({
                lat       : party.address.lat,
                lng       : party.address.lng,
                url       : LJ.cloudinary.markers.party.url,
                cache     : options.cache || 'party_markers',
                singleton : false,
                id        : party.address.place_id,
                data      : evt,
                zIndex    : 2,
                listeners : [
                    {
                        event_type : 'click',
                        callback   : function( e ){

                            // Select all events in cache that cause to this place
                            // Range them by date according to filters
                            // Select the closest in distance, and trigger click
                           LJ.fn.clickOnClosestEvent( party );
                           
                        }
                    }
                ]
            });

        },
        displayPartyMarker_Party: function( party, options ){
            

            var options = options || {};

            // Display the marker with high z-index, so it overrides other people party's pin
            // who want to do a before at this place_id
            LJ.fn.displayMarker({
                lat       : parseFloat(party.address.lat),
                lng       : parseFloat(party.address.lng),
                url       : LJ.cloudinary.markers.party.url,
                cache     : options.cache || 'party_markers',
                singleton : false,
                id        : party.address.place_id,
                data      : party,
                zIndex    : 20,
                listeners : [
                    {
                        event_type : 'click',
                        callback   : function( e ){

                            LJ.fn.clickOnClosestEvent( party );
                           
                        }
                    }
                ]
            });

        },
        displayHalfActivePaths: function( party ){

            // Displays lightened paths
            LJ.cache.events.forEach(function( other_evt ){
                if( other_evt.party.address.place_id == party.address.place_id ){
                    LJ.fn.displayPathToParty({
                        evt            : other_evt,
                        stroke_opacity : 0.25,
                        cache          : "half_active_paths"
                    });
                }
            });

        },
        displayActivePartyMarker_Event: function( party ){

            if( LJ.fn.isPartyMarkerActivated( party.address.place_id ) ){
                LJ.active_markers[0].marker.setZIndex(1);
                return console.log('Marker already activated');
            }

            // If a party in cache with the same place_id and same date
            // display that one instead.

            // ONLY USEFULL IF DIFFERENT MARKERS FOR PARTY EVENTS

            // var cached_party = false;
            //     cached_party = _.find( LJ.cache.parties, function( cached_party ){
            //         return party.address.place_id == cached_party.address.place_id;
            //             && moment( cached_party.begins_at ).dayOfYear() == moment( ... ).dayOfYear() 
            //     });

            // if( cached_party ){
            //     LJ.fn.displayActivePartyMarker_Party( cached_party );
            //     return;
            // }

            // Display active party
            LJ.fn.displayMarker({
                lat       : party.address.lat,
                lng       : party.address.lng,
                url       : LJ.cloudinary.markers.party_active,
                id        : party.address.place_id,
                cache     : 'active_party_marker',
                singleton : false,
                zIndex    : 10,
                data      : {}
            });


        },
        displayActivePartyMarker_Party: function( party ){

            if( LJ.fn.isPartyMarkerActivated( party.address.place_id ) ){
                LJ.active_markers[0].marker.setZIndex(1);
                return console.log('Marker already activated');
            }



            // Display active party
            LJ.fn.displayMarker({
                lat       : parseFloat(party.address.lat),
                lng       : parseFloat(party.address.lng),
                url       : LJ.cloudinary.markers.party_active,
                id        : party.address.place_id,
                cache     : 'active_party_marker',
                singleton : false,
                zIndex    : 21,
                data      : {}
            });


        },
        displayActiveEventMarker: function( evt, opts ){

            if(! opts ){
                return console.warn('Cant display active event marker without effective lat and lng');
            }

            var status = null;
            var open_status = null;

            evt.groups.forEach(function( group ){
                if( LJ.fn.iGroup( group.members_facebook_id ) ){
                    status = group.status;
                }
            });

            if( LJ.fn.iHost( _.pluck( evt.hosts, 'facebook_id')) ){
                status = "hosting";
            }

            var marker_type = "base";

            if( status == "accepted" ){
                marker_type = "accepted";
            }

            if( status == "hosting" ){
                marker_type = "hosting";
            }

            if( status == "pending" || status == "kicked" ){
                marker_type = "pending";
            }

            if( evt.status == "open" ){
                open_status = "open"
            } else {
                open_status = "full"
            }

            LJ.fn.displayMarker({
                lat       : opts.lat,
                lng       : opts.lng,
                url       : LJ.cloudinary.markers[ marker_type + '_active'][ open_status ],
                id        : evt._id,
                cache     : 'active_event_marker',
                singleton : false,
                zIndex    : 10,
                data      : {}
            });

        },
        clickOnClosestEvent: function( party ){

            console.log('Triggering action on the closest event');

            var filtered_events = []

            // Filter by destination
            filtered_events = _.filter( LJ.cache.events, function( evt ){
                return evt.party.address.place_id == party.address.place_id;
            });

            if( filtered_events.length == 0 ){
                // Clear everything
                LJ.fn.clearAllActiveMarkers();
                LJ.fn.clearAllActivePaths();
                LJ.fn.clearAllHalfActivePaths();

                // Display suggestion to be the first to host a meefore
                console.log('Adding default suggestion preview');
                LJ.fn.addEventPreview();

                // Display preview
                LJ.fn.addPartyPreview( party );

                // Display active pins, paths and half active paths
                LJ.fn.displayHalfActivePaths( party );
                LJ.fn.displayActivePartyMarker_Event( party );

                return;
            }

            // Order by date
            filtered_events.sort(function( e1, e2 ){
                return e1.begins_at > e2.begins_at;
            });

            // Try to find at least one event in filtered dates;
            var acceptable_dates = [];
            $('.filter-date-item.active').each(function( i, el ){
                acceptable_dates.push(  $(el).attr('data-dateid') );
            });

            var found = false;
            var filtered_events_with_filter = [];
            acceptable_dates.forEach(function( date ){

                    var day_of_year = moment( date, 'DD/MM/YYYY' ).dayOfYear();
                    var temp = _.filter( filtered_events, function( evt ){
                        return moment( evt.begins_at ).dayOfYear() == day_of_year;
                    });

                    if( temp && temp.length != 0 && !found ){
                        found = true;
                        filtered_events_with_filter = temp;
                    }

            }); 
            
            // Try to find at least one event without applying filters
            var filtered_events_without_filters = [];
            var day_to_come = moment( filtered_events[0].begins_at ).dayOfYear();
            filtered_events_without_filters = _.filter( filtered_events, function( evt ){
                return moment( evt.begins_at ).dayOfYear() == day_to_come;
            });

            // Check if filter gave successfully match. Otherwise, use 2n array
            if( filtered_events_with_filter.length != 0 ){
                console.log('Found elements according to filter');
                filtered_events = filtered_events_with_filter;
            } else {
                console.log('Found elements according NOT to filter');
                filtered_events = filtered_events_without_filters;
            }

            // Augmente each object with the distance to center
            filtered_events.forEach(function( evt ){
                evt.distance_to = LJ.fn.distanceBetweenParties( party, evt );
            }); 

            // Filter by distance to center
            filtered_events.sort(function( e1, e2 ){
                return e1.distance_to > e2.distance_to;
            }); 

            var closest_event = filtered_events[0];
            console.log(closest_event);

            var closest_event_marker = _.find( LJ.event_markers, function( mrk ){
                return mrk.id == closest_event._id;
            }).marker;

            google.maps.event.trigger( closest_event_marker, 'click' );
        

        },
        distanceBetweenParties: function( party_1, party_2 ){

            var party_1_latlng = new google.maps.LatLng( party_1.address.lat, party_1.address.lng );
            var party_2_latlng = new google.maps.LatLng( party_2.address.lat, party_2.address.lng );
            return google.maps.geometry.spherical.computeDistanceBetween( party_1_latlng, party_2_latlng );

        },
        clearAllActiveMarkers: function(){

            LJ.active_party_marker = LJ.active_party_marker || [];
            LJ.active_party_marker.forEach(function( mark ){
                mark.marker.setMap(null);
            });

           LJ.active_party_marker = [];

            LJ.active_event_marker = LJ.active_event_marker || [];
            LJ.active_event_marker.forEach(function( mark ){
                mark.marker.setMap(null);
            });

            LJ.active_event_marker = [];

        },
        clearAllActivePaths: function(){

            LJ.active_paths = LJ.active_paths || [];
            LJ.active_paths.forEach(function( path ){
                path.setMap(null);
            });

            LJ.active_paths = [];

        },
        clearAllHalfActiveMarkers: function(){

            LJ.half_active_markers = LJ.active_markers || [];
            LJ.half_active_markers.forEach(function( mark ){
                mark.marker.setMap(null);
            });

            LJ.half_active_markers = [];

        },
        clearAllHalfActivePaths: function(){

            // console.log('Clearing all half active paths');
            LJ.half_active_paths = LJ.half_active_paths || [];
            LJ.half_active_paths.forEach(function( path ){
                path.setMap(null);
            });

            LJ.half_active_paths = [];

        },
        clearActivePreview: function(){

            var $row_preview = $('.row-preview');

            if( !$row_preview.children().length ) return;

            $row_preview.velocity( LJ.ui.slideUpOutLight, {
                duration: 270,
                complete: function(){
                    setTimeout(function(){
                        $row_preview.css({ display: 'none' });                            
                        $row_preview.children().remove();
                    }, 200 );
                }
            });



        },
        clearActiveInview: function(){

                $('.event-accepted-tabview.active').click();

        },
        clearActiveEventPreview: function(){

            $('.event-preview').velocity( LJ.ui.slideUpOutLight,{
                    duration: 270, 
                    complete: function(){
                        setTimeout(function(){
                            $('.event-preview').remove();
                        }, 200 );
                    }
            });

        },
        clearActivePartyPreview: function(){

             $('.party-preview').velocity( LJ.ui.slideUpOutLight,{
                    duration: 270, 
                    complete: function(){
                        setTimeout(function(){
                            $('.party-preview').remove();
                        }, 200 );
                    }
            });

        },
        isPartyMarkerActivated: function( given_id ){

            if( _.find( LJ.active_party_marker, function( mark ){

                if( mark.data._id ){
                    return mark.data._id == given_id;
                } else {
                    return mark.id == given_id;
                }

            })){
                return true;
            } else {
                return false;
            }

        },
        isEventMarkerActivated: function( given_id ){

            if( _.find( LJ.active_event_marker, function( mark ){

                if( mark.data._id ){
                    return mark.data._id == given_id;
                } else {
                    return mark.id == given_id;
                }

            })){
                return true;
            } else {
                return false;
            }

        },
        displayPath: function( path, opts ){

            opts = opts || {};
            opts.cache = opts.cache || 'active_paths';
            LJ[ opts.cache ] = LJ[ opts.cache ] || [];


            // Store reference to hide and delete later
            var path = new google.maps.Polyline({
                path          : path,
                geodesic      : true,
                strokeColor   : opts.stroke_color || '#E94F6A',
                strokeOpacity : opts.stroke_opacity || 0.75,
                strokeWeight  : opts.stroke_weight || 5
            });

            path.id == opts.evt._id;

            LJ[ opts.cache ].push( _.merge(path, { id: opts.evt._id }) );

            // Display the path we just stored
           LJ[ opts.cache ][ LJ[ opts.cache ].length - 1 ].setMap( LJ.map );

        },
        fetchPath: function( origin, destination, callback ){

            var directions_service = new google.maps.DirectionsService;
            var directions_display = new google.maps.DirectionsRenderer;

            directions_display.setMap( LJ.map );

            var origin      = new google.maps.LatLng( origin.lat, origin.lng );
            var destination = new google.maps.LatLng( destination.lat, destination.lng );

            directions_service.route({

                origin      : origin,
                destination : destination,
                travelMode  : 'WALKING'

            }, callback );
               
        },
        displayPathToParty: function( opts ){

            var evt = opts.evt;

            LJ.cache.paths = LJ.cache.paths || {};

            var cached_path = LJ.cache.paths[ evt._id ]
            if( cached_path && cached_path.path && cached_path.cached_at && ( (new Date) - cached_path.cached_at < 60*1000) ){
                // console.log('Displaying path from cached value');
                LJ.fn.displayPath( cached_path.path, opts );
                return;
            }

            LJ.fn.fetchPath( evt.address, evt.party.address, function( response, status ){

                if( status === google.maps.DirectionsStatus.OK ){
                    var path = response.routes[0].overview_path;
                    LJ.cache.paths[ evt._id ] = {
                        path      : path,
                        cached_at : new Date(),
                        id        : evt._id
                    };
                    LJ.fn.displayPath( path, opts );
                    return;                    
                } 

                if( status == "OVER_QUERY_LIMIT" ){
                    // console.log('Directions request failed due to ' + status + '. Retrying...');
                    setTimeout(function(){
                        LJ.fn.displayPathToParty( opts );
                    }, 400 );
                }                

            });

        },
        refreshEventStatusOnMap: function( event_id, status ){

            var marker = _.find( LJ.event_markers, function( el ){
                return el.id == event_id; 
            }).marker;

            var current_url = marker.getIcon().split('/').slice(-1)[0].split('.png')[0];

            // Playing with url parts. Url need to respect some convention
            if( status == "open" ){
                var current_url   = marker.getIcon();
                var last_part     = current_url.split('/').slice(-1)[0].split('.png')[0];
                var first_part    = current_url.split('marker')[0];
                var new_last_part = last_part.split('_full')[0];
                marker.setIcon( first_part + new_last_part );
            }
            
            if( status == "suspended" ){
                var current_url   = marker.getIcon();
                var last_part     = current_url.split('/').slice(-1)[0].split('.png')[0];
                var first_part    = current_url.split('marker')[0];
                var new_last_part = last_part + '_full';
                marker.setIcon( first_part + new_last_part );
            }

            if( status == "canceled" ){
                LJ.fn.handleCancelEvent( event_id );
                return;
            }
            
        }

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		initParty: function(){

			// Render dom elements,
			LJ.fn.renderDomElements_Party();

			// Bind handlers
			LJ.fn.handleDomEvents_Party();
		},
		renderDomElements_Party: function(){

			$('.row-events-filters').append( LJ.fn.renderCreatePartyBtn );


		},
		handleDomEvents_Party: function(){

			LJ.$body.on('click', '.btn-create-party', function(){

					LJ.fn.displayCreateParty();

			});

			LJ.$body.on('focusout', '#createParty input[type="text"]', function(){

				var $inp = $(this);
				var text = $inp.val();

				if( text.length < 2 ) return;

				LJ.fn.addItemToInput({
					html: LJ.fn.renderDefaultItem( text ),
					inp: this,
					max: 1
				});

				$inp.val('');

			});

			 LJ.$body.on('click', '.party-type', function(){

                var $self = $(this);
                $('.party-type').removeClass('selected');
                $self.addClass('selected');

            });

            LJ.$body.on('click', '#createParty .btn-validate', function(){

                if( $(this).hasClass('btn-validating') ) return;

                $(this).addClass('btn-validating');
                $('#createEvent').find('label').addClass('lighter');
                LJ.fn.showLoaders();
                LJ.fn.createParty();

            });


		},
		displayCreateParty: function(){

			 LJ.fn.displayInModal({ 
                    source:'local',
                    starting_width: 600,
                    fix_height: -30,
                    custom_classes: ['text-left'],
                    render_cb: function(){
                        return LJ.fn.renderCreateParty({
                        	party_types: LJ.settings.app.party_types
                        });
                    },
                    predisplay_cb: function(){

                        $('.row-events-map').hide();
   
                        /* Adjusting label & input width */
                        LJ.fn.adjustAllInputsWidth('#createParty');


                        /* Rangeslider */
                        $('#createParty').find('input[type="range"]').ionRangeSlider({

                            min           : LJ.settings.app.min_attendees,
                            max           : LJ.settings.app.max_attendees,
                            type          : "double",
                            min_interval  : 10,
                            drag_interval : true,
                            keyboard      : true,
                            from          : 50,
                            to            : 100,
                            max_postfix   : "+",
                            step 		  : 10
                        });

                        /* Google Places Autocomplete API */
                        LJ.fn.initGooglePlaces_CreateParty();

                    } 
                });
		},
        handleCreatePartySuccess: function( party ){

            delog('Party successfully created');
            LJ.cache.parties.push( party );

            LJ.fn.displayCurtain({ 

                behindTheScene: function(){

                    LJ.fn.hideModal();
                    LJ.fn.displayPartyMarker_Party( party );
                    LJ.map.panTo({ lat: party.address.lat, lng: party.address.lng });
                    LJ.map.setZoom( 15 );

                },
                static_delay: true,
                delay: 600,
                afterTheScene: function(){
                    
                    LJ.fn.toastMsg( LJ.text_source["to_party_created_success"][ LJ.app_language ], 'info');

                }   
            });

        }


	});
	

	window.LJ = _.merge( window.LJ || {} , {

		typeahead: {
			users: {
				class_names: {
					input:'',
					hint:'',
					menu:'search-results-users',
					dataset:'search-wrap',
					suggestion:'search-result-default search-result-users',
					empty:'empty',
					open:'open',
					cursor:'cursor',
					highlight:'highlight'
				}
			},
			// places: {
			// 	class_names: {
			// 		input:'',
			// 		hint:'hint-places',
			// 		menu:'search-results-autocomplete search-results-party-places',
			// 		dataset:'search-wrap',
			// 		suggestion:'search-result-default search-result-party-places',
			// 		empty:'empty',
			// 		open:'open',
			// 		cursor:'cursor',
			// 		highlight:'highlight'
			// 	}
			// },
			friends: {
				class_names: {
					input:'',
					hint:'hint-places',
					menu:'search-results-autocomplete search-results-friends',
					dataset:'search-wrap',
					suggestion:'search-result-default search-result-friend',
					empty:'empty',
					open:'open',
					cursor:'cursor',
					highlight:'highlight'
				}
			},
			groups: {
				class_names: {
					input:'',
					hint:'hint-places',
					menu:'search-results-autocomplete search-results-friends search-results-groups',
					dataset:'search-wrap',
					suggestion:'search-result-default search-result-friend',
					empty:'empty',
					open:'open',
					cursor:'cursor',
					highlight:'highlight'
				}
			}
		}

	});


	window.LJ.fn = _.merge( window.LJ.fn || {} , 

	{
		initTypeaheadUsers: function(){

			var users = new Bloodhound({
				 datumTokenizer: Bloodhound.tokenizers.whitespace,
  				 queryTokenizer: Bloodhound.tokenizers.whitespace,
  				 identify: function(o){ return o.name; },
  				 remote: {
  				 	url: '/api/v1/users?token=' + LJ.fn.getToken() + '&name=%query',
  				 	wildcard: '%query'
  				 },
  				 transform: function(res){
  				 	delog(res);
  				 }
			});

			users.initialize()
				 .done(function(){ })
				 .fail(function(){ delog('Bloodhound engine failed to initialized users'); })

			$('#search input').typeahead({
				hint: true,
				highlight: true,
				minLength: 1,
				classNames: LJ.typeahead.users.class_names
			},
			{
				name:'users',
				display:'name',
				source: users.ttAdapter(),
				templates: {
					notFound   : LJ.fn.renderTypeaheadNotFound,
					pending    : LJ.fn.renderTypeaheadPending,
					suggestion : LJ.fn.renderTypeaheadSuggestion_Users
				}
			});

		},
		initTypeaheadHosts: function( friends ){

			var friends = new Bloodhound({
				 datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
  				 queryTokenizer: Bloodhound.tokenizers.whitespace,
  				 identify: function(o){ return o.name; },
  				 local: friends,
  				 transform: function(res){
  				 	delog(res);
  				 }
			});

			friends.initialize()
				 .done(function(){ })
				 .fail(function(){ delog('Bloodhound engine failed to initialized friends'); })

			$('.row-create-friends input').typeahead({
				hint: true,
				highlight: true,
				minLength: 1,
				classNames: LJ.typeahead.friends.class_names
			},
			{
				name:'friends',
				display:'name',
				source: friends.ttAdapter(),
				templates: {
					notFound   : LJ.fn.renderTypeaheadNotFound,
					pending    : LJ.fn.renderTypeaheadPending,
					suggestion : LJ.fn.renderTypeaheadSuggestion_Users
				}
			});

		},
		initTypeaheadGroups: function( friends ){

			var friends = new Bloodhound({
				 datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
  				 queryTokenizer: Bloodhound.tokenizers.whitespace,
  				 identify: function(o){ return o.name; },
  				 local: friends,
  				 transform: function(res){
  				 	delog(res);
  				 }
			});

			friends.initialize()
				 .done(function(){ })
				 .fail(function(){ delog('Bloodhound engine failed to initialized friends groups'); })

			$('.row-requestin-group-members input').typeahead({
				hint: true,
				highlight: true,
				minLength: 1,
				classNames: LJ.typeahead.groups.class_names
			},
			{
				name:'friends',
				display:'name',
				source: friends.ttAdapter(),
				templates: {
					notFound   : LJ.fn.renderTypeaheadNotFound,
					pending    : LJ.fn.renderTypeaheadPending,
					suggestion : LJ.fn.renderTypeaheadSuggestion_Users
				}
			});

		},
		initTypeaheadPlaces: function(){

			var places = new Bloodhound({
				 datumTokenizer: Bloodhound.tokenizers.whitespace,
  				 queryTokenizer: Bloodhound.tokenizers.whitespace,
  				 identify: function(o){ return o.name; },
  				 remote: {
  				 	url: '/api/v1/places?token=' + LJ.fn.getToken() + '&name=%query',
  				 	wildcard: '%query'
  				 },
  				 transform: function(res){
  				 	delog(res);
  				 }
			});

			places.initialize()
				 .done(function(){ })
				 .fail(function(){ delog('Bloodhound engine failed to initialized places'); })

			$('.row-create-party-place input').typeahead({
				hint: true,
				highlight: true,
				minLength: 1,
				classNames: LJ.typeahead.places.class_names
			},
			{
				name:'places',
				display:'name',
				source: places.ttAdapter(),
				templates: {
					notFound   : LJ.fn.renderTypeaheadNotFound,
					pending    : LJ.fn.renderTypeaheadPending,
					suggestion : LJ.fn.renderTypeaheadSuggestion_Places
				}
			});

		}
		
	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEvents_Landing: function(){

			$('#facebook_connect, .landing-map-button').click(function(e){

				e.preventDefault();

				// First ask Facebook server for a valid token in exchange for user credentials
				// If user has permission ok in his Fb profile, then the app gets access granted automatically
				// Then, ask for /me for facebook profile, append token to the query and the received profile, and request for
				// a app token  on route /auth/facebook. Once the app token has been given, then call all meefore routes
				// with this token;

				FB.login(function( res ){

					delog('Client facebook status is : ' + res.status ) ;

					if( res.status == 'not_authorized' ){
						LJ.state.loggingIn = false;
						delog('User didnt let Facebook access informations');
						return;
					}

					if( res.status == 'connected' ){

						var curtain_delay = 1000;

						$('.curtain').velocity('transition.fadeIn', {
							duration: 1000,
							delay: curtain_delay,
							complete: function(){
								$('.progress_bar--landing').css({ width: '20%' });

								   var loader_tag = LJ.$main_loader_curtain.clone().prop('outerHTML');
									/* Message during login */
								   var tpl = ['<div class="auto-login-msg super-centered none">',
								   				'<span>' + LJ.text_source["lp_loading_party"][ LJ.app_language ] + '</span>',
								   				// loader_tag,
								   				'</div>',
								   			 ].join('');

					               $( tpl )
					                    .appendTo('.curtain')
					                    .velocity('transition.fadeIn', {
					                        duration: 1000
					                });

									LJ.state.loggingIn = true;
									var access_token = res.authResponse.accessToken;
									delog('short lived access token : ' + access_token );

									FB.api('/me?fields=id,email,name,link,locale,gender', function( facebookProfile ){

										facebookProfile.access_token = access_token;
								  		LJ.fn.loginWithFacebook( facebookProfile );
								  		$('.progress_bar--landing').css({ width: '40%' });
							  		});

								}
							});
						};

				}, { scope: ['public_profile', 'email', 'user_friends', 'user_photos']} );
			});

			$('#contact').click(function(){

				LJ.fn.displayInModal({
					source   : 'local',
					render_cb: LJ.fn.renderContactForm,
					starting_width: 160
				});

			});

			LJ.$body.on('click', '.landing-contact .btn-validate', function(){

				var $self    = $(this);
				var $contact = $('.landing-contact');

				if( $self.hasClass('btn-validating') ) return;

				$self.addClass('btn-validating');

				$('.contact-error').velocity('transition.fadeOut', {
					duration: 600
				});

				setTimeout(function(){

					var name    = $('#contact-name').val().trim();
					var email   = $('#contact-email').val().trim();
					var message = $('#contact-message').val().trim();

					if( name.length == 0 || email.length == 0 || message.length == 0 ){
						$self.removeClass('btn-validating');
						return $('.contact-error')
									.text( LJ.text_source["lp_contact_error_fields"][ LJ.app_language ] )
									.velocity('transition.fadeIn');
					}

					if( !/\S+@\S+/i.test( email ) ){
						$self.removeClass('btn-validating');
						return $('.contact-error')
									.text( LJ.text_source["lp_contact_error_email"][ LJ.app_language ] )
									.velocity('transition.fadeIn');
					}

					// Everything ok, send contact email
					$.ajax({
						method: 'post',
						url: '/landing/contact',
						data: {
							name    : name,
							email   : email,
							message : message
						},
						success: function( data ){
							$('.landing-contact *').velocity('transition.fadeOut', {
								duration: 600,
								complete: function(){
									var txt = LJ.text_source["lp_contact_send_success"][ LJ.app_language ];
									$('.landing-contact').html('<div class="none super-centered contact-send-success">' + txt + '</div>')
												 .find('div')
												 .velocity('transition.fadeIn', {
												 	duration: 600,
												 	complete: function(){
												 		setTimeout(function(){
												 			$('.modal-curtain').click();
												 		}, 1200 );
												 	}
												 })
								}
							})
						},
						error: function( xhr ){
							$self.removeClass('btn-validating');
							return $('.contact-error')
										.text( LJ.text_source["lp_contact_error_generic"][ LJ.app_language ] )
										.velocity('transition.fadeIn');
						}
					})

				}, 500 );

			});

		},
		initLandingPage: function(){

	        $('.curtain').velocity('transition.fadeOut', {
	        	duration: 1500,
	        	delay: 500
	        });

	        LJ.state.lp_i = 0;
			LJ.city_text = [
					"StayHigh, 00h35",
					"NightLovers, 23h23",
					"SoWhat?, 21h20",
					"NiceToMeetYou, 22h49",
					"OneLastRound, 4h01"
				];
				

	        $('.landing-places').typed({
				strings        : [ LJ.city_text[0] ],
				write_duration : 2700,
				backDelay      : 4300,
				back_duration  : 2000
	       	});

	        $('.bxslider').bxSlider({
			  mode: 'fade',
			  auto: true,
			  pause: 9000,
			  speed: 1100,
			  autoControls: true,
			  onSlideBefore: function(){

			  		if( LJ.state.lp_i == LJ.city_text.length - 1 ){
			  			LJ.state.lp_i = 0;
			  		} else {
			  			LJ.state.lp_i += 1;
			  		}
	       			var text = LJ.city_text[ LJ.state.lp_i ];
	       			
	       			$('.landing-places-wrap *:not(.lp-places-hash)').velocity( LJ.ui.slideRightOutLight, {
	       				duration: 800,
	       				complete: function(){
	       					$(this).remove();
	       					$('<span class="landing-places"></span>')
	       						.appendTo('.landing-places-wrap')
	       						.velocity('transition.slideLeftIn', {
	       							duration: 400
	       						});

	       					// Always make sure that kenburns duration = write_duration + backDelay + back_duration
	       					$('.landing-places').typed({
								strings        : [text],
								write_duration : 2300,
								backDelay      : 4300,
								back_duration  : 2000
	       					});

	       				}
	       			});
			  }
			});

		},
		autoLogin: function(){

			/* Message during login */
            var loader_tag = LJ.$main_loader_curtain.clone().prop('outerHTML');
			/* Message during login */
		   var tpl = ['<div class="auto-login-msg super-centered none">',
		   				'<span>' + LJ.text_source["lp_loading_party"][ LJ.app_language ] + '</span>',
		   				// loader_tag,
		   				'</div>',
		   			 ].join('');

           $( tpl )
                .appendTo('.curtain')
                .velocity('transition.fadeIn', {
                    duration: 1000
            });

			setTimeout( function(){

				LJ.fn.GraphAPI('/me', function( facebookProfile ){
					delog( facebookProfile );
			  		LJ.fn.loginWithFacebook( facebookProfile );
	  			});

			}, 400 );
		},
		loginWithFacebook: function( facebookProfile ){

				delog('Logging in meefore with facebook profile...');

				// facebookProfile.email = null;
				
				$.ajax({

					method:'POST',
					data: { 
						facebook_id     : facebookProfile.id,
						facebookProfile : facebookProfile
					},
					dataType:'json',
					url:'/auth/facebook',
					success: function( data ){
						LJ.fn.handleSuccessLogin( data );
						$('.progress_bar--landing').css({ width: '60%' });
					},
					error: function( err ){
						LJ.fn.handleServerError( err )
					}

				});

		},
		initAppBoot: function(){

			var ls = window.localStorage;

			if( !ls || !ls.getItem('preferences') ){
				delog('No local data available, initializing lp...');
				return LJ.fn.initLandingPage();
			}

			preferences = JSON.parse( ls.getItem('preferences') );

			tk_valid_until = preferences.tk_valid_until;
			long_lived_tk  = preferences.long_lived_tk;

			if( !tk_valid_until || !long_lived_tk ){
				delog('Missing init preference param, initializing lp...');
				return LJ.fn.initLandingPage();
			}
			
			if( moment( new Date(tk_valid_until) ) < moment() ){
				delog('long lived tk found but has expired');
				return LJ.fn.initLandingPage();
			} 

			var current_tk_valid_until = moment( new Date(tk_valid_until) );
			var now  = moment();
			var diff = current_tk_valid_until.diff( now, 'd' );

			if( diff < 30 ) {
				delog('long lived tk found but will expire soon, refresh is needed');
				return LJ.fn.initLandingPage();
			}

			delog('Init data ok, auto logging in...');
			return LJ.fn.autoLogin();
				
		},
		handleSuccessLogin: function( data ){

			delog('Handling success login with fb');
			LJ.user._id = data.id; 
			LJ.accessToken = data.accessToken; 

			console.log('Token received: ' + data.accessToken );
			//document.cookie = 'token='+data.accessToken;

			// Make sure all ajax request are don with proper accessToken
			LJ.fn.initAjaxSetup();

			// Typeahead pluggin 
			LJ.fn.initTypeahead();

			// Init Pusher Connexion via public chan 
			LJ.fn.initPusherConnection( LJ.accessToken );

			LJ.fn.say('auth/app', {}, {
				success: function( data ){

					LJ.fn.handleFetchUserAndConfigurationSuccess( data );
					$('.progress_bar--landing').css({ width: '80%' });
				}
			});

		}

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		initLadder: function( options ){

			if( typeof( options ) != "object" )
				return delog('Param error, object needed');

			var max_level  = options.max_level,
				base_point = options.base_point,
				coef_point = options.coef_point;

			if( !max_level || !base_point || !coef_point )
				return delog('Param error, missing key');

			var skill_ladder = [];
			for( var i = 1; i <= max_level; i++ ){
				var item = {}
				item.level = i;
				item.min_xp = ( i * base_point ) + Math.pow( base_coef, i-1 ); 
				item.max_xp = ( i * base_point ) + Math.pow( base_coef, i   )
				skill_ladder.push( item );
			}
			return skill_ladder;

		},
		findUserLevel: function(){

			return _.find( LJ.settings.skill_ladder, function(el){ 
				return ( el.min_xp < LJ.user.skill.xp && el.max_xp > LJ.user.skill.xp ) 
			}).level

		},
		setUserXp: function( new_xp ){

			LJ.user.skill.xp = new_xp;
			$('body').trigger('change-user-xp');

		},
		updateUserXp: function(){

			var user_level = LJ.fn.findUserLevel(),
				user_xp = LJ.user.skill.xp,
				ladder_level = LJ.settings.skill_ladder[ user_level - 1 ],
				xp_range = ladder_level.max_xp - ladder_level.min_xp;

			$('.xp-amount').html( user_xp );
			$('.xp-fill').css({ width: ( user_xp - ladder_level.min_xp ) * 100 / xp_range +'%'});

		}

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEvents_UI: function(){

			LJ.$logout.click(function(){
				LJ.user.app_preferences.ux.auto_login = 'no';
				LJ.fn.setLocalStoragePreferences();
				location.reload();

			});

			LJ.$body.on('click', '#thumbWrap img', function(){
				LJ.fn.displayUserProfile( LJ.user.facebook_id );
			});

			$('#search').click(function(){
				$(this).find('input').focus();
			});

			$('#search').mouseover(function(){

			});

			['#profile', '#events', '#settings'].forEach(function( menuItem ){

				var $menuItem = $( menuItem );

				$menuItem.click(function(){

				$menuItem.find('span.bubble').addClass('filtered').text('');
		
				  if( LJ.state.freezing_ui || $menuItem.hasClass('menu-item-active') || ($menuItem.hasClass('disabled')) )
				  	return;

				  		LJ.state.freezing_ui = true;
						
						var linkedContent = $menuItem.data('linkedcontent');
						
						var indexActive = $('.menu-item-active').offset().left,
							indexTarget = $menuItem.offset().left;

						if( indexActive > indexTarget ){
							var myWayOut = LJ.ui.slideRightOutVeryLight || 'transition.slideRightOut' ; 
								myWayIn =  LJ.ui.slideLeftInLight || 'transition.slideLeftIn' ; 
						} else {
							var myWayOut = LJ.ui.slideLeftOutVeryLight || 'transition.slideLeftOut' ; 
								myWayIn =  LJ.ui.slideRightInLight || 'transition.slideRightIn' ; 
						}

						$('.menu-item-active').removeClass('menu-item-active')
											  .find('span.underlay')
											  .velocity({ opacity: [0, 1], translateY: [-2, 0]   },
											   { duration: 250,
											   complete: function(){
											   	$menuItem.addClass('menu-item-active')
														   .find('span.underlay')
													   	   .velocity({ opacity: [1, 0], translateY: [0, -2]   }, { duration: 300 });
											   	} 
											});

						var duration_time = 500;
						if( !$menuItem.is('#events') ){
							// LJ.fn.refreshMap();
							$('.row-events-accepted-tabview').velocity('transition.slideDownOut', { duration: duration_time });
							$('.row-events-accepted-inview.active').velocity('transition.slideDownOut', { duration: duration_time });
							$('.row-events-filters, .row-preview').velocity('transition.slideUpOut', { duration: duration_time });
						} else {
							$('.row-events-accepted-tabview').velocity('transition.slideUpIn', { duration: duration_time });
							$('.row-events-accepted-inview.active').velocity('transition.slideDownIn', { duration: duration_time });
							setTimeout(function(){
								$('.row-events-filters').velocity('transition.slideDownIn', { duration: duration_time, display: 'flex' });
								if( $('.row-preview').children().length > 0 ){
									$('.row-preview').velocity('transition.slideDownIn', { duration: duration_time });
								}
							}, 300 );
						}

						LJ.fn.displayContent( linkedContent, {
							myWayOut: myWayOut,
							myWayIn : myWayIn, 
							prev:'revealed',
							duration: 320
						});


					
				  
				});
			});

		},
		displayContent: function( content, options ){
			
				options = options || {};

			if( !options.mode ){
				
				var prev = options.prev;			
				var $prev = $('.'+options.prev);	

				$prev.velocity( options.myWayOut || 'transition.fadeOut', {	
					duration: options.duration || 0,
					display: 'none',
					complete: function(){
						$prev.removeClass( prev )
						$(content).addClass( prev )
							   .velocity( options.myWayIn || 'transition.fadeIn', {
							   	duration: 0 || 450,
							   	display:'block',
							   	complete: function(){
							   		LJ.state.freezing_ui = false;
							   		if(LJ.user.status === 'new'){
							   			//LJ.fn.toggleOverlay('high', LJ.tpl.charte );
							   		}
							   		options.after_cb && options.after_cb();
							   		LJ.fn.adjustAllInputsWidth( content );

							   	}
							   });
					}
				});
			}

			if( options.mode == 'curtain' ) {

				var prev = options.prev;			
				var $prev = $('.'+options.prev);
				
				var parallelTheScene = function(){
					if( options.parallel_cb ){
						options.parallel_cb();
					}
				};

				var behindTheScene = function(){

					options.during_cb();
					$prev.removeClass( prev );
					$(content).addClass( prev )
						   .show()
						   .css({'display':'block'});

				};

				var afterTheScene = function(){
					options.after_cb();
				}

				LJ.fn.displayCurtain({
					parallelTheScene : parallelTheScene,
					behindTheScene   : behindTheScene,
					afterTheScene    : afterTheScene,
					delay			 : options.delay,
					static_delay     : false
				});
				
			} 


		},
		displayCurtain: function( opts ){

			var behindTheScene = opts.behindTheScene || function(){ delog('Behind the scene'); },
				afterTheScene  = opts.afterTheScene   || function(){ delog('after the scene');  },
				parallelTheScene = opts.parallelTheScene || function(){},

				delay          = opts.delay    || 500,
				static_delay   = opts.static_delay || false,
				duration       = opts.duration || 800;



			var $curtain = $('.curtain');

			if( $curtain.css('opacity') != '0' || $curtain.css('display') != 'none' ){
				var init_duration = 10;
			}

				$curtain
				.velocity('transition.fadeIn',
				{ 
					duration: init_duration || duration, //simuler l'ouverture instantanée
				  	complete: function(){
				  		behindTheScene();
				  		if( static_delay ){
				  			setTimeout(function(){
				  				$curtain.trigger('curtain:behindthescene:done');
				  			}, delay );
				  		} else {
				  			// The curtain will fall down when behindTheScene has finished working
				  		}
				  	}
				})
				
				$curtain.one('curtain:behindthescene:done', function(){
					
					$(this)
					.velocity('transition.fadeOut',
					{	
						display : 'none',
						duration: duration,
						complete: afterTheScene
					});

				});
				

				parallelTheScene();


		},
		toastMsg: function( msg, status, fixed ){

			var toastStatus, toast, tpl;

			if( status == 'error' ){
				    toastStatus = '.toastError',
					tpl = LJ.tpl.toastError;
			}
			if( status == 'info' ){
				    toastStatus = '.toastInfo',
					tpl = LJ.tpl.toastInfo;
			}
			if( status == 'success'){
				    toastStatus = '.toastSuccess',
					tpl = LJ.tpl.toastSuccess;
			}

			if( typeof status == 'undefined' ){
				toastStatus = '.toastInfo'; 
				tpl = LJ.tpl.toastInfo;
			}			

			if( $( '.toast' ).length === 0 )
			{
				$( tpl ).prependTo('#mainWrap');

				    toast = $( toastStatus );
					toastMsg = toast.find('.toastMsg');
					toastMsg.text( msg );

					toast.velocity('transition.slideDownIn', {
						duration: 600,
						complete: function(){

						  if( typeof(fixed) == 'string' )
						  	return

							toast.velocity('transition.slideUpOut', {
								duration:300,
								delay: fixed || 2000,
								complete: function(){
									toast.remove();
									if( LJ.msgQueue.length != 0 )
										LJ.fn.toastMsg( LJ.msgQueue[0].msg, LJ.msgQueue[0].type );
									    LJ.msgQueue.splice( 0, 1 ) //remove le premier élément
								}
								});						
						  }
					});
			}
			else
			{
				LJ.msgQueue.push({ msg: msg, type: status });
			}
		},
		replaceModalTitle: function( message, classes ){

			$('.modal-title').velocity( LJ.ui.slideUpOutLight, {
				complete: function(){
					$(this).text( message )
						.addClass( classes && classes.join(' ') )
						.velocity( LJ.ui.slideDownInLight );
				}
			});
							 

		},
		showLoaders: function(){

        	$( '.loaderWrap, .m-loaderWrap' ).velocity( 'fadeIn', { duration: 400 });

        },
        hideLoaders: function(){

            $( '.loaderWrap, .m-loaderWrap' ).velocity( 'fadeOut', { duration: 250 });

        },
        displayModal: function( callback ){
			
			$('.modal-curtain')
				.css({'display':'block'})
				.velocity({ 'opacity': [0.4,0] });

			$('.modal-container')
				.find('.modal-container-body').html( LJ.$curtain_loader ).end()
				.css({'display':'block'})
				.velocity({ 'opacity': [1,0] });

			$('.curtain-loader').velocity('transition.fadeIn', { delay: 200, duration: 300});

		},
		hideModal: function(callback){

			$('.row-events-map').show();
			$('.modal-curtain')
				.velocity({ 'opacity': [0,0.4] }, { complete: function(){
					$('.modal-curtain').css({ display: 'none' }); }
			}).delay(500).velocity({
				complete: function(){
					typeof( callback ) == 'function' && callback();
				}
			})

			$('.modal-container')
				.velocity({ 'opacity': [0,1] }, { complete: function(){
					$('.modal-container').css({ display: 'none', height: 'auto', width: 'auto' });
					$(".modal-container-body *:not('.curtain-loader')").remove(); 
				}
			});

			$('.curtain-loader').hide();

		},
		displayInModal: function( options ){

			var options = options || {};

			var call_started = new Date();
			LJ.fn.displayModal();

			var eventName = 'display-content';

			$('.modal-container').css({ width: options.starting_width });
			$('.modal-container').on( eventName, function( e, data ){

				var content = data.html_data;
				var starts_in = LJ.ui.minimum_loading_time - ( new Date() - call_started );
				setTimeout(function(){
					
					var $content = $(content);

					options.custom_classes && options.custom_classes.forEach( function( class_itm ){
						$content.addClass( class_itm );
					});

					options.custom_data && options.custom_data.forEach(function( el ){
						$content.attr('data-'+el.key, el.val );
					}); 

					$content.hide().appendTo('.modal-container-body');

					$content.waitForImages(function(){


						$('.curtain-loader').velocity('transition.fadeOut', { duration: 300 });

						var old_height = $('.modal-container').innerHeight(),
							new_height = old_height + $('.modal-container-body > div').innerHeight() + ( options.fix_height || 0 );

						var old_width = options.starting_width,
							new_width = old_width + $('.modal-container-body > div').innerWidth();


						new_height = new_height > options.max_height ? options.max_height : new_height;

						var duration = new_height > 400 ? 450 : 300;

						$('.modal-container')
							.velocity({ height: [ new_height, old_height ], width: [ new_width, old_width ] }, { 
									duration: duration,
									complete: function(){
										$content.css({'display':'block','opacity':'0'});
										options.predisplay_cb && options.predisplay_cb();
										$content.velocity('transition.fadeIn');
									} 
							});
					});


				}, starts_in );

			});

			if( options.source === 'server' )
			{
				$.ajax({
					method:'GET',
					url: options.url,
					beforeSend: function( req ){
						req.setRequestHeader('x-access-token', LJ.accessToken );
					},
					success: function( data ){
						var html_data = options.render_cb( data );
						$('.modal-container').trigger( eventName, [{ html_data: html_data }]);
					},
					error: function(){
						var html_data = options.error_cb();
						$('.modal-container').trigger( eventName, [{ html_data: html_data }]);
					},
					complete: function(){
						$('.modal-container').unbind( eventName );
					}
				});
			}

			if( options.source === 'facebook' )
			{	
				console.log('Calling Facebook graph api');
				LJ.fn.GraphAPI( options.url, function(res){

					if( !res && !res.data ) {
						console.log('Error, cannot display photos from fb')
						console.log(res);
						var html_data = options.error_cb();
					} else {
						var html_data = options.render_cb( res.data );
					}
					
					$('.modal-container').trigger( eventName, [{ html_data: html_data }]);
					$('.modal-container').unbind( eventName );

				});
			}

			if( options.source === 'local' )
			{
				setTimeout( function(){

					var html_data = options.render_cb();
					$('.modal-container').trigger( eventName, [{ html_data: html_data }]);
					$('.modal-container').unbind( eventName );

				}, LJ.ui.minimum_loading_time );
			}

		},
		bubbleUp: function( el, opts ){
			
			var opts = opts || {};

        	var $el = $(el);

        	if( !opts.stack ){
				if( $el.hasClass('active') ){
					return;
				}				
			}

        	var $bubble = $el.find('.bubble'),
        		n = $bubble.text().trim().length == 0 ? 0 : parseInt( $bubble.text() );

        	$bubble.removeClass('filtered').removeClass('none');

        	var add = opts.add || 1;

        		if( add > 99 ) 
        			return $bubble.text('99+');
			
			var set = opts.set || null;

			if( set == 0 )
				return $bubble.addClass('none').text('');

        	return $bubble.text( set || n + add );
			

        },
        bubbleUpMessage: function( chat_id ){

        	var event_id = chat_id.split('-')[0];
            var group_id = chat_id.split('-')[1];

            LJ.fn.bubbleUp('.row-events-accepted-inview[data-eventid="' + event_id + '"] \
                .event-accepted-chatgroup[data-groupid="' + group_id + '"]');

            // Update the tabview & page title
            LJ.fn.updateTabviewBubbles( event_id );

        },
        // Crawl all messages of each tabview for one event, and update the event tabview bubble
        // along with the page title if nmsg > 0;
        updateTabviewBubbles: function( event_id ){

        	var n_messages_unread = 0;

        	$('.row-events-accepted-inview[data-eventid="' + event_id + '"]')
        		.find('.event-accepted-chatgroup')
        		.each(function( i, chatgroup ){

        			var $chatgroup = $( chatgroup );
        			n_messages_unread += parseInt( $chatgroup.find('.bubble').text() || 0 );

        		});

        	LJ.fn.bubbleUp('.event-accepted-tabview[data-eventid="' + event_id + '"]', {
				set   : n_messages_unread + '',
				stack : true 
        	});

        	if( n_messages_unread == 0 ){
        		document.title = LJ.page_default_title;
        	} else {
        		document.title =  n_messages_unread + "  message(s) - " + LJ.page_default_title;
        	}


        },
       	displayUserProfile: function( facebook_id ){

			LJ.fn.displayInModal({ 
				url: '/api/v1/users/' + facebook_id,
				source: 'server',
				starting_width: 300,
				render_cb: LJ.fn.renderUserProfileInCurtain,
				error_cb: LJ.fn.renderUserProfileInCurtainNone
			});
			
		},
		showLoadersInChat: function( $chat_wrap ){

		$chat_wrap.find('.event-accepted-chat-message').velocity({ opacity: [ 0.3, 1 ]});

            $('<div class="load-chat-history">Chargement des messages...</div>')
                .addClass('super-centered none')
                .appendTo( $chat_wrap )
                .velocity('transition.fadeIn', {
                    duration: 400
                });

            LJ.$spinner_loader_2
                .clone()
                .addClass('super-centered none').css({ "width": "30px", "display": "none" })
                .appendTo( $chat_wrap )
                .velocity('transition.fadeIn',{
                    duraton: 600
                });
		},
		stageUserForWhisper: function( facebook_id, chat_id ){

			var $chat_wrap = $('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');
			var $user_img  = $chat_wrap.find('.event-accepted-chat-message[data-authorid="' + facebook_id + '"] img');

			if( facebook_id == LJ.user.facebook_id ){
				return console.error('Cant whisper to himself');
			}

			if( $chat_wrap.length != 1 ){
				return console.error('Couldnt find chatwrap for whisper stage');
			}

			if( $user_img.length == 0 ){
				return console.error('Couldnt find img to clone for whisper stage');
			}

			// The img tag is already there as whisper
			if( $user_img.hasClass('whispering') ){

				console.log('Already whispering, removing...');

				$user_img.removeClass('whispering');
				$chat_wrap.find('.img-input-whisper[data-authorid="' + facebook_id + '"]')
						  .velocity('transition.slideRightOut', { duration: 500, complete: function(){ 
						  	$(this).remove();
						  	LJ.fn.adjustAllWhisperOnInput( $chat_wrap );
						  } });
			} else {

				console.log('First time whispering, adding...');

				$user_img.addClass('whispering')
				$user_img.first().clone().addClass('img-input-whisper').attr('data-authorid', facebook_id )
						 .appendTo( $chat_wrap.find('.event-accepted-chat-typing') )
						 .velocity('transition.slideLeftIn', { duration: 500 })
						 .click(function(){
						 	LJ.fn.stageUserForWhisper( facebook_id, chat_id );
						 });
						 LJ.fn.adjustAllWhisperOnInput( $chat_wrap );



			}


		},
		adjustAllWhisperOnInput: function( $chat_wrap ){

			var imgs = $chat_wrap.find('.img-input-whisper');

			if( imgs.length == 0 ){
				$chat_wrap.find('.event-accepted-chat-typing').normalify();
				// return;
			}
			if( imgs.length == 1 ){
				$chat_wrap.find('.event-accepted-chat-typing').whisperify();
				//return;
			}

			// Adjust imgs position
			var step = imgs.first().outerWidth( true ) - 5;
			imgs.each(function( i, img ){
				$( img ).css({ "left": ( i * step )+ 'px', "z-index": 10 + i });
			});

			// Adjust input padding
			var new_padding = imgs.length == 0 ? 10 : ( step * imgs.length - 5 );
			$chat_wrap.find('input').css({ "padding-left": new_padding + 'px'});

		},
		whisperifyChatMessages: function( chat_id ){

			var $chat_wrap = $('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');

			if( $chat_wrap.length != 1 ){
				return console.warn('Couldnt find one chatwrap based on id : ' + chat_id );
			}

			$chat_wrap
				.find('.event-accepted-chat-message')
				.each(function( i, chat ){

					var $chat = $(chat);

					if( $chat.attr('data-whisperto') == 'null' || !$chat.attr('data-whisperto') )
						return;
					
					LJ.fn.whisperify({
						whisper_to  : $chat.attr('data-whisperto').split(','),
						facebook_id : $chat.attr('data-authorid')
					})( $chat );

				});

		},
		updateTabviewIconStatus: function(){

			var $tabviews = $('.event-accepted-tabview');

			$tabviews.each(function( i, tab ){

				var event_id = $( tab ).attr('data-eventid');
				var status = LJ.fn.iStatus( event_id );
		    	var icon_status = "star"; // default in case nothing found

			    if( status == "accepted" ){
			    	icon_status = "chat";
			    }

			    if( status == "kicked" || status == "pending" ){
			    	icon_status = "ellipsis";
			    }

			    if( status == "hosting" ){
			    	icon_status = "star-1";
			    }

			    $( tab ).attr('data-status', status );

			});

		},
		displayLink: function( width ){

			var $link = $('.row-events-link');
			if( $link.length ){
				$link.remove();
			}

			$('<div class="row-events-link"></div>').insertAfter('.row-events-preview');
			var $link = $('.row-events-link');

			var $events_preview = $('.row-events-preview');
			var $party_preview  = $('.row-party-preview');

			var offset = $events_preview.outerWidth(true) - $events_preview.css('padding-right').split('px')[0];

			$link.css({ display: 'none', width: '0' })
				 .css({ left: offset, display: 'block' })
				 .css({ width: width || 300 });

		}


	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEvents_Profile: function(){

			LJ.$body.on('click', '.row-informations .row-input', function(){

				var $edit_btn = $('.row-informations').find('i.icon-edit');

				if( $edit_btn.hasClass('active') )return; 
				$edit_btn.click(); 

			});

			$('.modal-container').on('click','.modal-thumb-picture', function(){

				var $self = $(this);

				if( $self.hasClass('active') ){
					return;
				}

				if( $self.attr('src').split('/').slice(-1)[0] == 'placeholder_picture'){
					return 
				}

				var img_place = $self.attr('img-place');
				$('.modal-thumb-picture, .modal-user-picture-hashtag').removeClass('active');
				$self.add( $('.modal-user-picture-hashtag[img-place="'+ img_place +'"]') ).addClass('active');

				var img_version = $self.attr('img-version');

				$('.modal-main-picture').removeClass('active');
				$('.modal-main-picture[img-version="' + img_version + '"]').addClass('active');

			});

			$('.modal-container').on('click', '.facebook-image-item', function(){

				var $self = $(this);

				if( $self.hasClass('active') ){
					$self.removeClass('active');
					$('.modal-container').find('.btn-validate').addClass('btn-validating');
				} else {
					$('.facebook-image-item').removeClass('active')
					$('.modal-container').find('.btn-validate').removeClass('btn-validating');
					$self.addClass('active');
				}

			});

			$('.modal-container').on('click', '.btn-cancel', LJ.fn.hideModal );

			$('.modal-container').on('click', '.btn-validate', function(){

				var $self = $(this);

				if( $self.hasClass('btn-validating') )
					return;

				if( $('.facebook-image-item.active').length != 1 )
					return;

				$self.addClass('btn-validating');

				var url = $('.facebook-image-item.active').find('img').attr('src');
				var img_place = $self.parents('.modal-container-body').children().last().attr('data-img-place');

				LJ.fn.hideModal();

				LJ.fn.updatePictureWithUrl({
						userId    : LJ.user._id,
						img_id    : LJ.user._id + '--' + img_place,  // id_pattern 
						url       : url,
						img_place : img_place
        			}, function( err, data ){

					if( err ){
						return LJ.fn.handleServerError( LJ.text_source["p_picture_upload_error"][ LJ.app_language ] );
					}

					LJ.fn.handleServerSuccess( LJ.text_source["p_picture_upload_success"][ LJ.app_language ] ); 

					var pic = _.find( LJ.user.pictures, function(el){
							return el.img_place == img_place;
						});
					var scope = pic.is_main ? ['profile','thumb'] : ['profile'];

					LJ.fn.replaceImage({
						img_id      : data.img_id,
						img_version : data.img_version,
						img_place   : img_place,
						scope       : scope
					});


				});
				
			});

			LJ.$body.on('mouseover', '#createEvent', function(){
				$('.search-results-places').addClass('open');
			});

			LJ.$body.on('change-user-xp', LJ.fn.updateUserXp );

			LJ.$body.on('click', '.upload-facebook', function(){
				
				var img_place = $(this).parents('.picture').data('img_place');

				LJ.fn.fetchFacebookProfilePicturesAlbumId(function( err, album_id ){

					if( err || !album_id ){
						return console.error('Didnt find album id, cant render pictures...');
					}

					LJ.fn.displayInModal({

						url: album_id + '/photos?fields=images',
						source:'facebook',
						starting_width: 500,
						max_height: 500,
						render_cb: LJ.fn.renderFacebookUploadedPictures,
						error_cb: LJ.fn.renderFacebookUploadedPicturesNone,
						predisplay_cb: function(){
							
							$('.modal-container').find('img.fb').each(function( i, img ){

								// Adjusting all image width or image height for better centering
								var $img = $(img);

								if( $img.height() > $img.width() ){
				                  $img.attr( 'width', '100%' );
				                } else {
				                  $img.attr( 'height', '100%' );
				                }

							});
						},
						custom_data: [{ key: 'img-place', val: img_place }]
					});

				});

			});

			LJ.$body.on('click', '.row-informations .btn-validate', function(){
				if( $(this).hasClass('btn-validating') )
					return;
				$(this).addClass('btn-validating');
				LJ.fn.updateProfile();
			});

			/* Généric ui update of selectable inputs */
			LJ.$body.on('click', '.row-select', function(){
				var $self = $(this);
				if( !$self.parents('.row-select-daddy').hasClass('editing') )
					return ;

				var $selectedType = $self.parents('.row-select-wrap');
				$selectedType.find('.row-select.modified').removeClass('modified');
				$self.addClass('modified');
			
			});


			/* Activate modifications */
			LJ.$body.on('click', '.row-select-daddy .icon-edit:not(.active)', function(){ 

				var $self = $(this);
				var $daddy = $self.parents('.row-select-daddy');

				$self.addClass('active');
				$daddy.addClass('editing');
				
				$daddy
					.find('.row-buttons').velocity('transition.fadeIn',{ duration:600 })
					.end().find('input:not(.readonly)').attr('readonly', false)
					.end().find('.row-input')
					.each( function( i, el ){
						var current_val = $(el).find('input').val(),
					    	current_select_id = $(el).find('.row-select.selected').attr('data-selectid'),
					    	restore_arr = [ current_val, current_select_id ];
					    	restore_arr.forEach(function( val ){
					    		if( val != undefined )
					    			$(el).attr('data-restore', val );
					    	});
					});

				$daddy.find('.row-select.selected').removeClass('selected').addClass('modified');
			});

			/* Cancel ugoing modifications */
			LJ.$body.on('click', '.row-select-daddy .icon-edit.active, .row-select-daddy .btn-cancel', function(){

				var $daddy = $(this).parents('.row-select-daddy');

				$daddy
					.removeClass('editing')
					.find('.icon-edit.active').removeClass('active')
					.end().find('input').attr('readonly',true)
					.end().find('.row-buttons').hide()
					.end().find('.modified').removeClass('modified')
					.end().find('[data-restore]')
					.each(function( i, el ){
						var val = $(el).attr('data-restore')
						$(el).find('input').val( val )
							 .end()
							 .find('[data-selectid="'+val+'"]').addClass('selected');						
					});

			});
			

			LJ.$body.on('click', '.row-pictures .icon-edit:not(.active)', function(){

				var $self = $(this);
				$self.addClass('active').parents('.row-pictures').addClass('editing');

				$('.row-pictures')
					.find('.picture-hashtag input').attr('readonly', false)
					.end().find('.row-buttons').velocity('transition.fadeIn',{ duration:600 })
					.end().find('.picture-edit, .row-pictures .row-buttons').velocity('transition.fadeIn',{ duration: 600 });

			});


			LJ.$body.on('mouseenter', ".row-pictures:not('.editing') .picture", function(){
				if( LJ.state.uploadingImage ) return;
				$(this)
				   .find('.picture-upload')
				   .velocity('stop')
				   .velocity('transition.fadeIn', { duration: 260 });
			});


			LJ.$body.on('mouseleave', ".row-pictures:not('.editing') .picture", function(){
				$(this)
				   .find('.picture-upload')
				   .velocity('stop')
				   .velocity('transition.fadeOut', { duration: 260 });
			});


			LJ.$body.on('click', '.row-pictures .icon-edit.active, .row-pictures .btn-cancel', function(){

				$('.row-pictures')
					.removeClass('editing')
					.find('.icon-edit.active').removeClass('active')
					.end().find('.selected').removeClass('selected')
					.end().find('.picture-hashtag input').attr('readonly',true)
					.end().find('.picture-edit').velocity('transition.fadeOut', { duration: 600 })
					.end().find('.row-buttons').hide();
				return;

			});

			LJ.$body.on('click', '.picture-edit i', function(){

				var $self = $(this);

				if( $self.hasClass('selected') )
					return $self.removeClass('selected');

				if( $self.hasClass('icon-main') ){
					$('.icon-main').removeClass('selected');
					$self.siblings('.icon-delete').removeClass('selected');
					$self.addClass('selected');
					return;
				}

				if( $self.hasClass('icon-delete') ){
					$self.siblings('.icon-main').removeClass('selected');
					$self.addClass('selected');
				}

			});


			LJ.$body.on('focusout', '.picture-hashtag input', function(){
				$(this).val( LJ.fn.hashtagify( $(this).val() ));
			});


			LJ.$body.on('click', '.row-pictures .btn-validate', function(){
				
				var $self = $(this);
				if( $self.hasClass('btn-validating') )
					return;

				var updatedPictures  = [],
					$newMainPicture  = $('.icon-main.selected').parents('.picture'),
					$deletedPictures = $('.icon-trash-empty.selected').parents('.picture');
					$hashtagPictures = $('.picture');
					
					$deletedPictures.each(function( i, el ){
						var $el = $( el ),
							picture = { 
								img_place: $el.data('img_place'),
								action: "delete"
							};
							updatedPictures.push( picture );
					});

					$newMainPicture.each(function( i, el ){
						var $el = $( el ),
							picture = {
								img_place: $el.data('img_place'),
								action: "mainify"
							};
							updatedPictures.push( picture );
					});

					$hashtagPictures.each(function( i, el ){
						var new_hashtag = $('.picture[data-img_place="'+i+'"]').find('.picture-hashtag').find('input').val();
						var $el = $( el ),
							picture = {
								img_place: $el.data('img_place'),
								action: "hashtag",
								new_hashtag: LJ.fn.hashtagify( new_hashtag )
							};
							updatedPictures.push( picture );
					});

				if( updatedPictures.length == 0 ){
					return LJ.fn.toastMsg( LJ.text_source["to_noupload_necessary"][ LJ.app_language ], "error" );
				}

				csl('Emitting update pictures (all)');
				$self.addClass('btn-validating');

				var eventName = 'me/update-pictures',
					data = { userId: LJ.user._id, updatedPictures: updatedPictures },
					cb = {
						success: LJ.fn.handleUpdatePicturesSuccess						
					};

				LJ.fn.showLoaders();
				LJ.fn.say( eventName, data, cb );

			});



		},
		initCloudinary: function( cloudTags ){

			$.cloudinary.config( LJ.cloudinary.uploadParams );
			//LJ.tpl.$placeholderImg = $.cloudinary.image( LJ.cloudinary.placeholder_id, LJ.cloudinary.displayParamsEventAsker );

			if( cloudTags.length != $('.upload_form').length )
				return LJ.fn.toastMsg('Inconsistence data', 'error');

			$('.upload_form').each(function(i,el){
				$(el).html('').append( cloudTags[i] );
			});

			$('.cloudinary-fileupload')

				.click( function(e){

					if( LJ.state.uploadingImage ){
						e.preventDefault();
						LJ.fn.toastMsg( LJ.text_source["to_upload_singlepic"][ LJ.app_language ], "info" );
						return;
					}

					LJ.state.uploadingimg_id      = $(this).parents('.picture').data('img_id');
					LJ.state.uploadingimg_version = $(this).parents('.picture').data('img_version');
					LJ.state.uploadingimg_place   = $(this).parents('.picture').data('img_place');
				})

				.bind('fileuploadstart', function(){

					LJ.state.uploadingImage = true;
					LJ.fn.showLoaders();

				})
				.bind('fileuploadprogress', function( e, data ){

  					$('.progress_bar').css('width', Math.round( (data.loaded * 100.0) / data.total ) + '%');

				}).bind('cloudinarydone',function( e, data ){

					LJ.state.uploadingImage = false;

					var img_id      = data.result.public_id;
					var img_version = data.result.version;
					var img_place   = LJ.state.uploadingimg_place;

                    var eventName = 'me/update-picture',
                    	data = {
                    				_id              : LJ.user._id,
									img_id           : img_id,
									img_version      : img_version,
									img_place        : img_place
								}
						, cb = {
							success: function( data ){
								sleep( LJ.ui.artificialDelay, function(){
									$('.progress_bar').velocity('transition.slideUpOut', {
									 	duration: 400,
									 	complete: function(){
									 		$(this).css({ width: '0%' })
									 			   .velocity('transition.slideUpIn');
										} 
									});

									LJ.fn.toastMsg( LJ.text_source["to_upload_pic_success"][ LJ.app_language ], 'info');

									var user = data.user;

									// Mise à jour interne sinon plein d'update sur la même photo bug
									var pic = _.find( LJ.user.pictures, function(el){
										return el.img_place == img_place;
									});
									pic.img_version = img_version;
									var scope = pic.is_main ? ['profile','thumb'] : ['profile'];

	  								LJ.fn.replaceImage({
	  									img_id: img_id, 
	  									img_version: img_version,
	  									img_place: img_place,
	  									scope: scope
	  								});
	  								
	  							});
							},
							error: function( xhr ){
								delog('Error saving image identifiers to the base');
							}
						};

						LJ.fn.showLoaders();
						// no_header : cloudinary wont let us add custom header
						LJ.fn.say( eventName, data, cb );

  				}).cloudinary_fileupload();
  				

		},
		fetchFacebookProfilePicturesAlbumId: function( callback, next_page ){

			console.log('Fetching facebook profile picture album id...');

			var album_url = next_page || "/me?fields=albums{name,id}";
			var album_id  = null;

			LJ.fn.GraphAPI( album_url, function(res){

				var albums = res.albums.data;
				albums.forEach(function( album ){

					if( album.name == "Profile Pictures" ){
						album_id = album.id;
					}

				});

				if( !album_id && res.albums.paging && res.albums.paging.cursor && res.albums.paging.cursor.next ){

					var next = res.albums.paging.cursor.next;

					console.log('Didnt find on first page, trying with next page : ' + next );
					return LJ.fn.fetchFacebookProfilePicturesAlbumId( callback, next );
				}

				if( !album_id && res.albums.paging && res.albums.paging.cursor && !res.albums.paging.cursor.next ){
					return callback('Couldnt find album id, no next page to browse', null );
				}

				console.log('Album id found, ' + album_id );
				return callback( null, album_id );

			});


		},
		updateProfile: function(){

			var _id 		  = LJ.user._id,
				$container    = $('.row-informations')
				name  		  = $container.find('.row-name input').val(),
				age   		  = $container.find('.row-age input').val(),
				job			  = $container.find('.row-job input').val(),
				drink 		  = $container.find('.drink.modified').attr('data-selectid'),
				mood          = $container.find('.mood.modified').attr('data-selectid');

			if( LJ.user.status == 'new' ){
				LJ.user.status = 'idle';
			}

			var profile = {
				userId		  : _id,
				age 		  : age,
				name 		  : name,
				job           : job,
				drink 		  : drink,
				mood          : mood,
				status        : LJ.user.status
			};
				csl('Emitting update profile');

			var eventName = 'me/update-profile',
				data = profile
				, cb = {
					success: LJ.fn.handleUpdateProfileSuccess,
					error: function( xhr ){
						sleep( LJ.ui.artificialDelay, function(){
							LJ.fn.handleServerError( JSON.parse( xhr.responseText ).msg );
						});
					}
				};

				LJ.fn.showLoaders();
				LJ.fn.say( eventName, data, cb );


		},
		handleUpdateProfileSuccess: function( data ){

			csl('update profile success received, user is : \n' + JSON.stringify( data.user, null, 4 ) );
			var user = data.user;

			sleep( LJ.ui.artificialDelay, function(){

				$('.row-informations').removeClass('editing')
					.find('.row-buttons').velocity('transition.fadeOut', {duration: 600 })
					.end().find('.icon-edit').removeClass('active')
					.end().find('.btn-validating').removeClass('btn-validating');

				$('#thumbName').text( user.name );
				LJ.fn.handleServerSuccess('Vos informations ont été modifiées', '.row-informations');
		
			});


		},
		displayPictureHashtags: function(){

        	for( var i = 0; i < LJ.user.pictures.length; i ++ ){
				var hashtag = LJ.user.pictures[i].hashtag;
				$('.picture-hashtag').eq(i).find('input').val(hashtag);        		
        	}


        },
        handleUpdatePicturesSuccess: function( data ){

	        setTimeout(function(){ 

				LJ.user.pictures = data.pictures;
				var currentimg_place = $('.main-picture').data('img_place');

				$('.row-pictures').find('.icon-edit').click();

				$('.btn-validating').removeClass('btn-validating');
				$('.icon.selected').removeClass('selected');

				/* Changement de la main picture et update du header associé */
				var mainImg = LJ.fn.findMainImage();
				if( currentimg_place != mainImg.img_place ){
					$('.main-picture').removeClass('main-picture');
					$('.picture[data-img_place="'+mainImg.img_place+'"]').addClass('main-picture');
					mainImg.scope = ['thumb'];
					LJ.fn.replaceImage( mainImg );
				}

				/* Mise à jour temps réelle des nouvelles photos */
				for( var i = 0; i < LJ.user.pictures.length; i++){
					LJ.user.pictures[i].scope = ['profile'];
					if( $('.picture[data-img_place="'+i+'"]').attr('data-img_version') != LJ.user.pictures[i].img_version )
					LJ.fn.replaceImage( LJ.user.pictures[i] );
				}

				/* Mise à jour des hashtags*/
				LJ.fn.displayPictureHashtags();

				LJ.fn.handleServerSuccess('Vos photos ont été mises à jour');
	        	
	        }, LJ.ui.artificialDelay );

        },
        /* Permet de remplacer les images du profile*/
		replaceImage: function( options ){

			var img_id      = options.img_id,
				img_version = options.img_version,
				img_place   = options.img_place,
				scope       = options.scope;

			if( !img_id || !img_version || !img_place || !scope ){
				// return console.warn('missing parameter, cant replace image...');
			}

			if( scope.indexOf('profile') != -1 )
			{
				var $element = $('.picture').eq( img_place ),
					display_settings = LJ.cloudinary.profile.me.params;

				if( display_settings == undefined ){
					return console.error("Options d'affichage manquantes");
				}

				display_settings.version = img_version;

				/* En cas de photos identiques, prend celle la plus à gauche avec .first()*/
				var $previousImg = $element.find('img'),
					$newImg      = $.cloudinary.image( img_id, display_settings );

					$newImg.addClass('mainPicture').addClass('none');
					$previousImg.parent().prepend( $newImg )
								.find('.picture-upload').velocity('transition.fadeOut', { duration: 250 });
	 													
					$previousImg.velocity('transition.fadeOut', { 
						duration: 600,
						complete: function(){
							$newImg.velocity('transition.fadeIn', { duration: 700, complete: function(){} });
							$newImg.parent().attr('data-img_id', img_id );
							$newImg.parent().attr('data-img_version', img_version );
							$previousImg.remove();
						} 
					});
			}

			if( scope.indexOf('thumb') != -1 )
			{
				display_settings = LJ.cloudinary.displayParamsHeaderUser;
				display_settings.version = img_version;

				var previousImg = $('#thumbWrap').find('img'),
					newImg      = $.cloudinary.image( img_id, display_settings );
					newImg.addClass('none');

					$('#thumbWrap .imgWrap').prepend( newImg );

					previousImg.fadeOut(700, function(){
						$(this).remove();
						newImg.fadeIn(700);
					});
			}

		},
		updatePictureWithUrl: function( options, callback ){

			var eventName = 'me/update-picture-fb',
				data = options,
				cb = {
					success: function( data ){
						callback( null, data );
					},
					error: function( xhr ){
						callback( xhr, null );
					}
				};

			LJ.fn.showLoaders();
			LJ.fn.say( eventName, data, cb );

		},
		setLocalStoragePreferences: function(){

			var auto_login = LJ.user.app_preferences.ux.auto_login;

			if( auto_login == 'yes' ){

				var preferences = {
					facebook_id : LJ.user.facebook_id,
					long_lived_tk: LJ.user.facebook_access_token.long_lived,
					tk_valid_until: LJ.user.facebook_access_token.long_lived_valid_until
				};

				window.localStorage.setItem('preferences', JSON.stringify( preferences ));					
			}

			if( auto_login == 'no' ){
				window.localStorage.removeItem('preferences');
			}

		},
		handleFetchAndSyncFriends: function( data ){

			var friends = data.friends;
			LJ.user.friends = friends;

			if( friends.length == 0 )
				return; 

			var html = '';
			friends.forEach( function( friend ){
				html += LJ.fn.renderFriendInProfile( friend );
			});

			$('.row-friends').find('.row-body').html( html );

		}

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		handleDomEvents_Settings: function(){



			LJ.$body.on('click', '.row-contact .btn-validate', function(){

				// If user changes email, need to update mail in mailchimp and in cache for alerts

				var contact_email   = $('#email_contact').val();
				if( !LJ.fn.isEmail( contact_email ) ){
					return LJ.fn.toastMsg( LJ.text_source["err_settings_invalid_email"][ LJ.app_language ], 'error');
				}

				var $self = $(this);
				if( $self.hasClass('btn-validating') )
					return;

				$self.addClass('btn-validating');

				var _id             = LJ.user._id;
				var $container      = $('#settingsWrap');

				var app_preferences = LJ.user.app_preferences;

				// Invitation & newsletters
				var invitations   = $container.find('[data-propid="invitations"].selected').attr('data-selectid');
				var newsletter    = $container.find('[data-propid="newsletter"].selected').attr('data-selectid');
				app_preferences.email.invitations = invitations;
				app_preferences.email.newsletter  = newsletter;

				// Alerts
				var accepted_in     = $container.find('[data-propid="accepted_in"].selected').attr('data-selectid');
				var message_unread  = $container.find('[data-propid="message_unread"].selected').attr('data-selectid');
				var min_frequency   = $container.find('[data-propid="min_frequency"].selected').attr('data-selectid');
				app_preferences.alerts.message_unread = message_unread;
				app_preferences.alerts.accepted_in    = accepted_in;
				app_preferences.alerts.min_frequency  = min_frequency;


				var data = {
					contact_email   : contact_email,
					app_preferences : app_preferences
				};

				csl('Emitting update settings [contact]');
				LJ.fn.showLoaders();

				var eventName = 'me/update-settings-contact',
				data = data
				, cb = {
					success: LJ.fn.handleUpdateSettingsContactSuccess,
					error: function( xhr ){
						sleep( LJ.ui.artificialDelay, function(){
							LJ.fn.handleServerError( JSON.parse( xhr.responseText ).msg );
						});
					}
				};

				LJ.fn.say( eventName, data, cb );
				
			});


			LJ.$body.on('click', '.row-ux .btn-validate', function(){

				var contact_email   = $('#email_contact').val();
				if( !LJ.fn.isEmail( contact_email ) ){
					return LJ.fn.toastMsg( LJ.text_source["err_settings_invalid_email"][ LJ.app_language ], 'error');
				}

				var $self = $(this);
				if( $self.hasClass('btn-validating') )
					return;

				$self.addClass('btn-validating');

				var _id             = LJ.user._id;
				var $container      = $('.row-ux');

				var auto_login      = $container.find('.modified[data-propid="auto_login"]').attr('data-selectid');
				var message_readby  = $container.find('.modified[data-propid="message_readby"]').attr('data-selectid');

				var app_preferences = LJ.user.app_preferences;

				app_preferences.ux.auto_login     = auto_login;
				app_preferences.ux.message_readby = message_readby

				var data = {
					userId		    : _id,
					app_preferences : app_preferences
				};

				csl('Emitting update settings [ui]');
				LJ.fn.showLoaders();

				var eventName = 'me/update-settings-ux',
				data = data
				, cb = {
					success: LJ.fn.handleUpdateSettingsUxSuccess,
					error: function( xhr ){
						sleep( LJ.ui.artificialDelay, function(){
							LJ.fn.handleServerError( JSON.parse( xhr.responseText ).msg );
						});
					}
				};

				LJ.fn.say( eventName, data, cb );
				
			});

			LJ.$body.on('click', '.row-news .btn-validate', function(){

				var contact_email   = $('#email_contact').val();
				if( !LJ.fn.isEmail( contact_email ) ){
					return LJ.fn.toastMsg( LJ.text_source["err_settings_invalid_email"][ LJ.app_language ], 'error');
				}

				var $self = $(this);
				if( $self.hasClass('btn-validating') )
					return;

				$self.addClass('btn-validating');

				var _id 		  = LJ.user._id;
				var $container    = $('.row-news');

				var invitations   = $container.find('[data-propid="invitations"].modified').attr('data-selectid');
				var newsletter    = $container.find('[data-propid="newsletter"].modified').attr('data-selectid');

				var app_preferences = LJ.user.app_preferences;

				app_preferences.email.invitations = invitations;
				app_preferences.email.newsletter  = newsletter;

				var data = {
					userId		    : _id,
					contact_email   : contact_email,
					app_preferences : app_preferences
				};

				csl('Emitting update settings [mailinglists]');
				LJ.fn.showLoaders();

				var eventName = 'me/update-settings-mailinglists',
				data = data
				, cb = {
					success: LJ.fn.handleUpdateSettingsMailingListsSuccess,
					error: function( xhr ){
						sleep( LJ.ui.artificialDelay, function(){
							LJ.fn.handleServerError( JSON.parse( xhr.responseText ).msg );
						});
					}
				};

				LJ.fn.say( eventName, data, cb );
				
			});

			LJ.$body.on('click', '.row-alerts .btn-validate', function(){

				var contact_email   = $('#email_contact').val();
				if( !LJ.fn.isEmail( contact_email ) ){
					return LJ.fn.toastMsg( LJ.text_source["err_settings_invalid_email"][ LJ.app_language ], 'error');
				}

				var $self = $(this);
				if( $self.hasClass('btn-validating') )
					return;

				$self.addClass('btn-validating');

				var _id             = LJ.user._id;
				var $container      = $('.row-alerts');

				var accepted_in     = $container.find('[data-propid="accepted_in"].modified').attr('data-selectid');
				var message_unread  = $container.find('[data-propid="message_unread"].modified').attr('data-selectid');
				var min_frequency   = $container.find('[data-propid="min_frequency"].modified').attr('data-selectid');
				
				var app_preferences = LJ.user.app_preferences;

				app_preferences.alerts.message_unread = message_unread;
				app_preferences.alerts.accepted_in    = accepted_in;
				app_preferences.alerts.min_frequency  = min_frequency;

				var data = {
					userId		    : _id,
					app_preferences : app_preferences
				};

				// Mail needed to be store in cache along with other settings regarding alerts
				// to know where to send the alert
				// @519481
				data.contact_email = LJ.user.contact_email;


				csl('Emitting update settings [notifications]');
				LJ.fn.showLoaders();

				var eventName = 'me/update-settings-alerts',
					data = data
					, cb = {
						success: LJ.fn.handleUpdateSettingsAlertsSuccess,
						error: function( xhr ){
							sleep( LJ.ui.artificialDelay, function(){
								LJ.fn.handleServerError( JSON.parse( xhr.responseText ).msg );
							});
						}
					};

					LJ.fn.say( eventName, data, cb );
					
			});

			LJ.$body.on('click', '#delete-profile', function(){

				LJ.fn.displayInModal({
					source: 'local',
					render_cb: LJ.fn.renderDeleteProfile,
					starting_width: 200
				});

			});

			LJ.$body.on('click', '.delete-profile-wrap .btn-validate', function(){

				var $self = $(this);

				csl('Emitting delete profile...');
				$self.addClass('btn-validating');

				var eventName = 'me/delete',
					data = { userId: LJ.user._id },
					cb = {
						success: LJ.fn.handleDeleteProfileSuccess						
					};

				LJ.fn.showLoaders();
				LJ.fn.say( eventName, data, cb );

			});

		},
		handleUpdateSettingsUxSuccess: function( data ){

			csl('update settings ux success received' );

			sleep( LJ.ui.artificialDelay, function(){

				$('.row-ux').removeClass('editing')
					.find('.row-buttons').velocity('transition.fadeOut', {duration: 600 })
					.end().find('.icon-edit').removeClass('active')
					.end().find('.btn-validating').removeClass('btn-validating');

				LJ.user = data.user;

				LJ.fn.setLocalStoragePreferences();
				LJ.fn.handleServerSuccess('Vos informations ont été modifiées', '.row-ux');
		
			});


		},
		handleUpdateSettingsMailingListsSuccess: function( data ){

			csl('update settings mailing lists success received' );

			sleep( LJ.ui.artificialDelay, function(){

				$('.row-news').removeClass('editing')
					.find('.row-buttons').velocity('transition.fadeOut', {duration: 600 })
					.end().find('.icon-edit').removeClass('active')
					.end().find('.btn-validating').removeClass('btn-validating');

				LJ.user = data.user;

				LJ.fn.handleServerSuccess('Vos informations ont été modifiées', '.row-news');
		
			});


		},
		handleUpdateSettingsAlertsSuccess: function( data ){

			csl('update settings alerts success received' );

			sleep( LJ.ui.artificialDelay, function(){

				$('.row-alerts').removeClass('editing')
					.find('.row-buttons').velocity('transition.fadeOut', {duration: 600 })
					.end().find('.icon-edit').removeClass('active')
					.end().find('.btn-validating').removeClass('btn-validating');

				LJ.user = data.user;

				LJ.fn.handleServerSuccess('Vos informations ont été modifiées', '.row-alerts');
		
			});


		},
		handleUpdateSettingsContactSuccess: function( data ){

			csl('update settings contact success received' );

			sleep( LJ.ui.artificialDelay, function(){

				$('#email_contact').prop( 'readonly', true );

				$('.row-contact').removeClass('editing')
					.find('.row-buttons').velocity('transition.fadeOut', {duration: 600 })
					.end().find('.icon-edit').removeClass('active')
					.end().find('.btn-validating').removeClass('btn-validating');

				LJ.user = data.user;

				LJ.fn.handleServerSuccess('Vos informations ont été modifiées', '.row-contact');
		
			});


		},
		handleDeleteProfileSuccess: function( data ){

			console.log('Profile successfully deleted... ');

			// Kill local storage variables
			window.localStorage.removeItem('preferences');

			$('#mainWrap').velocity('transition.fadeOut', {
				duration: 3000
			});

			setTimeout(function(){

				var text = LJ.fn.renderGoodbye();

				$('.curtain').velocity('transition.fadeIn', {
					duration: 3000,
					complete: function(){
						$('.curtain')
							.children().remove().end()
							.append( text )
							.find('.goodbye')
							.velocity('transition.fadeIn', {
								duration: 2000,
								complete: function(){
									$(this).velocity('transition.fadeOut', {
										duration: 2000,
										delay: 2000,
										complete: function(){
											document.location = '/home';
										}
									})
								}
							});
					}
				});
			}, 1000);

		}

	});	


	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		subscribeToChannels: function( user ){
        	
          //registering default channels (me and public);
        	LJ.subscribed_channels = {};
        	_.keys( user.channels ).forEach(function( channel_key ){
        		LJ.subscribed_channels[ channel_key ] = LJ.pusher.subscribe( LJ.user.channels[ channel_key ]);
        	});

	        LJ.subscribed_channels.public_chan.bind('new event created', LJ.fn.pushNewEvent );
	        LJ.subscribed_channels.public_chan.bind('new party created', LJ.fn.pushNewParty );
	        LJ.subscribed_channels.public_chan.bind('new event status' , LJ.fn.pushNewEventStatus );

	        LJ.subscribed_channels.me.bind('new request group', LJ.fn.pushNewGroup_Group );
	        LJ.subscribed_channels.me.bind('new chat whisper', LJ.fn.pushNewChatWhisper );

	        LJ.subscribed_channels.public_chan.bind('new oversize message', function(data){ console.warn('Didnt receive pusher message (oversized)'); })
	        LJ.subscribed_channels.public_chan.bind('new test', LJ.fn.pushNewTest );

   		 },
   		 joinChatChannel: function( event_id, chat_id ){

   		 	LJ.subscribed_channels[ event_id ][ chat_id ] = LJ.pusher.subscribe( 'presence-' + chat_id );

   		 	 // Notify @other hosts and target group that his status has changed
			LJ.subscribed_channels[ event_id ][ chat_id ].bind('new group status', LJ.fn.pushNewGroupStatus );
			LJ.subscribed_channels[ event_id ][ chat_id ].bind('new request host', LJ.fn.pushNewGroup_Host );

			// Notify @all chatters that new message/readby notification has arrived
			LJ.subscribed_channels[ event_id ][ chat_id ].bind('new chat message', LJ.fn.pushNewChatMessage );
			LJ.subscribed_channels[ event_id ][ chat_id ].bind('new chat readby' , LJ.fn.pushNewChatReadBy  );

			LJ.subscribed_channels[ event_id ][ chat_id ].bind('pusher:member_added', LJ.fn.pushNewUserConnected );
			LJ.subscribed_channels[ event_id ][ chat_id ].bind('pusher:member_removed', LJ.fn.pushNewUserDisconnected );
			LJ.subscribed_channels[ event_id ][ chat_id ].bind('pusher:subscription_succeeded', LJ.fn.pushMembersConnectionStatus );


   		 },
		 joinEventChannel: function( evt ){

		 	var event_id 	  = evt._id;
		 	var hosts_channel = '';

            if( !evt )
                return console.error('Cant join channel, event is null');

            delete LJ.subscribed_channels[ event_id ];

            /* For everyone */
            LJ.subscribed_channels[ event_id ] = LJ.pusher.subscribe( event_id );

            /* For hosts - subscribe to all channels, including host one */
            if( LJ.fn.iHost( _.pluck( evt.hosts, 'facebook_id') ) ){

            	hosts_channel = LJ.fn.makeChatId({ event_id: event_id, group_id: "hosts" });

            	var chat_ids = [ hosts_channel ];
            	evt.groups.forEach(function( group ){

            		var group_id = LJ.fn.makeGroupId( group.members_facebook_id );
            		var chat_id  = LJ.fn.makeChatId({ event_id: event_id, group_id: group_id });

            		chat_ids.push( chat_id );

            	});

            	chat_ids.forEach(function( chat_id ){
            		LJ.fn.joinChatChannel( event_id, chat_id );
            	});

	           	// Notify @all hosts that someone has requested to join
	            LJ.subscribed_channels[ evt._id ][ hosts_channel ].bind('new request', LJ.fn.pushNewGroup );

            }
            /* For others, subscribe only to one channel */
            else {

            	var group_id = LJ.fn.findMyGroupIdFromEvent( evt );
            	var chat_id  = LJ.fn.makeChatId({ event_id: event_id, group_id: group_id });            	
            	
            	LJ.fn.joinChatChannel( event_id, chat_id );
            	
            }

            LJ.subscribed_channels[ event_id ].bind('new test event', function(data){ console.log(data); });
            LJ.subscribed_channels[ event_id ].bind('new oversize message', function(data){ console.warn('Didnt receive pusher message (oversized)'); })

        },
        pushNewTest: function( data ){
        	console.log('Test succeed!');
        	console.log(data);
        },
		pushNewEvent: function( evt ){

			if( !evt )
				return console.error('No arguments were passed (pushNewEvent)')

			/* Default message */
			var message = evt.hosts[0].name + ' propose un meefore le ' + moment( evt.begins_at ).format('DD/MM');

			/* Internal */
			LJ.fn.updateEventCache( evt );

			/* External */
            LJ.fn.displayEventMarker( evt );
            LJ.fn.displayPartyMarker_Event( evt );

            /* Did a friend tag me as host ? */
            if( LJ.fn.iHost( _.pluck( evt.hosts, 'facebook_id' ) ) ){
            	message = 'Un ami vous a ajouté en tant qu\'organisateur de son before!';

            	if( !$('#events').hasClass('menu-item-active') ){
            		LJ.fn.addEventInviewAndTabview( evt, { hide: true } );
            	} else {
            		LJ.fn.addEventInviewAndTabview( evt );
            	}
            	
            	LJ.fn.joinEventChannel( evt );
            	LJ.fn.fetchMe();
            }

			/* Notifications bubble */
			LJ.fn.bubbleUp('#events', { stack: true });
			LJ.fn.toastMsg( message, 'info', 5000 );

		},
		pushNewParty: function( party ){

			console.log('Pushing new party ('+party._id+')');

			// Update cache
			LJ.cache.parties.push( party );

			// Display on map
			LJ.fn.displayPartyMarker_Party( party );

		},
		pushNewGroup_Host: function( data ){
			
			console.log('Pushing new group [host] in event : ' + data.event_id );

			var group             = data.group;
			var event_id      	  = data.event_id;
			var hosts_facebook_id = data.hosts_facebook_id;

			if( !event_id || !group ){
				console.log( event_id ); console.log( group );
				return console.error('Missing group and/or evt, cant add request');
			}

			/* Event received from "host only" channel */
			LJ.fn.toastMsg( LJ.text_source["to_host_push_new_group"][ LJ.app_language ], "info");

			// Render elements 
			var $chat_wrap_html = $( LJ.fn.renderChatWrap_Host_Group( event_id, group ) );
			var $chatgroup_html = $( LJ.fn.renderChatGroup_Group( group ) );
			var $group_html     = $( LJ.fn.renderUsersGroupWithToggle( group ) );

			var $event_wrap = $('.row-events-accepted-inview[data-eventid="' + event_id + '"]');

			// Append to dom
			$chat_wrap_html.insertAfter( $event_wrap.find('.event-accepted-chat-wrap').last()   );
			$chatgroup_html.insertAfter( $event_wrap.find('.event-accepted-chatgroup').last()   );
			$group_html.insertAfter(     $event_wrap.find('.event-accepted-users-group').last() );


			// Save chatpanes references
			var group_id = group.group_id;
			var chat_id  = LJ.fn.makeChatId({ event_id: event_id, group_id: group_id });
			var $chat    = $('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');

			var jsp = $chat.find('.event-accepted-chat-messages').jScrollPane({ stickToBottom: true });

			LJ.jsp_api[ event_id ].chats[ chat_id ] = jsp.data('jsp');

			// Adjust chatpanes for visuals
			LJ.fn.adjustAllChatPanes();

			// Bubbleup someone wanted to join
			LJ.fn.bubbleUpMessage( chat_id );

			// Finally join channel to listen for further events
			LJ.fn.joinChatChannel( event_id, chat_id );
			
		},
		pushNewGroup_Group: function( data ){

			console.log('Pushing new group [group] in event : ' + data.event_id );

			var group             = data.group;
			var event_id      	  = data.event_id;
			var hosts_facebook_id = data.hosts_facebook_id;

			if( !event_id || !group ){
				console.log( event_id ); console.log( group );
				return console.error('Missing group and/or evt, cant add request');
			}

			/* Event received from *me* channel */
			/* Happens exactly the same as if user had asked himself, fetch event and refresh view */
			LJ.fn.toastMsg( LJ.text_source["to_push_new_request_by_friend"][ LJ.app_language ], "info" );
			LJ.fn.fetchEventById( event_id, LJ.fn.handleFetchEventById );

		},
		pushNewEventStatus: function( data ){

			delog('Pushing new event status for event id : ' + data.event_id );

			var status            = data.status;
			var event_id          = data.event_id;
			var hosts_facebook_id = data.hosts_facebook_id;

			if( !event_id ){
				return console.error('Cant push new status without event!');
			}
			
			// Message pour les autres organisateurs
			if( LJ.fn.iHost( hosts_facebook_id ) ){

				LJ.fn.toastMsg( LJ.text_source["to_push_new_status_by_friend"][ LJ.app_language ], "info");

				$('.row-events-accepted-inview[data-eventid="' + event_id + '"]')
					.find('.event-inview-settings .settings-group-status .active').removeClass('active').end()
					.find('.event-inview-settings [data-status="' + status + '"]').addClass('active');
			}

			// For everyone 
			LJ.fn.refreshEventStatusOnMap( event_id, status );


		},
		pushNewGroupStatus: function( data ){
 			
			var group    = data.group;
			var status   = group.status;
			var event_id = data.event_id;
			var chat_id  = data.chat_id;
			var hosts_facebook_id = data.hosts_facebook_id

			delog('Pushing new group status : ' + status + ' for event : ' + event_id );
			LJ.fn.fetchEventById( event_id, function( err, evt ){
				LJ.fn.updateEventCache( evt );
				LJ.fn.updateTabviewIconStatus();
			}); // Fetch event

			// Message pour les membres du groupes
			if( LJ.fn.iGroup( group.members_facebook_id ) ){

				var is_open = "open";
				if( data.status == "suspended" ){
					is_open = "full";
				};

				// Update global status of their event
				$('.row-events-accepted-inview[data-eventid="' + event_id + '"]').attr('data-status', status );

				if( status == "accepted" ){
					LJ.fn.toastMsg( LJ.text_source["to_push_request_accepted"][ LJ.app_language ], 'info', 3500 );

					_.find( LJ.event_markers, function(el){ 
						return el.id == event_id 
					}).marker.setIcon( LJ.cloudinary.markers.accepted[ is_open ].url );

					LJ.fn.addChatLine({
						chat_id     : chat_id,
						msg         : LJ.text_source["ch_bot_msg_group_accepted"][ LJ.app_language ],
						name        : LJ.bot_profile.name,
						img_id      : LJ.bot_profile.img_id,
						facebook_id : LJ.bot_profile.facebook_id,
						sent_at 	: new Date(),
						class_names : ["bot"]
					});
					
				}
				if( status == "kicked" ){
					// LJ.fn.toastMsg( LJ.text_source["ch_bot_msg_group_pending"][ LJ.app_language ], 'info', 3500 );

					_.find( LJ.event_markers, 
						function(el){ return el.id == event_id 
					}).marker.setIcon( LJ.cloudinary.markers.pending[ is_open ].url );

					LJ.fn.addChatLine({
						chat_id     : chat_id,
						msg         : LJ.text_source["ch_bot_msg_group_pending"][ LJ.app_language ],
						name        : LJ.bot_profile.name,
						img_id      : LJ.bot_profile.img_id,
						facebook_id : LJ.bot_profile.facebook_id,
						sent_at 	: new Date(),
						class_names : ["bot"]
					});
				}

			}

			// Message pour les autres organisateurs
			if( LJ.fn.iHost( hosts_facebook_id ) ){

				if( status == "accepted" ){

					LJ.fn.toastMsg( LJ.text_source["to_push_group_validated_by_friend"][ LJ.app_language ], 'info', 3500 );

					 LJ.fn.addChatLine({
		                chat_id     : LJ.fn.makeChatId({ event_id: event_id, group_id: group_id }),
		                msg         : LJ.text_source["to_event_group_accepted"][ LJ.app_language ].replace('%s', group.name ),
		                name        : LJ.bot_profile.name,
		                img_id      : LJ.bot_profile.img_id,
		                facebook_id : LJ.bot_profile.facebook_id,
		                sent_at     : new Date(),
		                class_names : ["bot"]

		            });  
					
				}
				if( status == "kicked" ){

					LJ.fn.toastMsg( LJ.text_source["to_push_group_suspended_by_friend"][ LJ.app_language ], 'info', 3500 );

					LJ.fn.addChatLine({
		                chat_id     : LJ.fn.makeChatId({ event_id: event_id, group_id: group_id }),
		                msg         : LJ.text_source["to_event_group_pending"][ LJ.app_language ].replace('%s', group.name ),
		                name        : LJ.bot_profile.name,
		                img_id      : LJ.bot_profile.img_id,
		                facebook_id : LJ.bot_profile.facebook_id,
		                sent_at     : new Date(),
		                class_names : ["bot"]

		            });  
				}

			}

			// For everyone in the event channel
			LJ.fn.updateGroupStatusUI( event_id, group );
			
		},	
		pushNewChatMessage: function( data ){

			console.log('Pushing chat line...')

			chat_id = data.chat_id;
			var $wrap = $('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');

			if( data.facebook_id == LJ.user.facebook_id ){

				var start_opacity = $wrap.find('.sending').css('opacity');
				$wrap.find('.sending')
					.first() // in case multiple messages were sent quickly
					.removeClass('sending')
					.css({ opacity: start_opacity })
					.velocity({ opacity: [ 1, start_opacity ] }, { duration: 200 });
			} else {
				LJ.fn.addChatLine( data );
				/*if( $wrap.find('input').is(':focus') ){
					LJ.fn.sendReadBy({
						name : LJ.user.name,
						id   : id
					});
				}*/
			}

			LJ.fn.bubbleUpMessage( chat_id );

		},
		pushNewChatWhisper: function( data ){

			console.log('Pushing chat whisper...')

			chat_id = data.chat_id;
			var $wrap = $('.event-accepted-chat-wrap[data-chatid="' + chat_id + '"]');

			if( data.facebook_id == LJ.user.facebook_id ){

				var start_opacity = $wrap.find('.sending').css('opacity');
				$wrap.find('.sending')
					.first() // in case multiple messages were sent quickly
					.removeClass('sending')
					.css({ opacity: start_opacity })
					.velocity({ opacity: [ 1, start_opacity ] }, { duration: 200 });
			} else {
				LJ.fn.addChatLineWhisper( data );
				/*if( $wrap.find('input').is(':focus') ){
					LJ.fn.sendReadBy({
						name : LJ.user.name,
						id   : id
					});
				}*/
			}

			LJ.fn.bubbleUpMessage( chat_id );

		},
		pushNewChatReadBy: function( data ){

			var $readby = $('.row-events-accepted-inview[data-eventid="' + data.id + '"]').find('.readby'); 
			var readby  = data.readby;

			/* On ajoute le name de la personne à la liste de l'attr data-names */
			var current_names = $readby.attr('data-names');

			if( typeof current_names == 'string' && current_names.length > 0 ){
            	$readby.attr('data-names', readby );
			}

			LJ.fn.displayReadBy( data );
		},
		pushNewUserConnected: function( user ){

			var facebook_id = user.id;

			console.log('User ' + facebook_id + ' has connected to the channel');

			$('.event-accepted-user[data-userid="' + facebook_id + '"]')
				.find('.event-accepted-user-state')
				.removeClass('offline').addClass('online');

		},
		pushNewUserDisconnected: function( user ){

			var facebook_id = user.id;

			console.log('User ' + facebook_id + ' has disconnected to the channel');

			$('.event-accepted-user[data-userid="' + facebook_id + '"]')
				.find('.event-accepted-user-state')
				.removeClass('online').addClass('offline');
		},
		pushMembersConnectionStatus: function( members ){

			members.each(function( member ){
				LJ.fn.pushNewUserConnected( member );
			});

		}

	});

	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		parseError: function( xhr ){
			
			var res = xhr && xhr.responseText && JSON.parse( xhr.responseText );

			var errors    = res.errors;
			var namespace =  res.namespace;

			if( !errors || !namespace )
				return console.error('Couldnt parse the response from ajax call');

			return res;

		},
		handleApiError: function( err ){

            console.error('api error');

            var res = LJ.fn.parseError(err);
            console.log(res);

            for( var i = 0; i < res.errors.length; i++ ){
                if( res.errors[i].data ){
                    return LJ.fn.displayError( res.namespace, res.errors[i].data );
                }
            }

            return LJ.fn.displayError( res.namespace, res.errors[0] );

        },
        displayError: function( namespace, err_data ){
			
        	if( !namespace )
        		return console.error('Cant handle error without a namespace');

			var handlers = {
				"create_event"  : LJ.fn.handleErrorMessageCreateEvent,
                "request_event" : LJ.fn.handleErrorMessageRequest,
                "event_status"  : LJ.fn.handleErrorMessageEventStatus,
                "chat_fetch"    : LJ.fn.handleErrorChatFetch,
                "chat_message"  : LJ.fn.handleErrorChatMessage,
                "chat_readby"   : LJ.fn.handleErrorChatReadby,
                "pusher_auth"   : LJ.fn.handleErrorPusherAuth
			};

			return handlers[ namespace ]( err_data );
        	
        },
        handleErrorMessageCreateEvent: function( err_data ){


        	if( err_data.err_id == 'missing_parameter' ){
        		var message = LJ.text_source["err_create_mp_" + err_data.parameter][ LJ.app_language ];
        		return LJ.fn.replaceModalTitle( message );
        	}

            if( err_data.err_id == 'n_hosts' || err_data.err_id == 'array_too_long' ){
                var message = LJ.text_source["err_create_n_hosts"] && LJ.text_source["err_create_n_hosts"][ LJ.app_language ] || LJ.text_source["err_create_mp_default"][ LJ.app_language ];
                return LJ.fn.replaceModalTitle( message.replace('%min', LJ.settings.app.min_hosts ).replace('%max', LJ.settings.app.max_hosts ));
            }

            // static errors
        	if( err_data.err_id == 'already_hosting' ){
        		if( err_data.host_names[0] === LJ.user.name ){
                    var message = LJ.text_source["err_create_hosting_me"][ LJ.app_language ];
                } else {
                    var message = LJ.text_source["err_create_hosting_other"][ LJ.app_language ].replace('%s', err_data.host_names[0] );
                }
                return LJ.fn.replaceModalTitle( message );   
        	}

            var message =  LJ.text_source["err_create_" + err_data.err_id] && LJ.text_source["err_create_" + err_data.err_id][ LJ.app_language ] || LJ.text_source["err_unknown"][ LJ.app_language ];
        	return LJ.fn.replaceModalTitle( message );

        },
        handleErrorMessageRequest: function( err_data ){


            if( err_data.err_id == 'missing_parameter' ){
                var message = LJ.text_source["err_request_mp_" + err_data.parameter] && LJ.text_source["err_request_mp_" + err_data.parameter][ LJ.app_language ] || LJ.text_source["err_request_mp_default"][ LJ.app_language ]
                return LJ.fn.replaceModalTitle( message );
            }

            if( err_data.err_id == 'n_group' ){
                var message = LJ.text_source["err_request_n_group"][ LJ.app_language ];
                return LJ.fn.replaceModalTitle( message.replace('%min', LJ.settings.app.min_group ).replace('%max', LJ.settings.app.max_group ) );
            }

            // dynamic errors (from database)
            if( err_data.err_id == 'already_there' ){

                var member = err_data.already_there[0];
                var who_msg  = member.id  === LJ.user.facebook_id ?
                                    LJ.text_source["err_request_already_there_me"][ LJ.app_language ] :
                                    LJ.text_source["err_request_already_there_other"][ LJ.app_language ]
                                    .replace('%s', _.find( LJ.user.friends, function(friend){
                                        return friend.facebook_id == member.id; 
                                    }).name );

                var role_msg = member.role === 'host' ?
                               LJ.text_source["err_request_already_there_role_host"][ LJ.app_language ] :
                               LJ.text_source["err_request_already_there_role_asker"][ LJ.app_language ];

                var message = who_msg + LJ.text_source["err_request_already_there"][ LJ.app_language ] + role_msg;
                return LJ.fn.replaceModalTitle( message );
            }

            if( err_data.err_id == 'name_bad_length' ){
                var message = LJ.text_source['err_request_name_bad_length'][ LJ.app_language ];
                return LJ.fn.replaceModalTitle( message.replace('%min', err_data.min ).replace('%max', err_data.max ) );
            }

            if( err_data.err_id == 'message_bad_length' ){
                var message = LJ.text_source['err_request_message_bad_length'][ LJ.app_language ];
                return LJ.fn.replaceModalTitle( message.replace('%min', err_data.min ).replace('%max', err_data.max ) );
            }

            var message =  LJ.text_source["err_request_" + err_data.err_id][ LJ.app_language ] && LJ.text_source["err_request_" + err_data.err_id][ LJ.app_language ] || LJ.text_source["err_unknown"][ LJ.app_language ];
            return LJ.fn.replaceModalTitle( message );


        },
        handleErrorMessageEventStatus: function( err_data ){

            LJ.fn.hideLoaders();
            LJ.fn.toastMsg( LJ.text_source["to_default_error"][ LJ.app_language ], 'error');
            $('.btn-validating').removeClass('btn-validating');

        },
        handleErrorChatMessage: function( err_data ){

            var message = LJ.text_source["err_chat_" + err_data.err_id ] && LJ.text_source["err_chat_" + err_data.err_id ][ LJ.app_language ] || LJ.text_source["err_unknown"][ LJ.app_language ];
            return LJ.fn.toastMsg( message, "error" );

        },
        handleErrorChatFetch: function( err_data ){

            var message = LJ.text_source["err_chat_" + err_data.err_id ] && LJ.text_source["err_chat_" + err_data.err_id ][ LJ.app_language ] || LJ.text_source["err_unknown"][ LJ.app_language ];
            return LJ.fn.toastMsg( message, "error" );

        },
        handleErrorChatReadby: function( err_data ){

            var message = LJ.text_source["err_chat_" + err_data.err_id ] && LJ.text_source["err_chat_" + err_data.err_id ][ LJ.app_language ] || LJ.text_source["err_unknown"][ LJ.app_language ];
            return LJ.fn.toastMsg( message, "error" );

        },
        handleErrorPusherAuth: function( err_data ){

            var message =  LJ.text_source["err_pusher_" + err_data.err_id ] && LJ.text_source["err_pusher_" + err_data.err_id ][ LJ.app_language ] || LJ.text_source["err_unknown"][ LJ.app_language ];
            return console.warn( message );

        }

	});
LJ.text_source = _.merge( LJ.text_source || {}, {

   country_af: {
      "en": "Afghanistan",
      "fr": "Afghanistan"
   },
   country_ax: {
      "en": "Åland Islands",
      "fr": "Åland"
   },
   country_al: {
      "en": "Albania",
      "fr": "Albanie"
   },
   country_dz: {
      "en": "Algeria",
      "fr": "Algérie"
   },
   country_as: {
      "en": "American Samoa",
      "fr": "Samoa Américaines"
   },
   country_ad: {
      "en": "Andorra",
      "fr": "Andorre"
   },
   country_ao: {
      "en": "Angola",
      "fr": "Angola"
   },
   country_ai: {
      "en": "Anguilla",
      "fr": "Anguilla"
   },
   country_aq: {
      "en": "Antarctica",
      "fr": "Antarctique"
   },
   country_ag: {
      "en": "Antigua and Barbuda",
      "fr": "Antigua-et-Barbuda"
   },
   country_ar: {
      "en": "Argentina",
      "fr": "Argentine"
   },
   country_am: {
      "en": "Armenia",
      "fr": "Arménie"
   },
   country_aw: {
      "en": "Aruba",
      "fr": "Aruba"
   },
   country_au: {
      "en": "Australia",
      "fr": "Australie"
   },
   country_at: {
      "en": "Austria",
      "fr": "Autriche"
   },
   country_az: {
      "en": "Azerbaijan",
      "fr": "Azerbaïdjan"
   },
   country_bs: {
      "en": "Bahamas",
      "fr": "Bahamas"
   },
   country_bh: {
      "en": "Bahrain",
      "fr": "Bahreïn"
   },
   country_bd: {
      "en": "Bangladesh",
      "fr": "Bangladesh"
   },
   country_bb: {
      "en": "Barbados",
      "fr": "Barbade"
   },
   country_by: {
      "en": "Belarus",
      "fr": "Biélorussie"
   },
   country_be: {
      "en": "Belgium",
      "fr": "Belgique"
   },
   country_bz: {
      "en": "Belize",
      "fr": "Bélize"
   },
   country_bj: {
      "en": "Benin",
      "fr": "Bénin"
   },
   country_bm: {
      "en": "Bermuda",
      "fr": "Bermudes"
   },
   country_bt: {
      "en": "Bhutan",
      "fr": "Bhoutan"
   },
   country_bo: {
      "en": "Bolivia",
      "fr": "Bolivie"
   },
   country_ba: {
      "en": "Bosnia and Herzegovina",
      "fr": "Bosnie-Herzégovine"
   },
   country_bw: {
      "en": "Botswana",
      "fr": "Botswana"
   },
   country_bv: {
      "en": "Bouvet Island",
      "fr": "Île Bouvet"
   },
   country_br: {
      "en": "Brazil",
      "fr": "Brésil"
   },
   country_io: {
      "en": "British Indian Ocean Territory",
      "fr": "Territoire britannique de l'océan Indien"
   },
   country_bn: {
      "en": "Brunei Darussalam",
      "fr": "Brunei"
   },
   country_bg: {
      "en": "Bulgaria",
      "fr": "Bulgarie"
   },
   country_bf: {
      "en": "Burkina Faso",
      "fr": "Burkina Faso"
   },
   country_bi: {
      "en": "Burundi",
      "fr": "Burundi"
   },
   country_kh: {
      "en": "Cambodia",
      "fr": "Cambodge"
   },
   country_cm: {
      "en": "Cameroon",
      "fr": "Cameroun"
   },
   country_ca: {
      "en": "Canada",
      "fr": "Canada"
   },
   country_cv: {
      "en": "Cape Verde",
      "fr": "Cap-Vert"
   },
   country_ky: {
      "en": "Cayman Islands",
      "fr": "Îles Caïmans"
   },
   country_cf: {
      "en": "Central African Republic",
      "fr": ""
   },
   country_td: {
      "en": "Chad",
      "fr": "Tchad"
   },
   country_cl: {
      "en": "Chile",
      "fr": "Chili"
   },
   country_cn: {
      "en": "China",
      "fr": "Chine"
   },
   country_cx: {
      "en": "Christmas Island",
      "fr": "Île Christmas"
   },
   country_cc: {
      "en": "Cocos (Keeling) Islands",
      "fr": "Îles Cocos"
   },
   country_co: {
      "en": "Colombia",
      "fr": "Colombie"
   },
   country_km: {
      "en": "Comoros",
      "fr": "Comores"
   },
   country_cg: {
      "en": "Congo",
      "fr": "Congo"
   },
   country_cd: {
      "en": "Congo, The Democratic Republic of the",
      "fr": "Congo, République Démocratique du"
   },
   country_ck: {
      "en": "Cook Islands",
      "fr": "Îles Cook"
   },
   country_cr: {
      "en": "Costa Rica",
      "fr": "Costa Rica"
   },
   country_ci: {
      "en": "Ivory Coast",
      "fr": "Côte d’Ivoire"
   },
   country_hr: {
      "en": "Croatia",
      "fr": "Croatie"
   },
   country_cu: {
      "en": "Cuba",
      "fr": "Cuba"
   },
   country_cy: {
      "en": "Cyprus",
      "fr": "Chypre"
   },
   country_cz: {
      "en": "Czech Republic",
      "fr": "République tchèque"
   },
   country_dk: {
      "en": "Denmark",
      "fr": "Danemark"
   },
   country_dj: {
      "en": "Djibouti",
      "fr": "Djibouti"
   },
   country_dm: {
      "en": "Dominica",
      "fr": "Dominique"
   },
   country_do: {
      "en": "Dominican Republic",
      "fr": "République dominicaine"
   },
   country_ec: {
      "en": "Ecuador",
      "fr": "Équateur"
   },
   country_eg: {
      "en": "Egypt",
      "fr": "Égypte"
   },
   country_sv: {
      "en": "El Salvador",
      "fr": "Salvador"
   },
   country_gq: {
      "en": "Equatorial Guinea",
      "fr": "Guinée équatoriale"
   },
   country_er: {
      "en": "Eritrea",
      "fr": "Érythrée"
   },
   country_ee: {
      "en": "Estonia",
      "fr": "Estonie"
   },
   country_et: {
      "en": "Ethiopia",
      "fr": "Ethiopie"
   },
   country_fk: {
      "en": "Falkland Islands (Malvinas)",
      "fr": "Îles Malouines"
   },
   country_fo: {
      "en": "Faroe Islands",
      "fr": "Îles Féroé"
   },
   country_fj: {
      "en": "Fiji",
      "fr": "Fidji"
   },
   country_fi: {
      "en": "Finland",
      "fr": "Finlande"
   },
   country_fr: {
      "en": "France",
      "fr": "France"
   },
   country_gf: {
      "en": "French Guiana",
      "fr": "Guinée française"
   },
   country_pf: {
      "en": "French Polynesia",
      "fr": "Polynésie française"
   },
   country_tf: {
      "en": "French Southern Territories",
      "fr": ""
   },
   country_ga: {
      "en": "Gabon",
      "fr": "Gabon"
   },
   country_gm: {
      "en": "Gambia",
      "fr": "Gambie"
   },
   country_ge: {
      "en": "Georgia",
      "fr": "Géorgie"
   },
   country_de: {
      "en": "Germany",
      "fr": "Allemagne"
   },
   country_gh: {
      "en": "Ghana",
      "fr": "Ghana"
   },
   country_gi: {
      "en": "Gibraltar",
      "fr": "Gibraltar"
   },
   country_gr: {
      "en": "Greece",
      "fr": "Grèce"
   },
   country_gl: {
      "en": "Greenland",
      "fr": "Greenland"
   },
   country_gd: {
      "en": "Grenada",
      "fr": "Grenade"
   },
   country_gp: {
      "en": "Guadeloupe",
      "fr": "Guadeloupe"
   },
   country_gu: {
      "en": "Guam",
      "fr": "Guam"
   },
   country_gt: {
      "en": "Guatemala",
      "fr": "Guatemala"
   },
   country_gg: {
      "en": "Guernsey",
      "fr": "Guernesey"
   },
   country_gn: {
      "en": "Guinea",
      "fr": "Guinée"
   },
   country_gw: {
      "en": "Guinea-Bissau",
      "fr": "Guinée-Bissau"
   },
   country_gy: {
      "en": "Guyana",
      "fr": "Guyane"
   },
   country_ht: {
      "en": "Haiti",
      "fr": "Haïti"
   },
   country_hm: {
      "en": "Heard Island and Mcdonald Islands",
      "fr": "Îles Heard-et-MacDonald"
   },
   country_va: {
      "en": "Holy See (Vatican City State)",
      "fr": "Vatican"
   },
   country_hn: {
      "en": "Honduras",
      "fr": "Honduras"
   },
   country_hk: {
      "en": "Hong Kong",
      "fr": "Hong Kong"
   },
   country_hu: {
      "en": "Hungary",
      "fr": "Hongrie"
   },
   country_is: {
      "en": "Iceland",
      "fr": "Islande"
   },
   country_in: {
      "en": "India",
      "fr": "Inde"
   },
   country_id: {
      "en": "Indonesia",
      "fr": "Indonésie"
   },
   country_ir: {
      "en": "Iran",
      "fr": "Iran’"
   },
   country_iq: {
      "en": "Iraq",
      "fr": "Irak"
   },
   country_ie: {
      "en": "Ireland",
      "fr": "Irlande"
   },
   country_im: {
      "en": "Isle of Man",
      "fr": "Île de Man"
   },
   country_il: {
      "en": "Israel",
      "fr": "Israël"
   },
   country_it: {
      "en": "Italy",
      "fr": "Italie"
   },
   country_jm: {
      "en": "Jamaica",
      "fr": "Jamaïque"
   },
   country_jp: {
      "en": "Japan",
      "fr": "Japon"
   },
   country_je: {
      "en": "Jersey",
      "fr": "Jersey"
   },
   country_jo: {
      "en": "Jordan",
      "fr": "Jordanie"
   },
   country_kz: {
      "en": "Kazakhstan",
      "fr": "Kazakhstan"
   },
   country_ke: {
      "en": "Kenya",
      "fr": "Kenya"
   },
   country_ki: {
      "en": "Kiribati",
      "fr": "Kiribati"
   },
   country_kp: {
      "en": "Korea, Democratic People's Republic of",
      "fr": "Corée du Nord"
   },
   country_kr: {
      "en": "Korea, Republic of",
      "fr": "Corée du Sud"
   },
   country_kw: {
      "en": "Kuwait",
      "fr": "Koweït"
   },
   country_kg: {
      "en": "Kyrgyzstan",
      "fr": "Kirghizistan"
   },
   country_la: {
      "en": "Laos",
      "fr": "Laos"
   },
   country_lv: {
      "en": "Latvia",
      "fr": "Lettonie"
   },
   country_lb: {
      "en": "Lebanon",
      "fr": "Liban"
   },
   country_ls: {
      "en": "Lesotho",
      "fr": "Lesotho"
   },
   country_lr: {
      "en": "Liberia",
      "fr": "Liberia"
   },
   country_ly: {
      "en": "Libya",
      "fr": "Libye"
   },
   country_li: {
      "en": "Liechtenstein",
      "fr": "Liechtenstein"
   },
   country_lt: {
      "en": "Lithuania",
      "fr": ""
   },
   country_lu: {
      "en": "Luxembourg",
      "fr": "Lituanie"
   },
   country_mo: {
      "en": "Macao",
      "fr": "Macao"
   },
   country_mk: {
      "en": "Macedonia",
      "fr": "Macédoine"
   },
   country_mg: {
      "en": "Madagascar",
      "fr": "Madagascar"
   },
   country_mw: {
      "en": "Malawi",
      "fr": "Malawi"
   },
   country_my: {
      "en": "Malaysia",
      "fr": "Malaisie"
   },
   country_mv: {
      "en": "Maldives",
      "fr": "Maldives"
   },
   country_ml: {
      "en": "Mali",
      "fr": "Mali"
   },
   country_mt: {
      "en": "Malta",
      "fr": "Malte"
   },
   country_mh: {
      "en": "Marshall Islands",
      "fr": "Îles Marshall"
   },
   country_mq: {
      "en": "Martinique",
      "fr": "Martinique"
   },
   country_mr: {
      "en": "Mauritania",
      "fr": "Mauritanie"
   },
   country_mu: {
      "en": "Mauritius",
      "fr": "Maurice"
   },
   country_yt: {
      "en": "Mayotte",
      "fr": "Mayotte"
   },
   country_mx: {
      "en": "Mexico",
      "fr": "Mexique"
   },
   country_fm: {
      "en": "Micronesia",
      "fr": "Micronésie"
   },
   country_md: {
      "en": "Moldova",
      "fr": "Moldavie"
   },
   country_mc: {
      "en": "Monaco",
      "fr": "Monaco"
   },
   country_mn: {
      "en": "Mongolia",
      "fr": "Mongolie"
   },
   country_ms: {
      "en": "Montserrat",
      "fr": "Montserrat"
   },
   country_ma: {
      "en": "Morocco",
      "fr": "Maroc"
   },
   country_mz: {
      "en": "Mozambique",
      "fr": "Mozambique"
   },
   country_mm: {
      "en": "Myanmar",
      "fr": "Myanmar"
   },
   country_na: {
      "en": "Namibia",
      "fr": "Namibie"
   },
   country_nr: {
      "en": "Nauru",
      "fr": "Nauru"
   },
   country_np: {
      "en": "Nepal",
      "fr": "Népal"
   },
   country_nl: {
      "en": "Netherlands",
      "fr": "Pays-Bas"
   },
   country_an: {
      "en": "Netherlands Antilles",
      "fr": "Antilles néerlandaises"
   },
   country_nc: {
      "en": "New Caledonia",
      "fr": "Nouvelle-Calédonie"
   },
   country_nz: {
      "en": "New Zealand",
      "fr": "Nouvelle-Zélande"
   },
   country_ni: {
      "en": "Nicaragua",
      "fr": "Nicaragua"
   },
   country_ne: {
      "en": "Niger",
      "fr": "Niger"
   },
   country_ng: {
      "en": "Nigeria",
      "fr": "Nigéria"
   },
   country_nu: {
      "en": "Niue",
      "fr": "Niue"
   },
   country_nf: {
      "en": "Norfolk Island",
      "fr": "Île Norfolk"
   },
   country_mp: {
      "en": "Northern Mariana Islands",
      "fr": "Îles Mariannes du Nord"
   },
   country_no: {
      "en": "Norway",
      "fr": "Norvège"
   },
   country_om: {
      "en": "Oman",
      "fr": "Oman"
   },
   country_pk: {
      "en": "Pakistan",
      "fr": "Pakistan"
   },
   country_pw: {
      "en": "Palau",
      "fr": "Palau"
   },
   country_ps: {
      "en": "Palestine",
      "fr": "Palestine"
   },
   country_pa: {
      "en": "Panama",
      "fr": "Panama"
   },
   country_pg: {
      "en": "Papua New Guinea",
      "fr": "Papouasie-Nouvelle-Guinée"
   },
   country_py: {
      "en": "Paraguay",
      "fr": "Paraguay"
   },
   country_pe: {
      "en": "Peru",
      "fr": "Pérou"
   },
   country_ph: {
      "en": "Philippines",
      "fr": "Philippines"
   },
   country_pn: {
      "en": "Pitcairn",
      "fr": "Île Pitcairn"
   },
   country_pl: {
      "en": "Poland",
      "fr": "Pologne"
   },
   country_pt: {
      "en": "Portugal",
      "fr": "Portugal"
   },
   country_pr: {
      "en": "Puerto Rico",
      "fr": "Puerto Rico"
   },
   country_qa: {
      "en": "Qatar",
      "fr": "Qatar"
   },
   country_re: {
      "en": "Reunion",
      "fr": "La Réunion"
   },
   country_ro: {
      "en": "Romania",
      "fr": "Roumanie"
   },
   country_ru: {
      "en": "Russia",
      "fr": "Russie"
   },
   country_rw: {
      "en": "Rwanda",
      "fr": "Rwanda"
   },
   country_sh: {
      "en": "Saint Helena",
      "fr": "Sainte-Hélène"
   },
   country_kn: {
      "en": "Saint Kitts and Nevis",
      "fr": "Saint-Christophe-et-Niévès"
   },
   country_lc: {
      "en": "Saint Lucia",
      "fr": "Sainte-Lucie"
   },
   country_pm: {
      "en": "Saint Pierre and Miquelon",
      "fr": "Saint-Pierre-et-Miquelon"
   },
   country_vc: {
      "en": "Saint Vincent and the Grenadines",
      "fr": "Saint-Vincent-et-les-Grenadines"
   },
   country_ws: {
      "en": "Samoa",
      "fr": "Samoa"
   },
   country_sm: {
      "en": "San Marino",
      "fr": "Saint-Marin"
   },
   country_st: {
      "en": "Sao Tome and Principe",
      "fr": "Sao Tomé-et-Principe"
   },
   country_sa: {
      "en": "Saudi Arabia",
      "fr": "Arabie saoudite"
   },
   country_sn: {
      "en": "Senegal",
      "fr": "Sénégal"
   },
   country_cs: {
      "en": "Serbia and Montenegro",
      "fr": "Serbie-et-Monténégro"
   },
   country_sc: {
      "en": "Seychelles",
      "fr": "Seychelles"
   },
   country_sl: {
      "en": "Sierra Leone",
      "fr": "Sierra Leone"
   },
   country_sg: {
      "en": "Singapore",
      "fr": "Singapour"
   },
   country_sk: {
      "en": "Slovakia",
      "fr": "Slovaquie"
   },
   country_si: {
      "en": "Slovenia",
      "fr": "Slovénie"
   },
   country_sb: {
      "en": "Solomon Islands",
      "fr": "Îles Salomon"
   },
   country_so: {
      "en": "Somalia",
      "fr": "Somalie"
   },
   country_za: {
      "en": "South Africa",
      "fr": "Afrique du Sud"
   },
   country_gs: {
      "en": "South Georgia and the South Sandwich Islands",
      "fr": "Géorgie du Sud-et-les Îles Sandwich du Sud"
   },
   country_es: {
      "en": "Spain",
      "fr": "Espagne"
   },
   country_lk: {
      "en": "Sri Lanka",
      "fr": "Sri Lanka"
   },
   country_sd: {
      "en": "Sudan",
      "fr": "Soudan"
   },
   country_sr: {
      "en": "Suriname",
      "fr": "Suriname"
   },
   country_sj: {
      "en": "Svalbard and Jan Mayen",
      "fr": "Île Jan Mayen"
   },
   country_sz: {
      "en": "Swaziland",
      "fr": "Swaziland"
   },
   country_se: {
      "en": "Sweden",
      "fr": "Suède"
   },
   country_ch: {
      "en": "Switzerland",
      "fr": "Suisse"
   },
   country_sy: {
      "en": "Syria",
      "fr": "Syrie"
   },
   country_tw: {
      "en": "Taiwan",
      "fr": "Taïwan"
   },
   country_tj: {
      "en": "Tajikistan",
      "fr": "Tajikistan"
   },
   country_tz: {
      "en": "Tanzania",
      "fr": "Tanzanie"
   },
   country_th: {
      "en": "Thailand",
      "fr": "Thaïlande"
   },
   country_tl: {
      "en": "Timor-Leste",
      "fr": "Timor oriental"
   },
   country_tg: {
      "en": "Togo",
      "fr": "Togo"
   },
   country_tk: {
      "en": "Tokelau",
      "fr": "Tokelau"
   },
   country_to: {
      "en": "Tonga",
      "fr": "Tonga"
   },
   country_tt: {
      "en": "Trinidad and Tobago",
      "fr": "Trinité-et-Tobago"
   },
   country_tn: {
      "en": "Tunisia",
      "fr": "Tunisie"
   },
   country_tr: {
      "en": "Turkey",
      "fr": "Turquie"
   },
   country_tm: {
      "en": "Turkmenistan",
      "fr": "Turkménistan"
   },
   country_tc: {
      "en": "Turks and Caicos Islands",
      "fr": "îles Turques-et-Caïques"
   },
   country_tv: {
      "en": "Tuvalu",
      "fr": "Tuvalu"
   },
   country_ug: {
      "en": "Uganda",
      "fr": "Ouganda"
   },
   country_ua: {
      "en": "Ukraine",
      "fr": "Ukraine"
   },
   country_ae: {
      "en": "United Arab Emirates",
      "fr": "Émirats arabes unis"
   },
   country_gb: {
      "en": "United Kingdom",
      "fr": "Royaume-Uni"
   },
   country_us: {
      "en": "United States",
      "fr": "États-Unis"
   },
   country_um: {
      "en": "United States Minor Outlying Islands",
      "fr": "Îles mineures éloignées des États-Unis"
   },
   country_uy: {
      "en": "Uruguay",
      "fr": "Uruguay"
   },
   country_uz: {
      "en": "Uzbekistan",
      "fr": "Ouzbékistan"
   },
   country_vu: {
      "en": "Vanuatu",
      "fr": "Vanuatu"
   },
   country_ve: {
      "en": "Venezuela",
      "fr": "Venezuela"
   },
   country_vn: {
      "en": "Viet Nam",
      "fr": "Viêt Nam"
   },
   country_vg: {
      "en": "Virgin Islands, British",
      "fr": "Îles Vierges britanniques"
   },
   country_vi: {
      "en": "Virgin Islands, U.S.",
      "fr": "Îles Vierges américaines"
   },
   country_wf: {
      "en": "Wallis and Futuna",
      "fr": "Wallis et Futuna"
   },
   country_eh: {
      "en": "Western Sahara",
      "fr": "Sahara occidental"
   },
   country_ye: {
      "en": "Yemen",
      "fr": "Yémen"
   },
   country_zm: {
      "en": "Zambia",
      "fr": "Zambie"
   },
   country_zw: {
      "en": "Zimbabwe",
      "fr": " Zimbabwé"
   }
});





	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		setAppLanguage: function( country_code, container ){

			var supported_languages = ['fr','en'];

			if( supported_languages.indexOf( country_code ) == -1 ){
				return console.error('This language (' + country_code + ') is not currently supported');
			}

			LJ.app_language = country_code;
			
			var container = container || $('body');

			container.find('[data-lid]').each(function( i, el ){

				var $el = $(el);
				var type = $el.prop('nodeName').toLowerCase();
				var lid = $el.attr('data-lid');

				var translated_text = LJ.text_source[ lid ][ country_code ];

				if( /placeholder/i.test( lid ) ){
					$el.attr('placeholder', translated_text );
					
					if( $('#searchbar').find('input').length > 1 ){
						$('#searchbar').find('input').first().attr('placeholder', null);
					}
					return;
				}

				$el.html( translated_text );

				return;

			});

		}

	});



	window.LJ.fn = _.merge( window.LJ.fn || {}, {

		initAnalytics: function(){

			LJ.fn.initGoogleAnalytics();

		},
		initGoogleAnalytics: function(){

			// Google Analytics Tracking Landing Page
			$('body').on('ga', function( e, data ){
				console.log( data );
				ga('send', data.hit_type, data.url );
			});

			var tracked_elements = [];

			// Elements relative to the Landing Page
			tracked_elements.concat([
			
				{ el : '#landingWrap #facebook_connect', url: '/landingpage/connection-top' },
				{ el : '#landingWrap .landing-map-button', url: '/landingpage/connection-bottom' },
				{ el : '#landingWrap .moving-arrow', url: '/landingpage/movingarrow' },
				{ el : '#landingWrap .pick-lang[data-code="fr"]:not(.active)', url: '/landingpage/changelang/fr' },
				{ el : '#landingWrap .pick-lang[data-code="en"]:not(.active)', url: '/landingpage/changelang/en'},
				{ el : '#landingWrap [href="/legals"', url: '/landingpage/legals' },
				{ el : '#landingWrap #contact', url: '/landingpage/contact' },
				{ el : '#landingWrap .icon-facebook', url: '/landingpage/socials/facebook '},
				{ el : '#landingWrap .icon-twitter', url: '/landingpage/socials/twitter '},
				{ el : '#landingWrap .icon-youtube', url: '/landingpage/socials/youtube '},
				{ el : '#landingWrap .icon-instagram', url: '/landingpage/socials/instagram '}
				
			]);

			// Elements relative to the Main Page
			tracked_elements.concat([

				{ el : '#profile', url: '/mainpage/profile' },
				{ el : '#events', url: '/mainpage/events' },
				{ el : '#settings', url: '/mainpage/settings' }

			]);

			tracked_elements.forEach(function( element ){

				var $el = $( element.el );

				if( $el.length == 0 ){
					return console.warn('Cant track element ' + element.el + ', doesnt exist');
				}

				// Send to Google Analytics
				$el.on('click', function(){
					console.log('Tracked a click');
					ga('send', 'pageview', element.url );
				});
				
			});

		}

	});

	
	window.LJ.fn = _.merge( window.LJ.fn || {}, {

        	initIntro: function(){

        		LJ.intro_steps = [

        			{ 
        				id: "init",
        			 	next_id: "intro_1",
        			 	mode: "cover",
        			 	callback: function(){

        			 		LJ.fn.showWelcomeLintro();
        			 		LJ.map.setZoom(14);
                            // Clear preview to prevent problems when replaying tour
                            google.maps.event.trigger( LJ.map, 'click' );

                            // Make sure doest call on undefined values
                            LJ.event_markers = LJ.event_markers || [];
                            LJ.party_markers = LJ.party_markers || [];

        			 		LJ.event_markers.forEach(function(marker){
        			 			marker.marker.setOpacity(0);
        			 		});
        			 		LJ.party_markers.forEach(function(marker){
        			 			marker.marker.setOpacity(0);
        			 		});

        			 		$('.btn-welcome').click(function(){
			    				$('.lintro-next').click();
			    			});

			    			$('.welcome-skip').click(function(){
			    				LJ.fn.clearIntro();
			    				LJ.fn.endIntro(function(){
			    					//
			    				});
			    			});
        			 	}
        			},
        			{ 
        				id: "intro_1",
        				next_id: "intro_2",
        				duration: 5000,
        				mode: "area",
        				upper_el: ".row-events-filters",
        				lower_el: ".row-events-accepted-tabview",
                        text: LJ.text_source["intro_text_1"][ LJ.app_language ],
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        				}
        			},
        			{
        				id: "intro_2",
        				next_id: "intro_3",
        				duration: 5000,
        				mode: "idem",
                        text: LJ.text_source["intro_text_2"][ LJ.app_language ],
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					LJ.fn.displayEventMarker( LJ.intro.event_data, { cache: 'event_markers_intro' } );
        				}
        			},
        			{
        				id: "intro_3",
        				next_id: "intro_4",
        				duration: 5000,
        				mode: "idem",
        				text_align:"center",
                        text: LJ.text_source["intro_text_3"][ LJ.app_language ],
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					LJ.fn.displayPartyMarker_Party( LJ.intro.party_data, { cache: 'party_markers_intro' } );
        				}
        			},
        			{
        				id: "intro_4",
        				next_id: "intro_5",
        				duration: 5000,
        				mode: "idem",
                        text: LJ.text_source["intro_text_4"][ LJ.app_language ],
        				callback: function(){
        					LJ.fn.showTextLintro(this);
                            LJ.fn.displayPathToParty({ evt: LJ.intro.event_data });
        				}
        			},
        			{
        				id: "intro_5",
        				next_id: "intro_6",
        				duration: 8000,
        				mode: "idem",
                        text: LJ.text_source["intro_text_5"][ LJ.app_language ],
        				callback: function(){
        					LJ.fn.showTextLintro(this);

        					LJ.intro.events_data.forEach(function( evt, i ){

        						var url = LJ.cloudinary.markers.base.open.url;

        						if( i == 0 || i == 2 ) url = LJ.cloudinary.markers.pending.open.url;
        						if( i == 1 || i == 3 ) url = LJ.cloudinary.markers.accepted.open.url;
        						if( i == 4 ) url = LJ.cloudinary.markers.base.full.url;

        						LJ.fn.displayEventMarker( evt,  { url: url, cache: 'event_markers_intro' } );

        					});

        					
                            LJ.intro.events_data.forEach(function( evt ){
                            	 LJ.fn.displayPathToParty({
			                        evt            : evt,
			                        stroke_opacity : 0.25,
			                        cache          : "half_active_paths"
			                    });
                            });
        				}
        			},
        			{
        				id: "intro_6",
        				next_id: "intro_7",
        				duration: 6000,
        				mode: "idem",
                        text: LJ.text_source["intro_text_6"][ LJ.app_language ],
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					LJ.event_markers_intro[0].marker.setIcon( LJ.cloudinary.markers.base_active.open.url );
        					LJ.party_markers_intro[0].marker.setIcon( LJ.cloudinary.markers.party_active.url );
        					LJ.fn.addEventPreview( LJ.intro.event_data );
        					LJ.fn.addPartyPreview( LJ.intro.party_data, { intro: true });
        				}
        			},
        			{
        				id: "intro_7",
        				next_id: "intro_8",
        				duration: 5000,
        				mode: "element",
        				el: ".event-preview",
                        text: LJ.text_source["intro_text_7"][ LJ.app_language ],
        				text_align: "left",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        				}
        			// 
        			},
        			{
        				id: "intro_8",
        				next_id: "intro_9",
        				duration: 5000,
        				mode: "element",
        				el: ".party-preview",
                        text: LJ.text_source["intro_text_8"][ LJ.app_language ],
        				text_align: "right",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        				}
        			// 
        			},
        			{
        				id: "intro_9",
        				next_id: "intro_10",
        				duration: 2500,
        				mode: "element",
        				el: ".btn-requestin",
                        text: LJ.text_source["intro_text_9"][ LJ.app_language ],
        				text_align: "center",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        				}
        			},
        			{
        				id: "intro_10",
        				next_id: "intro_11",
        				duration: 6000,
        				mode: "element",
        				el: ".modal-container",
                        text: LJ.text_source["intro_text_10"][ LJ.app_language ],
        				text_align: "center",
        				delay: 1000,
        				callforward: function(){
        					$('.btn-requestin').click();
        				},
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        				}
        			}, 
        			{
        				id: "intro_11",
        				next_id: "intro_12",
        				duration: 6000,
        				mode: "element",
        				el: ".row-requestin-group-members",
                        text: LJ.text_source["intro_text_11"][ LJ.app_language ],
        				text_align: "center",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        				}
        			}, 
        			{
        				id: "intro_12",
        				next_id: "intro_13",
        				duration: 4000,
        				mode: "area",
        				upper_el: '.row-party-preview',
        				lower_el: '.row-events-accepted-tabview',
                        text: LJ.text_source["intro_text_12"][ LJ.app_language ],
        				text_align: "center",
        				delay: 400,
        				callforward: function(){
        					$('#requestIn').find('.btn-cancel').click();
        				},
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					LJ.event_markers_intro.forEach(function( evt, i ){
        						if( i == 1 ) return;
        						evt.marker.setMap(null);
        					});
        					LJ.party_markers_intro[0].marker.setMap(null);
        					LJ.active_paths[0].setMap(null);
        					LJ.half_active_paths.forEach(function( path ){
        						path.setMap(null);
        					});

        				}
        			},
        			{
        				id: "intro_13",
        				next_id: "intro_14",
        				duration: 4000,
        				mode: "idem",
                        text: LJ.text_source["intro_text_13"][ LJ.app_language ],
        				text_align: "center",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					LJ.event_markers_intro.forEach(function( evt, i ){
        						if( i == 1 ) return evt.marker.setIcon( LJ.cloudinary.markers.accepted.open.url );
        						evt.marker.setMap(null);
        					});
        				}
        			},
        			{
        				id: "intro_13a",
        				next_id: "intro_18",
        				duration: 5000,
        				mode: "area",
                        upper_el: '.row-events-filters',
                        lower_el: '.row-events-accepted-tabview',
                        text: LJ.text_source["intro_text_13a"][ LJ.app_language ],
        				text_align: "center",
                        callforward: function(){

                           // Clear preview
                            google.maps.event.trigger( LJ.map, 'click' )
        					LJ.event_markers_intro.forEach(function( mrk, i ){
        						if( i == 1 ){
                                    mrk.marker.setIcon( LJ.cloudinary.markers.base.full.url );
                                    LJ.map.panTo( mrk.data.address );
                                    return;
                                }
        						mrk.marker.setMap(null);
        					});

                        },
                        callback: function(){
                            LJ.fn.showTextLintro(this);
        				}
        			},
        			{
        				id: "intro_14",
        				next_id: "intro_15",
        				duration: 5000,
        				mode: "area",
        				upper_el: '.row-events-accepted-tabview',
                        text: LJ.text_source["intro_text_14"][ LJ.app_language ],
        				text_align: "center",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					$('.row-events-accepted-tabview')
        						.append( LJ.fn.renderEventTabview( LJ.intro.event_data ) )
        						.children().last()
        						.addClass('event-tabview-intro')
                                .off();
        				}
        			},
        			{
        				id: "intro_15",
        				next_id: "intro_16",
        				duration: 5000,
        				mode: "area",
        				upper_el: '.row-party-preview',
        				upper_cover: true,
                        text: LJ.text_source["intro_text_15"][ LJ.app_language ],
        				text_align: "center",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					LJ.fn.showIntroChatInview();
        				}
        			},
        			{
        				id: "intro_16",
        				next_id: "intro_17",
        				duration: 12000,
        				mode: "idem",
        				// lower_el: '.row-events-accepted-tabview',
                        text: LJ.text_source["intro_text_16"][ LJ.app_language ],
        				text_align: "center",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					LJ.fn.showIntroChatTalk();
        				}
        			},
        			{
        				id: "intro_17",
        				next_id: "intro_13a",
        				duration: 9000,
        				mode: "element",
        				el: '.event-accepted-chat-typing',
        				padding: 20,
        				// lower_el: '.row-events-accepted-tabview',
                        text: LJ.text_source["intro_text_17"][ LJ.app_language ],
        				text_align: "center",
        				callback: function(){
        					LJ.fn.showTextLintro(this);
        					setTimeout(function(){
        						LJ.fn.stageUserForWhisper( 'will', 'chat-intro' );
        						setTimeout(function(){
        							LJ.fn.stageUserForWhisper( 'sandy', 'chat-intro' );
        						}, 2500 );
        					}, 3500 );
        				}
        			},
        			{
        				id: "intro_18",
        				mode: "cover",
        				callback: function(){

        					LJ.fn.showEndingLintro();
        					LJ.fn.clearIntro();

        					$('.btn-fillprofile').click(function(){
        						LJ.fn.endIntro(function(){
        							$('#profile').click();
        							LJ.fn.fetchFacebookPictureIntro();
        						});
        					});

        					$('.ending-skip').click(function(){
        						LJ.fn.endIntro(function(){
        							//
        						});
        					});
        				}
        			}


        		];

        		LJ.fn.lintroStep( 'init' );


        	},
        	lintroStep: function( step_id ){

        		var step = _.find( LJ.intro_steps, function( step ){
        			return step.id == step_id;
        		});

        		if( !step ) {
                    return console.warn('Couldnt find matching step based on step_id : ' + step_id );
                }

        		if( step == "end_intro" ){
                    return LJ.fn.endIntro( callback );
                }

        		LJ.fn.highlightElement( step );

        	},
        	highlightElement: function( opts ){

        		console.log('Applying step : ' + opts.id );

        		if( typeof opts.callforward == 'function' ){
        			opts.callforward();
        			return setTimeout(function(){
        				delete opts.callforward;
        				LJ.fn.highlightElement( opts );
        			}, opts.delay );
        		}

                var abort = false;
        		if( opts.mode == "element" && ( !opts.el || !$(opts.el).length || $(opts.el).length == 0 ) ){
                    console.warn('Couldnt find element : ' + $el );
                    abort = true;
                }
        		if( opts.mode == "area" && ( !opts.upper_el && !opts.lower_el ) ){
                    console.warn('Couldnt find all properties to highlight area');
                    abort = true;
                }

        		if( opts.mode == "cover" && !opts.callback ){
                    console.warn('Didnt get any callback');
                    abort = true;
                }

                if( abort ){
                    return LJ.fn.lintroStep('intro_18');
                }


        		var default_opts = {
        			opacity: 0.85,
        			padding: 0
        		};

        		opts = _.merge( default_opts, opts );        		

				var base_style = {
					'position'   : 'absolute',
					'background' : 'rgba(0,0,0,' + opts.opacity + ')',
					'z-index'    : '100000000',
					'display'    : 'none'
				};

				var $curt_top    = $('<div class="lintro intro-curtain intro-curtain-top"></div>');
				var $curt_left   = $('<div class="lintro intro-curtain intro-curtain-left"></div>');
				var $curt_right  = $('<div class="lintro intro-curtain intro-curtain-right"></div>');
				var $curt_bottom = $('<div class="lintro intro-curtain intro-curtain-bottom"></div>');

				LJ.fn.refreshNextStep( opts.id, opts.next_id );

				if( opts.duration ){
				  	LJ.intro_duration = window.setTimeout(function(){
				  		 $('.lintro-next').click();
				  	}, opts.duration*1.25 );
				 }

				if( opts.mode == "idem" ){					
					if( typeof opts.callback == 'function' ){
						opts.callback();
						return;	
					}
				}

        		if( opts.mode == "element" ){

        			var $el = $( opts.el );

					var top    = $el.offset().top;
					var left   = $el.offset().left;
					var width  = $el.outerWidth();
					var height = $el.outerHeight();

					$curt_top.css({
						'width'  : '100%',
						'height' : top - opts.padding,
						'top'    : 0 
					});

					$curt_bottom.css({
						'width': '100%',
						'height': $(window).height() - ( top + height + opts.padding ),
						'top': window.scrollY + ( top + height ) + opts.padding,
					});

					$curt_left.css({
						'width': left - opts.padding,
						'height': height + 2*opts.padding,
						'top':  top - opts.padding 
					});

					$curt_right.css({
						'left': left + width + opts.padding,
						'width': $(window).width() - ( left + width + opts.padding),
						'height': height + 2*opts.padding,
						'top': top - opts.padding 
					});
				}

				if( opts.mode == "area" ){

					var upper_el_bottom_pose = $(opts.upper_el).offset().top + $(opts.upper_el).outerHeight();

					if( opts.lower_el ){
						var lower_el_top_pose = $(opts.lower_el).offset().top;
					} else {
						var lower_el_top_pose = $(window).height();
						var upper_el_bottom_pose = $(opts.upper_el).offset().top;
						if( opts.upper_cover ){
							upper_el_bottom_pose += $(opts.upper_el).outerHeight();
						}
					}

					$curt_right.css({ display: 'none'});
					$curt_left.css({ display: 'none'});

					$curt_top.css({
						'width' : '100%',
						'height': upper_el_bottom_pose - opts.padding,
						'top': 0
					});

					$curt_bottom.css({
						'width': '100%',
						'height': $(window).height() - lower_el_top_pose + opts.padding,
						'bottom': 0
					});
				}

				if( opts.mode == "cover" ){

					$curt_right.css({ display: 'none'});
					$curt_left.css({ display: 'none'});
					$curt_bottom.css({ display: 'none' });

					$curt_top.css({
						'width': '100%',
						'height': '100%',
						'top': 0
					});

				}

				// Clear everything 
				$('.lintro').velocity('transition.fadeOut', {
					duration: 700,
					complete: function(){
						$(this).remove();
					}
				});


				$curt_top
				  .add( $curt_bottom ).add( $curt_left ).add( $curt_right )
				  .appendTo('body')
				  .css( base_style )
				  .velocity('transition.fadeIn', {
				  	duration: 700,
				  	display: 'block',
				  	complete: function(){

				  		if( typeof opts.callback == 'function' ){
                            opts.callback();
                        }
				  	}
				  });


        	},
        	renderWelcome: function(){

        		var html = [
        			'<div class="welcome welcome-wrap super-centered">',
        				'<div class="welcome-header">',
        					'<h1 data-lid="intro_welcome_header" >Bienvenue sur le meilleur site de soirées au monde</h1>',
        				'</div>',
        				'<div data-lid="intro_welcome_subheader" class="welcome-subheader">',
        					'Nous avons préparé un petit tour sympa très rapide pour comprendre comment ça marche.',
        				'</div>',
        				'<button data-lid="intro_welcome_btn" class="theme-btn btn-welcome">Montrez-moi</button>',
        				'<div data-lid="intro_welcome_skip" class="welcome-skip">',
        					'Je sais déjà comment ça marche!',
        				'</div>',
        			'</div>'
        		].join('');

                html = $(html);
                LJ.fn.setAppLanguage( LJ.app_language, html )

                return html.prop('outerHTML');

        	},
        	showWelcomeLintro: function(){

    			$('.intro-curtain-top')
    				.append( LJ.fn.renderWelcome() ).children().velocity('transition.fadeIn', {
    				duration: 400 
    			});

        	},
        	renderEnding: function(){

        		var html = [
        			'<div class="welcome welcome-wrap super-centered">',
        				'<div class="welcome-header">',
        					'<h1 data-lid="intro_ending_header" >Et c\'est tout ! </h1>',
        				'</div>',
        				'<div data-lid="intro_ending_subheader" class="welcome-subheader">',
        					'Il ne vous reste plus qu\'à remplir votre profile et à en parler à vos amis. <br> A bientôt en soirée!',
        				'</div>',
        				'<button data-lid="intro_ending_btn" class="theme-btn btn-fillprofile">Mon profile</button>',
        				'<div data-lid="intro_ending_skip" class="ending-skip">',
        					'Je remplirai mon profile plus tard...montrez-moi les soirées!',
        				'</div>',
        			'</div>'
        		].join('');

        		html = $(html);
                LJ.fn.setAppLanguage( LJ.app_language, html )

                return html.prop('outerHTML')

        	},
        	showEndingLintro: function(){

        		$('.intro-curtain-top')
    				.append( LJ.fn.renderEnding() ).children().velocity('transition.fadeIn', {
    				duration: 400 
    			});

        	},
        	showTextLintro: function( opts ){

        		if( $('.lintro-text').length != 0 ){
	        		$('.lintro-text').velocity('transition.fadeOut', {
	        			duration: 500,
	        			complete: function(){
	        				$('.lintro-text').remove();
	        				LJ.fn.showTextLintro( opts );
	        			}
	        		});
	        		return;
        		}

		  		$('.intro-curtain-top')
		  			.append('<div class="lintro-text super-centered none">' + opts.text + '</div>')
		  			.children()
		  			.css({ 'text-align': opts.text_align })
		  			.velocity('transition.fadeIn', {
		  				duration: 500
		  			});


        	},
        	refreshNextStep: function( step_id, next_id ){

        		if( $('.lintro-next').length == 0 ){
        			LJ.$body
				  			.append('<div class="lintro-next nonei" data-stepid="' + step_id + '" data-nextid="' + next_id + '">Next</div>')
				  			.find('.lintro-next').velocity('transition.fadeIn', {
				  				complete: function(){
				  					$(this).click(function(){
				  						LJ.fn.lintroStep( next_id );
				  					});
				  				}
				  	});
        		} else {
					$('.lintro-next').velocity('transition.fadeOut', {
						duration: 500,
						complete: function(){
							$(this).remove();
			        		LJ.fn.refreshNextStep( step_id, next_id );	
			        	}		
					});					
        		}
        	},
        	showIntroChatInview: function(){	

        		$('.event-tabview-intro').attr('data-status', 'accepted').addClass('active');
				$('.row-events-accepted').append( LJ.fn.renderEventInview_Intro( LJ.intro.event_data ) );

		        var adjusted_height = $( window ).outerHeight( true )  
                                      - $('.row-events-preview').innerHeight()
                                      - parseInt( $('.row-events-preview').css('top').split('px')[0] );

                $('.event-inview-intro')
                	.css({ height: adjusted_height })
                	.velocity('transition.fadeIn', {
                		duration: 500
                	})
                	.find('.offline').eq(0).removeClass('offline').addClass('online').end()
                	.find('.offline').eq(1).removeClass('offline').addClass('online').end()
                	.find('.offline').eq(2).removeClass('offline').addClass('online')

                // Remove all handlers for the demo chat
                $('.row-events-accepted').find().off();


        	},
        	showIntroChatTalk: function(){

        		var messages = [];
        		messages.push({
        			html: LJ.fn.renderChatLine_Bot( LJ.text_source["ch_bot_msg_group_accepted"][ LJ.app_language ] ),
        			delay: 3500
        		}, {
        			html: LJ.fn.renderChatLine( _.merge( LJ.intro.message_data_user_1, {
        				msg: LJ.text_source["intro_chat_1"][ LJ.app_language ], 
        				sent_at: new Date() }
        			)),
        			delay: 5500
        		}, {
        			html: LJ.fn.renderChatLine( _.merge( LJ.intro.message_data_user_1, {
        				msg: LJ.text_source["intro_chat_2"][ LJ.app_language ],
        				sent_at: new Date() }
        			)),
        			delay: 7500
        		}, {
        			html: LJ.fn.renderChatLine( _.merge( LJ.intro.message_data_user_2, {
        				msg: LJ.text_source["intro_chat_3"][ LJ.app_language ], 
        				sent_at: new Date() }
        			)),
        			delay: 9500
        		});

        		var $intro = $('.event-inview-intro');
        		messages.forEach(function( msg ){

        			setTimeout(function(){

        				if( $intro.find('.event-accepted-notification-message').length != 0 ){
        					$intro.find('.event-accepted-notification-message').remove();
        				}

        				$intro
        					.find('.event-accepted-chat-messages')
        					.append( msg.html )
        					.children().last()
        					.velocity('transition.fadeIn', { duration: 500 });

        			}, msg.delay );

        		});

        	},
        	endIntro: function(callback){

        		$('.lintro').velocity('transition.fadeOut', {
        			duration: 1000,
        			complete: function(){
        				$(this).remove();
        				if( typeof callback == "function" ){
        					callback();
        				}
        			}
        		});

        	},
        	clearIntro: function(){

        		// Clear what has been added
        		$('.event-inview-intro, .event-tabview-intro').velocity('transition.fadeOut', {
        			duration: 500,
        			complete: function(){
        				$(this).remove();
        			}
        		});

        		// Clear preview
        		google.maps.event.trigger( LJ.map, 'click' );

        		LJ.event_markers_intro.forEach(function(marker){
        			marker.marker.setMap(null);
        		});
        		LJ.party_markers_intro.forEach(function(marker){
        			marker.marker.setMap(null);
        		});

        		// Display back what has been hidden
        		LJ.event_markers.forEach(function(marker){
		 			marker.marker.setOpacity(1);
		 		});
		 		LJ.party_markers.forEach(function(marker){
		 			marker.marker.setOpacity(1);
		 		});

        	},
        	fetchFacebookPictureIntro: function(){

        		var img_place = 0;
                var img_id    = LJ.user._id + '--0'; //important 
                var userId    = LJ.user._id;
                var url       = 'https://graph.facebook.com/' + LJ.user.facebook_id + '/picture?width=320&height=320';

				LJ.fn.updatePictureWithUrl({
			                        userId    : LJ.user._id,
			                        url       : url,
			                        img_place : img_place,
			                        img_id    : img_id
				}, function( err, data ){

					if( err ){
					    return LJ.fn.handleServerError("La synchronisation avec Facebook a échouée.");
			                        }

					LJ.fn.handleServerSuccess();
					LJ.fn.toastMsg( LJ.text_source["to_welcome"][ LJ.app_language ],'info', 4000);

				$('#intro').remove();

				LJ.fn.replaceImage({
					img_id: data.img_id,
					img_version: data.img_version,
					img_place: 0,
					scope: ['profile','thumb']
				});

				});

        	}

               

	});
function sleep(ms, cb, p2) {
    setTimeout(function() {
        cb(p2);
    }, ms)
}

function look(json) {
    return JSON.stringify(json, null, '\t');
}

window.csl = function(msg) {
    delog(msg);
};

window.LJ.fn = _.merge( window.LJ.fn || {},

    {   

        init: function(o) {

            if( o.debug ){
                LJ.state.debug = true;
            }

            // Set app language
            var country = o.country;
            moment.locale( country );
            LJ.fn.setAppLanguage( country );

            // Gif loader and placeholder 
            this.initStaticImages();

            // Landing page animation 
            this.initAppBoot();

            // Bind UI action with the proper handler 
            this.handleDomEvents();

            // Augment lodash & jQuery
            this.initAugmentations();

            // Init basic spa routing
            this.initRouter();

            // Init analytics
            this.initAnalytics();

            // Detect when browser is closed
            // this.initHandleCloseBrowser();


        },
        initHandleCloseBrowser: function() {

            LJ.mouse_out_window = false;

            LJ.$body
                .mouseover(function() {
                    LJ.mouse_out_window = false;
                })
                .mouseout(function() {
                    LJ.mouse_out_window = true;
                });

            $(window).bind('beforeunload', function(e) {

                if (LJ.mouse_out_window) {
                    LJ.subscribed_channels = 'lol';
                }

            });

        },
        initTypeahead: function() {

            LJ.fn.initTypeaheadUsers();

        },
        initAugmentations: function() {

            /* La base! */
            _.mixin({
                pluckMany: function() {
                    var array = arguments[0],
                        propertiesToPluck = _.rest(arguments, 1);
                    return _.map(array, function(item) {
                        return _.partial(_.pick, item).apply(null, propertiesToPluck);
                    });
                }
            });

            $.fn.whisperify = function() {
                this
                    .addClass('whisper-active')
                    .find('input').addClass('whisper-text').end()
                    .find('button').addClass('btn-whisper').text( LJ.text_source["ch_button_whisper"][ LJ.app_language ] );
                return this;
            };

            $.fn.normalify = function() {
                this
                    .removeClass('whisper-active')
                    .find('input').removeClass('whisper-text').end()
                    .find('button').removeClass('btn-whisper').text( LJ.text_source["ch_button_send"][ LJ.app_language ] );
                return this;
            };


        },
        initAjaxSetup: function() {

            $.ajaxSetup({
                error: function(xhr) {
                    LJ.fn.handleServerError(xhr);
                },
                complete: function() {
                    setTimeout(function() {
                        LJ.fn.hideLoaders();
                    }, LJ.ui.artificialDelay);
                }
            });

        },
        handleDomEvents: function() {

            LJ.fn.handleDomEvents_Globals();
            LJ.fn.handleDomEvents_Landing();
            LJ.fn.handleDomEvents_UI();
            LJ.fn.handleDomEvents_Profile();
            LJ.fn.handleDomEvents_Search();
            LJ.fn.handleDomEvents_Settings();

            LJ.fn.handleDomEventsChat();
            LJ.fn.handleDomEventsCreate();
            LJ.fn.handleDomEventsFilters();
            LJ.fn.handleDomEventsGroups();
            LJ.fn.handleDomEventsPreview();
            LJ.fn.handleDomEventsTabview();
            LJ.fn.handleDomEventsMap();
            LJ.fn.handleDomEventsSettings();

        },
        initPusherConnection: function( token ) {

            LJ.pusher = new Pusher(window.pusher_app_id, {
                encrypted: true,
                authEndpoint: '/auth/pusher',
                auth: {
                    headers: {
                        "x-access-token": token
                    } // @48723
                }
            });

            LJ.pusher.connection.bind('state_change', function(states) {
                csl('Pusher state is noww : ' + states.current);

                if ((states.current == 'connecting') && LJ.state.connected)
                    LJ.fn.toastMsg("La connexion a été interrompue", 'success', true);

                if (states.current == 'disconnected')
                    LJ.fn.toastMsg("Vous avez été déconnecté.", 'error', true);

                if (states.current == 'unavailable')
                    LJ.fn.toastMsg("Le service n'est pas disponible actuellement, essayez de relancer l'application ", 'error', true);

            });


        },
        initStaticImages: function() {

            LJ.$main_loader = $.cloudinary.image(LJ.cloudinary.loaders.main.id, LJ.cloudinary.loaders.main.params);
            LJ.$main_loader.appendTo($('.loaderWrap'));

            LJ.$mobile_loader = $.cloudinary.image(LJ.cloudinary.loaders.mobile.id, LJ.cloudinary.loaders.mobile.params);
            LJ.$mobile_loader.appendTo($('.m-loaderWrap'));

            LJ.$main_loader_curtain = $.cloudinary.image( LJ.cloudinary.loaders.main_curtain.id, LJ.cloudinary.loaders.main_curtain.params );
            /* Dynamically cloned and appened */

            LJ.$bar_loader = $.cloudinary.image(LJ.cloudinary.loaders.bar.id, LJ.cloudinary.loaders.bar.params);
            /* Dynamically cloned and appended */

            LJ.$spinner_loader = $.cloudinary.image(LJ.cloudinary.loaders.spinner.id, LJ.cloudinary.loaders.spinner.params);
            /* Dynamically cloned and appended */

            LJ.$spinner_loader_2 = $.cloudinary.image(LJ.cloudinary.loaders.spinner_2.id, LJ.cloudinary.loaders.spinner_2.params);
            /* Dynamically cloned and appended */

            LJ.$curtain_loader = $.cloudinary.image(LJ.cloudinary.loaders.curtain.id, LJ.cloudinary.loaders.curtain.params);
            /* Dynamically cloned and appended */


        },
        fetchAndSyncFriends: function(callback) {

            LJ.fn.GraphAPI('/me/friends', function(res) {

                var fb_friends     = res.data;
                var fb_friends_ids = _.pluck(res.data, 'id');

                var data = {
                    userId         : LJ.user._id,
                    fb_friends_ids : fb_friends_ids
                };

                var cb = {
                    success : callback,
                    error   : LJ.fn.handleServerError
                };

                LJ.fn.say('me/fetch-and-sync-friends', data, cb);

            });

        },
        initLayout: function( settings ){

            console.log('initializing layout...');
            /* Google Places to browse the map */
            var options = {};
            LJ.google_places_autocomplete_filters = new google.maps.places.SearchBox( 
                document.getElementById('moveAround'), options 
            );

            LJ.google_places_autocomplete_filters.addListener('places_changed', function(){

                var place = LJ.google_places_autocomplete_filters.getPlaces()[0];
                var bounds = LJ.google_places_autocomplete_filters.getBounds();

                if( !place.geometry ) return;

                 if( place.geometry.viewport ){
                    LJ.map.fitBounds( place.geometry.viewport );
                 } else if( place.geometry.location ){
                    LJ.map.panTo( place.geometry.location );
                    LJ.map.setZoom(14);
                 }
            });

            /* Mise à jour du profile des filters */
            $('.mood-wrap').html( LJ.fn.renderMoodInProfile( LJ.settings.app.mood ));
            $('.drink-wrap').html( LJ.fn.renderDrinkInProfile( LJ.settings.app.drink ));

            /* Filter date for events */
            $('.filters-date').append( LJ.fn.renderDatesInFilter );

            // $('.filter-mixity').html(LJ.fn.renderMixityInFilters(LJ.settings.app.mixity));
            //  $('.filter-agerange').html( LJ.fn.renderAgerangeInFilters( LJ.settings.app.agerange ));
            $('#no').html('').append( LJ.tpl.noResults );


            /* Profile View */
            //$('.row-subheader').find('span').text( LJ.user._id );
            $('.row-name').find('input').val (LJ.user.name );
            $('.row-age').find('input').val( LJ.user.age );
            $('.row-job').find('input').val( LJ.user.job );
            LJ.fn.addItemToInput({ inp: '#country', html: LJ.fn.renderItemInInput_Country( LJ.user.country_code ) });
            $('.drink[data-selectid="' + LJ.user.drink + '"]').addClass('selected');
            $('.mood[data-selectid="' + LJ.user.mood + '"]').addClass('selected');

            /* Settings View */
            _.keys( LJ.user.app_preferences ).forEach(function( key ) {
                _.keys(LJ.user.app_preferences[key]).forEach(function( sub_key ) {
                    var value = LJ.user.app_preferences[ key ][ sub_key ];
                    $('.row-select[data-propid="' + sub_key + '"][data-selectid="' + value + '"]').addClass('selected');
                });
            });

            $('#email_contact').val( LJ.user.contact_email );


            /* Mise à jour des images placeholders */
            $('.picture-wrap').html( LJ.fn.renderProfilePicturesWraps );
            var $placeholder = $.cloudinary.image( LJ.cloudinary.placeholder.id, LJ.cloudinary.placeholder.params );
            $('.picture').prepend( $placeholder );

            /* Update de toutes les images */
            for( var i = 0; i < LJ.user.pictures.length; i++ ){
                LJ.user.pictures[ i ].scope = ['profile'];
                LJ.fn.replaceImage( LJ.user.pictures[ i ] );
            }

            LJ.fn.displayPictureHashtags();

            /* ThumbHeader View */
            LJ.$thumbWrap.find('h2#thumbName').text( LJ.user.name );
            var d = LJ.cloudinary.displayParamsHeaderUser;

            var mainImg = LJ.fn.findMainImage();
            d.version = mainImg.img_version;

            var imgTag = $.cloudinary.image( mainImg.img_id, d );
            imgTag.addClass('left');

            LJ.$thumbWrap.find('.imgWrap').html('').append( imgTag );

            /* Settings View */
            $('#newsletter').prop('checked', LJ.user.newsletter);
            $('#currentEmail').val( LJ.user.email );

            console.log('...done');
        },
        displayLayout: function() {

            /* L'user était déjà connecté */
            if (LJ.state.connected){
                return LJ.fn.toastMsg('Vous avez été reconnecté', 'success');
            }

            LJ.state.connected = true;

            // Header preparation
            $('.menu-item-active').removeClass('menu-item-active');
            $('#events').addClass('menu-item-active')
                .find('span').velocity({
                    opacity: [1, 0],
                    translateY: [0, -5]
                });

            function during_cb() {

                /* Landing Page View */
                $('#facebook_connect').remove();
                $('.hero-logo').remove();
                $('#landingWrap').remove();
                $('body > header').removeClass('none');
                
                $('body').css({
                    'background': 'none'
                });

                $('#mainWrap').css({
                    'background': 'url(/img/app/crossword.png)',
                    'display'   : 'block'
                });

                LJ.$body.trigger('display:layout:during');
                $('.progress_bar--landing').css({ width: '120%' });

                setTimeout(function(){
                    $('.auto-login-msg').velocity('transition.fadeOut');
                    $('.curtain').trigger('curtain:behindthescene:done');
                    $('.progress_bar--landing').velocity('transition.slideUpOut', { duration: 500 });
                }, 1200 );

            }

            function after_cb() {

                $('#thumbWrap').velocity('transition.slideUpIn', {
                    duration: 1000
                });

                $('.row-events-filters').velocity( LJ.ui.slideUpInLight,{ 
                    display: 'flex',
                    duration: 800,
                    delay: 800
                });


                $('.menu-item').velocity({
                    opacity: [1, 0]
                }, {
                    display: 'inline-block',
                    duration: 800,
                    complete: function() {

                        $('.menu-item').each(function(i, el) {
                            $(el).append('<span class="bubble filtered"></span>')
                        });

                        if ( LJ.user.status == 'new'){
                            LJ.fn.initIntro();
                        }

                        if (LJ.user.friends.length == 0){
                            LJ.fn.toastMsg( LJ.text_source["to_init_no_friends"][ LJ.app_language ], "info");
                        }

                        LJ.$body.trigger('display:layout:after');

                    }
                });
            }

            LJ.fn.displayContent( '#eventsWrap', {

                during_cb: during_cb,
                after_cb: after_cb,
                mode: 'curtain',
                myWayIn: 'transition.slideDownIn',
                myWayOut: 'transition.slideUpOut',
                prev: 'revealed',
                delay: 1300

            });


        },
        handleFetchUserAndConfigurationSuccess: function( data ){

            delog('Fetching user and config success');

            LJ.user = data.user;
            LJ.settings = data.settings;

            // Register to Pusher based on users channels 
            LJ.fn.subscribeToChannels( data.user );

            // Set all app ui elements specific to user session 
            LJ.fn.initLayout( data.settings );

            // Je sais plus trop cette fonction me soule! 
            LJ.fn.setLocalStoragePreferences();

            // Init cloudinary fileupload with inputs 
            LJ.fn.initCloudinary( data.cloudinary_tags );

            
            async.parallel([
                function( callback ){
                    // Update friends based on facebook activity on each connection 
                    LJ.fn.fetchAndSyncFriends(function( err, res ){
                        console.log(err);
                        LJ.fn.handleFetchAndSyncFriends( err, res );
                        callback();
                    });

                },
                function( callback ){
                    // Fetch and display all events on map 
                    LJ.fn.fetchEvents(function( err, res ){
                        console.log(err);
                        LJ.fn.handleFetchEvents( err, res );
                        callback();
                    });

                },
                function( callback ){
                    // Fetch all parties 
                    LJ.fn.fetchParties(function( err, res ){
                        console.log( err );
                        LJ.fn.handleFetchParties( err, res );
                        callback();
                    });
                }, 
                function( callback ){
                    // Fetch and display my events on map */
                    LJ.fn.fetchMyEvents(function( err, res ){
                        console.log(err);
                        LJ.fn.handleFetchMyEvents( err, res );
                        callback(); 
                    });
                    
                }], function( err, results ){

                    if( err ){
                        return console.warn('Error initializing the app : ' + err );
                    }

                    // Rendu sur la map quand toutes les données en cache
                    // Display Google Map upon which to render event markers 
                    LJ.$body.on('display:layout:during', function(){
                        LJ.fn.initMap();
                        LJ.fn.displayEventsMarkers( LJ.cache.events );
                        LJ.fn.displayPartyMarkers_Events( LJ.cache.events );
                        LJ.fn.displayPartyMarkers_Parties( LJ.cache.parties );
                    });

                    // Admin scripts. Every com is secured serverside 
                    if( LJ.user.access.indexOf('admin') != -1 ){
                        console.log('Starting admin script');
                        LJ.fn.initParty();
                    }
                    
                    LJ.fn.displayLayout();                    

                });


                // Convenience, out of tests 
                LJ.fn.api('get', 'users', function(err, users) {
                    LJ.cache.users = users;
                });

        }


    }); //end LJ

$('document').ready(function() {

    var initFB = function( time ) {

        if( typeof FB === 'undefined' ){
            return sleep( time, initFB )
        }

        FB.init({
            appId: window.facebook_app_id,
            xfbml: true, // parse social plugins on this page
            version: 'v2.5' // use version 2.5
        });

        LJ.fn.init({
            debug   : true,
            country : 'fr'
        });

        csl('Application ready!');
    }

    initFB( 300 );

});


function delog(msg) {
    if (LJ.state.debug)
        console.log(msg);
}



window.dumdata = [{
    "_id": "55aa651dd00913bc0a5b9eed",
    "index": 0,
    "guid": "8c2a16ea-1eb6-4fb4-a2a8-0cf3815cae43",
    "isActive": true,
    "picture": "http://placehold.it/32x32",
    "age": 26,
    "name": "Fannie Cain",
    "gender": "female",
    "email": "fanniecain@telequiet.com",
    "registered": "2014-02-20T07:16:14 -01:00",
    "latitude": 79.631695,
    "longitude": -13.765706,
    "tags": [
        "qui",
        "est",
        "culpa",
        "non",
        "cillum",
        "aliquip",
        "laboris"
    ],
    "friends": [{
        "id": 0,
        "name": "Rene Reed"
    }, {
        "id": 1,
        "name": "Francine Banks"
    }, {
        "id": 2,
        "name": "Susan Strong"
    }],
    "greeting": "Hello, Fannie Cain! You have 4 unread messages.",
    "favoriteFruit": "apple"
}, {
    "_id": "55aa651dadb7755339c32793",
    "index": 1,
    "guid": "e93dee0b-d865-4c70-86e1-4a0600e95cc0",
    "isActive": true,
    "picture": "http://placehold.it/32x32",
    "age": 40,
    "name": "Bauer Bird",
    "gender": "male",
    "email": "bauerbird@telequiet.com",
    "registered": "2014-11-02T13:09:28 -01:00",
    "latitude": 83.599981,
    "longitude": 127.370264,
    "tags": [
        "est",
        "velit",
        "in",
        "veniam",
        "labore",
        "laborum",
        "voluptate"
    ],
    "friends": [{
        "id": 0,
        "name": "Stark Wiley"
    }, {
        "id": 1,
        "name": "Bonnie George"
    }, {
        "id": 2,
        "name": "Higgins Shepard"
    }],
    "greeting": "Hello, Bauer Bird! You have 1 unread messages.",
    "favoriteFruit": "banana"
}, {
    "_id": "55aa651df3ddc578abf5b576",
    "index": 2,
    "guid": "65ff1b0f-127f-4549-900b-7bf61cf9f683",
    "isActive": false,
    "picture": "http://placehold.it/32x32",
    "age": 21,
    "name": "Tessa Anthony",
    "gender": "female",
    "email": "tessaanthony@telequiet.com",
    "registered": "2015-06-12T13:19:33 -02:00",
    "latitude": -83.109766,
    "longitude": -90.599844,
    "tags": [
        "dolor",
        "et",
        "voluptate",
        "ut",
        "ipsum",
        "ut",
        "exercitation"
    ],
    "friends": [{
        "id": 0,
        "name": "Thelma Wagner"
    }, {
        "id": 1,
        "name": "Denise Barrera"
    }, {
        "id": 2,
        "name": "Alexander David"
    }],
    "greeting": "Hello, Tessa Anthony! You have 1 unread messages.",
    "favoriteFruit": "banana"
}, {
    "_id": "55aa651daa2c00a661e298be",
    "index": 3,
    "guid": "008c2b0a-9aff-4767-8a2b-b0f6935ac7e5",
    "isActive": false,
    "picture": "http://placehold.it/32x32",
    "age": 20,
    "name": "Renee Henry",
    "gender": "female",
    "email": "reneehenry@telequiet.com",
    "registered": "2014-07-13T04:19:49 -02:00",
    "latitude": -82.359818,
    "longitude": -110.960972,
    "tags": [
        "mollit",
        "nostrud",
        "ullamco",
        "ad",
        "sit",
        "eu",
        "sit"
    ],
    "friends": [{
        "id": 0,
        "name": "Rosario Freeman"
    }, {
        "id": 1,
        "name": "Blevins Carroll"
    }, {
        "id": 2,
        "name": "Elinor Norton"
    }],
    "greeting": "Hello, Renee Henry! You have 8 unread messages.",
    "favoriteFruit": "apple"
}]




window.dum_places = [{
    id: '1',
    name: 'Le barilleur',
    address: 'blabla',
    tag: 'bar'
}, {
    id: '2',
    name: 'Le Duplexe',
    address: 'blabla',
    tag: 'nightclub'
}, {
    id: '3',
    name: 'Le Violondingue',
    address: 'blabla',
    tag: 'bar dansant'
}, {
    id: '4',
    name: 'Le Rex Club',
    address: 'blabla',
    tag: 'nightclub'
}, {
    id: '5',
    name: 'O\'Sullivans',
    address: 'blabla',
    tag: 'bar'
}];

var google_places = [

    {
        "place_id": "ChIJHcrWXNdx5kcRssJewNDrBRM",
        "geometry": {
            "location": {
                "G": 48.8526266,
                "K": 2.332816600000001
            }
        },
        "address_components": [{
            "long_name": "Rue du Four",
            "short_name": "Rue du Four",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }, {
            "long_name": "75006",
            "short_name": "75006",
            "types": [
                "postal_code"
            ]
        }]
    }, {
        "place_id": "ChIJMQN_lNlx5kcRwdvjSp5HeRw",
        "geometry": {
            "location": {
                "G": 48.8523123,
                "K": 2.334496100000024
            }
        },
        "address_components": [{
            "long_name": "Rue Princesse",
            "short_name": "Rue Princesse",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }, {
            "long_name": "75006",
            "short_name": "75006",
            "types": [
                "postal_code"
            ]
        }]
    }, {
        "place_id": "ChIJeY1zJctv5kcRmQRo7bqo_9w",
        "geometry": {
            "location": {
                "G": 48.87439939999999,
                "K": 2.3227203000000145
            }
        },
        "address_components": [{
            "long_name": "Boulevard Haussmann",
            "short_name": "Boulevard Haussmann",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJpwykDdtx5kcR_eC7_rndRnc",
        "geometry": {
            "location": {
                "G": 48.84985959999999,
                "K": 2.338692100000003
            },
            "viewport": {
                "Ia": {
                    "G": 48.84032209999999,
                    "j": 48.852885
                },
                "Ca": {
                    "j": 2.3322670000000016,
                    "G": 2.342500100000052
                }
            }
        },
        "address_components": [{
            "long_name": "Odéon",
            "short_name": "Odéon",
            "types": [
                "neighborhood",
                "political"
            ]
        }, {
            "long_name": "6e arrondissement",
            "short_name": "6e Arrondissement",
            "types": [
                "sublocality_level_1",
                "sublocality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJS_r6rAFy5kcRmEpmy97_TnA",
        "geometry": {
            "location": {
                "G": 48.853082,
                "K": 2.369002000000023
            }
        },
        "name": "Bastille",
        "address_components": [{
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJHbrByclt5kcRn-ZGU8KjU_g",
        "geometry": {
            "location": {
                "G": 48.893849,
                "K": 2.390260000000012
            }
        },
        "address_components": [{
            "long_name": "211",
            "short_name": "211",
            "types": [
                "street_number"
            ]
        }, {
            "long_name": "Avenue Jean Jaurès",
            "short_name": "Avenue Jean Jaurès",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }, {
            "long_name": "75019",
            "short_name": "75019",
            "types": [
                "postal_code"
            ]
        }]
    }, {
        "place_id": "ChIJOT-zhv1x5kcRL1VMROKC10U",
        "geometry": {
            "location": {
                "G": 48.855646,
                "K": 2.358804999999961
            }
        },
        "address_components": [{
            "long_name": "5",
            "short_name": "5",
            "types": [
                "street_number"
            ]
        }, {
            "long_name": "Rue de Rivoli",
            "short_name": "Rue de Rivoli",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }, {
            "long_name": "75004",
            "short_name": "75004",
            "types": [
                "postal_code"
            ]
        }]
    }, {
        "place_id": "ChIJDYQ94pVx5kcRbJ7IgfX0R-M",
        "geometry": {
            "location": {
                "G": 48.831161,
                "K": 2.343385000000012
            }
        },
        "address_components": [{
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJRXxvdOxv5kcRxV7Y0Lb_Rzg",
        "geometry": {
            "location": {
                "G": 48.87323139999999,
                "K": 2.2946494999999913
            }
        },
        "address_components": [{
            "long_name": "Place Charles de Gaulle",
            "short_name": "Place Charles de Gaulle",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJHbxOxY1x5kcRnpd3rjQUhos",
        "geometry": {
            "location": {
                "G": 48.830816,
                "K": 2.355389999999943
            }
        },
        "name": "Place d'Italie",
        "address_components": [{
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJYRNhwB1u5kcR6nGuFaBU8j0",
        "geometry": {
            "location": {
                "G": 48.857494,
                "K": 2.351791999999932
            }
        },
        "name": "Hôtel de Ville",
        "address_components": [{
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJ1fXA1ERu5kcRcIbgA4VK1H0",
        "geometry": {
            "location": {
                "G": 48.8867148,
                "K": 2.3388895000000502
            },
            "viewport": {
                "Ia": {
                    "G": 48.8824973,
                    "j": 48.8899191
                },
                "Ca": {
                    "j": 2.327685400000064,
                    "G": 2.3481130999999777
                }
            }
        },
        "address_components": [{
            "long_name": "Montmartre",
            "short_name": "Montmartre",
            "types": [
                "neighborhood",
                "political"
            ]
        }, {
            "long_name": "18e Arrondissement",
            "short_name": "18e Arrondissement",
            "types": [
                "sublocality_level_1",
                "sublocality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }, {
            "long_name": "75018",
            "short_name": "75018",
            "types": [
                "postal_code"
            ]
        }]
    }, {
        "place_id": "ChIJmT1JK6Rx5kcRPyHmfYws-xA",
        "geometry": {
            "location": {
                "G": 48.8215,
                "K": 2.3333599999999706
            }
        },
        "name": "Montsouris",
        "address_components": [{
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJeZSvNDFu5kcRzGO0qYla4ow",
        "geometry": {
            "location": {
                "G": 48.8717109,
                "K": 2.3305685000000267
            }
        },
        "address_components": [{
            "long_name": "Rue Scribe",
            "short_name": "Rue Scribe",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }, {
            "long_name": "75009",
            "short_name": "75009",
            "types": [
                "postal_code"
            ]
        }]
    }, {
        "place_id": "ChIJyWPpag5y5kcRTlTrXVMUpLk",
        "geometry": {
            "location": {
                "G": 48.8467518,
                "K": 2.3817410000000336
            }
        },
        "address_components": [{
            "long_name": "Boulevard Diderot",
            "short_name": "Boulevard Diderot",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }, {
            "long_name": "75012",
            "short_name": "75012",
            "types": [
                "postal_code"
            ]
        }]
    }, {
        "place_id": "ChIJM0qPpvdt5kcR2kSeETMDz_Y",
        "geometry": {
            "location": {
                "G": 48.8576375,
                "K": 2.380338100000017
            }
        },
        "address_components": [{
            "long_name": "Boulevard Voltaire",
            "short_name": "Boulevard Voltaire",
            "types": [
                "route"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }, {
            "long_name": "75011",
            "short_name": "75011",
            "types": [
                "postal_code"
            ]
        }]
    }, {
        "place_id": "ChIJ_1dbg_9w5kcRcD2LaMOCCwQ",
        "geometry": {
            "location": {
                "G": 48.816363,
                "K": 2.3173839999999473
            },
            "viewport": {
                "Ia": {
                    "G": 48.809588,
                    "j": 48.822288
                },
                "Ca": {
                    "j": 2.30007999999998,
                    "G": 2.332443000000012
                }
            }
        },
        "address_components": [{
            "long_name": "Montrouge",
            "short_name": "Montrouge",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Hauts-de-Seine",
            "short_name": "92",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }, {
        "place_id": "ChIJW3Vm7Mdx5kcRkEScBoLkxck",
        "geometry": {
            "location": {
                "G": 48.8372728,
                "K": 2.3353872999999794
            },
            "viewport": {
                "Ia": {
                    "G": 48.831789,
                    "j": 48.8436171
                },
                "Ca": {
                    "j": 2.321454000000017,
                    "G": 2.342012000000068
                }
            }
        },
        "address_components": [{
            "long_name": "Montparnasse",
            "short_name": "Montparnasse",
            "types": [
                "neighborhood",
                "political"
            ]
        }, {
            "long_name": "14e Arrondissement",
            "short_name": "14e Arrondissement",
            "types": [
                "sublocality_level_1",
                "sublocality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "Paris",
            "types": [
                "locality",
                "political"
            ]
        }, {
            "long_name": "Paris",
            "short_name": "75",
            "types": [
                "administrative_area_level_2",
                "political"
            ]
        }, {
            "long_name": "Île-de-France",
            "short_name": "IDF",
            "types": [
                "administrative_area_level_1",
                "political"
            ]
        }, {
            "long_name": "France",
            "short_name": "FR",
            "types": [
                "country",
                "political"
            ]
        }]
    }

];

	function j_testPusher(){
		$.ajax({
			method:'get', url:'/pusher/test',
			beforeSend: function( req ){
				req.setRequestHeader('x-access-token', LJ.accessToken );
			}
		});
	};

	function j_testPusherEvent( event_id ){
		$.ajax({
			beforeSend: function( req ){
				req.setRequestHeader('x-access-token', LJ.accessToken );
			},
			method:'get', url:'/pusher/test/event/'+event_id
		});
	};

	function j_fakeMessage( chatid ){
		LJ.fn.addChatLine({
			chat_id     : chatid,
			msg         : "Hello the moon",
			name        : "Meefore",
			facebook_id : LJ.bot_profile.facebook_id,
			img_vs      : LJ.bot_profile.img_vs,
			img_id      : LJ.bot_profile.img_id,
			sent_at     : new Date()
		});
	};

	function j_fakeMessageOther(msg){

		var $event_wrap = $( _.filter( $('.row-events-accepted-inview'), function(el){ return $(el).css('display') == 'block' }) );
		
		var gid   = $event_wrap.find('.event-accepted-chatgroup.active').attr('data-groupid').split('-')[0];
		var $chat = $event_wrap.find('.event-accepted-chat-wrap[data-groupid="' + gid + '"]');
		var chid  = $chat.attr('data-chatid');

		var $userswrap = $chat.parents('.event-accepted-chat').siblings('.event-accepted-users');
		var $users     = $userswrap.find('.event-accepted-user');

		var i = LJ.fn.randomInt( 0, $users.length-1 );

		var $user = $users.eq( i );
		
		var $img = $user.find('img');
		var img_id =  $img.attr('src').split('/').slice(-1)[0];
		
		LJ.fn.addChatLine({
			chat_id     : chid,
			msg         : msg,
			name        : $user.find('.event-accepted-user-name'),
			facebook_id : $user.attr('data-userid'),
			img_vs      : $img.attr('img_version'),
			img_id      :img_id,
			sent_at     : new Date()
		}); 

	};

	function j_fakeMessageWhisper(msg){
		
		var $event_wrap = $( _.filter( $('.row-events-accepted-inview'), function(el){ return $(el).css('display') == 'block' }) );
		
		var gid   = $event_wrap.find('.event-accepted-chatgroup.active').attr('data-groupid').split('-')[0];
		var $chat = $event_wrap.find('.event-accepted-chat-wrap[data-groupid="' + gid + '"]');
		var chid  = $chat.attr('data-chatid');

		var $userswrap = $chat.parents('.event-accepted-chat').siblings('.event-accepted-users');
		var $users     = $userswrap.find('.event-accepted-user');

		var i = LJ.fn.randomInt( 0, $users.length-1 );

		var $user = $users.eq( i );
		
		var $img = $user.find('img');
		var img_id =  $img.attr('src').split('/').slice(-1)[0];

		var whisper_to = [];
		$users.each(function( i, user ){
			whisper_to.push(
				$(user).attr('data-userid')
			);
		});

		LJ.fn.addChatLineWhisper({
			whisper_to   : whisper_to,
			whispered_by : $user.attr('data-userid'),
			chat_id      : chid,
			msg          : msg,
			name         : $user.find('.event-accepted-user-name'),
			facebook_id  : $user.attr('data-userid'),
			img_vs       : $user.find('img').attr('img_version'),
			img_id       : img_id,
			sent_at      : new Date()
		}); 

	};

	function l(){
		console.log('Response:');
		console.log( arguments[0] )
		console.log( arguments[1] )
		console.log( arguments[2] )
	};